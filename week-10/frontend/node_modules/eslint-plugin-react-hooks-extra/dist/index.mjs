import * as AST2 from '@eslint-react/ast';
import { isReactHookCallWithNameAlias, isReactHookCall, isUseCallbackCall, isReactHookCallWithNameLoose, isUseMemoCall, useHookCollector, isUseStateCall, isReactHookName } from '@eslint-react/core';
import { O, F } from '@eslint-react/eff';
import { createRuleForPlugin, getSettingsFromContext } from '@eslint-react/shared';
import * as VAR5 from '@eslint-react/var';
import { AST_NODE_TYPES } from '@typescript-eslint/types';
import { match, isMatching } from 'ts-pattern';

// package.json
var name = "eslint-plugin-react-hooks-extra";
var version = "1.23.2";
var createRule = createRuleForPlugin("hooks-extra");
function isFromHookCall(name2, context, settings, predicate = F.constTrue) {
  const hookAlias = settings.additionalHooks?.[name2] ?? [];
  return (topLevelId) => F.pipe(
    VAR5.findVariable(topLevelId, context.sourceCode.getScope(topLevelId)),
    O.flatMap(VAR5.getVariableNode(0)),
    O.filter(AST2.is(AST_NODE_TYPES.CallExpression)),
    O.filter(isReactHookCallWithNameAlias(name2, context, hookAlias)),
    O.exists((call) => predicate(topLevelId, call))
  );
}
function isFromUseStateCall(context, settings) {
  const predicate = (topLevelId, call) => {
    const { parent } = call;
    if (!("id" in parent && parent.id?.type === AST_NODE_TYPES.ArrayPattern)) return true;
    return parent.id.elements.findIndex((e) => e?.type === AST_NODE_TYPES.Identifier && e.name === topLevelId.name) === 1;
  };
  return isFromHookCall("useState", context, settings, predicate);
}
function isSetFunctionCall(context, settings) {
  const isIdFromUseStateCall = isFromUseStateCall(context, settings);
  return (node) => {
    switch (node.callee.type) {
      // const data = useState();
      // data.at(1)();
      case AST_NODE_TYPES.CallExpression: {
        const { callee } = node.callee;
        if (callee.type !== AST_NODE_TYPES.MemberExpression) return false;
        if (!("name" in callee.object)) return false;
        const isAt = isMatching({
          type: AST_NODE_TYPES.MemberExpression,
          property: {
            type: AST_NODE_TYPES.Identifier,
            name: "at"
          }
        }, callee);
        const [index] = node.callee.arguments;
        if (!isAt || !index) return false;
        const initialScope = context.sourceCode.getScope(node);
        return O.exists(VAR5.getStaticValue(index, initialScope), (v) => v === 1) && isIdFromUseStateCall(callee.object);
      }
      // const [data, setData] = useState();
      // setData();
      case AST_NODE_TYPES.Identifier: {
        return isIdFromUseStateCall(node.callee);
      }
      // const data = useState();
      // data[1]();
      case AST_NODE_TYPES.MemberExpression: {
        if (!("name" in node.callee.object)) return false;
        const initialScope = context.sourceCode.getScope(node);
        return O.exists(VAR5.getStaticValue(node.callee.property, initialScope), (v) => v === 1) && isIdFromUseStateCall(node.callee.object);
      }
      default: {
        return false;
      }
    }
  };
}
function isThenCall(node) {
  return node.callee.type === AST_NODE_TYPES.MemberExpression && node.callee.property.type === AST_NODE_TYPES.Identifier && node.callee.property.name === "then";
}
function isVariableDeclaratorFromHookCall(node) {
  if (node.type !== AST_NODE_TYPES.VariableDeclarator) return false;
  if (node.id.type !== AST_NODE_TYPES.Identifier) return false;
  if (node.init?.type !== AST_NODE_TYPES.CallExpression) return false;
  switch (node.init.callee.type) {
    case AST_NODE_TYPES.Identifier:
      return isReactHookName(node.init.callee.name);
    case AST_NODE_TYPES.MemberExpression:
      return node.init.callee.property.type === AST_NODE_TYPES.Identifier && isReactHookName(node.init.callee.property.name);
    default:
      return false;
  }
}

// src/rules/no-direct-set-state-in-use-effect.ts
var RULE_NAME = "no-direct-set-state-in-use-effect";
var RULE_FEATURES = [
  "CHK"
];
var no_direct_set_state_in_use_effect_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow direct calls to the 'set' function of 'useState' in 'useEffect'",
      [Symbol.for("rule_features")]: RULE_FEATURES
    },
    messages: {
      noDirectSetStateInUseEffect: "Do not call the 'set' function '{{name}}' of 'useState' directly in 'useEffect'."
    },
    schema: []
  },
  name: RULE_NAME,
  create(context) {
    if (!/use\w*Effect/u.test(context.sourceCode.text)) return {};
    const settings = getSettingsFromContext(context);
    const additionalHooks = settings.additionalHooks ?? {};
    const isUseEffectLikeCall = isReactHookCallWithNameAlias("useEffect", context, additionalHooks.useEffect ?? []);
    const isUseStateCall2 = isReactHookCallWithNameAlias("useState", context, additionalHooks.useState ?? []);
    const isUseMemoCall2 = isReactHookCallWithNameAlias("useMemo", context, additionalHooks.useMemo ?? []);
    const isUseCallbackCall2 = isReactHookCallWithNameAlias("useCallback", context, additionalHooks.useCallback ?? []);
    const isSetStateCall = isSetFunctionCall(context, settings);
    const isIdFromUseStateCall = isFromUseStateCall(context, settings);
    const functionStack = [];
    const setupFunctionRef = { current: O.none() };
    const setupFunctionIdentifiers = [];
    const indFunctionCalls = [];
    const indSetStateCalls = /* @__PURE__ */ new WeakMap();
    const indSetStateCallsInUseEffectArg0 = /* @__PURE__ */ new WeakMap();
    const indSetStateCallsInUseEffectSetup = /* @__PURE__ */ new Map();
    const indSetStateCallsInUseMemoOrCallback = /* @__PURE__ */ new WeakMap();
    const onSetupFunctionEnter = (node) => {
      setupFunctionRef.current = O.some(node);
    };
    const onSetupFunctionExit = (node) => {
      setupFunctionRef.current = O.filter(setupFunctionRef.current, (current) => current !== node);
    };
    function isSetupFunction(node) {
      return node.parent?.type === AST_NODE_TYPES.CallExpression && node.parent.callee !== node && isUseEffectLikeCall(node.parent);
    }
    function getCallKind(node) {
      return match(node).when(isUseStateCall2, () => "useState").when(isUseEffectLikeCall, () => "useEffect").when(isSetStateCall, () => "setState").when(isThenCall, () => "then").otherwise(() => "other");
    }
    function getFunctionKind(node) {
      return match(node).when(isSetupFunction, () => "setup").when(AST2.isFunctionOfImmediatelyInvoked, () => "immediate").otherwise(() => "other");
    }
    return {
      ":function"(node) {
        const kind = getFunctionKind(node);
        functionStack.push({ kind, node });
        if (kind === "setup") {
          onSetupFunctionEnter(node);
        }
      },
      ":function:exit"(node) {
        const { kind } = functionStack.at(-1) ?? {};
        if (kind === "setup") {
          onSetupFunctionExit(node);
        }
        functionStack.pop();
      },
      CallExpression(node) {
        const setupFunction = O.getOrNull(setupFunctionRef.current);
        const pEntry = functionStack.at(-1);
        if (pEntry?.node.async) return;
        match(getCallKind(node)).with("setState", () => {
          if (!pEntry) return;
          switch (true) {
            case (pEntry.node === setupFunction || pEntry.kind === "immediate"): {
              context.report({
                messageId: "noDirectSetStateInUseEffect",
                node,
                data: {
                  name: context.sourceCode.getText(node.callee)
                }
              });
              return;
            }
            default: {
              const mbVariableDeclarator = AST2.findParentNodeGuard(node, isVariableDeclaratorFromHookCall);
              if (O.isNone(mbVariableDeclarator)) {
                const calls = indSetStateCalls.get(pEntry.node) ?? [];
                indSetStateCalls.set(pEntry.node, [...calls, node]);
                return;
              }
              const vd = mbVariableDeclarator.value;
              const prevs = indSetStateCallsInUseMemoOrCallback.get(vd.init) ?? [];
              indSetStateCallsInUseMemoOrCallback.set(vd.init, [...prevs, node]);
            }
          }
        }).with("useEffect", () => {
          if (AST2.isFunction(node.arguments.at(0))) return;
          setupFunctionIdentifiers.push(...AST2.getNestedIdentifiers(node));
        }).with("other", () => {
          if (pEntry?.node !== setupFunction) return;
          indFunctionCalls.push(node);
        }).otherwise(F.constVoid);
      },
      Identifier(node) {
        if (node.parent.type === AST_NODE_TYPES.CallExpression && node.parent.callee === node) return;
        if (!isIdFromUseStateCall(node)) return;
        switch (node.parent.type) {
          case AST_NODE_TYPES.ArrowFunctionExpression: {
            const parent = node.parent.parent;
            if (parent.type !== AST_NODE_TYPES.CallExpression) break;
            if (!isUseMemoCall2(parent)) break;
            const mbVariableDeclarator = AST2.findParentNodeGuard(parent, isVariableDeclaratorFromHookCall);
            if (O.isNone(mbVariableDeclarator)) break;
            const variableDeclarator = mbVariableDeclarator.value;
            const calls = indSetStateCallsInUseEffectArg0.get(variableDeclarator.init) ?? [];
            indSetStateCallsInUseEffectArg0.set(variableDeclarator.init, [...calls, node]);
            break;
          }
          case AST_NODE_TYPES.CallExpression: {
            if (node !== node.parent.arguments.at(0)) break;
            if (isUseCallbackCall2(node.parent)) {
              const mbVariableDeclarator = AST2.findParentNodeGuard(node.parent, isVariableDeclaratorFromHookCall);
              if (O.isNone(mbVariableDeclarator)) break;
              const variableDeclarator = mbVariableDeclarator.value;
              const prevs = indSetStateCallsInUseEffectArg0.get(variableDeclarator.init) ?? [];
              indSetStateCallsInUseEffectArg0.set(variableDeclarator.init, [...prevs, node]);
            }
            if (isUseEffectLikeCall(node.parent)) {
              const prevs = indSetStateCallsInUseEffectArg0.get(node.parent) ?? [];
              indSetStateCallsInUseEffectSetup.set(node.parent, [...prevs, node]);
            }
            break;
          }
        }
      },
      "Program:exit"() {
        const getSetStateCalls = (id, initialScope) => {
          const node = O.flatMap(VAR5.findVariable(id, initialScope), VAR5.getVariableNode(0)).pipe(O.getOrNull);
          switch (node?.type) {
            case AST_NODE_TYPES.ArrowFunctionExpression:
            case AST_NODE_TYPES.FunctionDeclaration:
            case AST_NODE_TYPES.FunctionExpression:
              return indSetStateCalls.get(node) ?? [];
            case AST_NODE_TYPES.CallExpression:
              return indSetStateCallsInUseMemoOrCallback.get(node) ?? indSetStateCallsInUseEffectArg0.get(node) ?? [];
          }
          return [];
        };
        for (const [_, calls] of indSetStateCallsInUseEffectSetup) {
          for (const call of calls) {
            context.report({
              messageId: "noDirectSetStateInUseEffect",
              node: call,
              data: { name: call.name }
            });
          }
        }
        for (const { callee } of indFunctionCalls) {
          if (!("name" in callee)) continue;
          const { name: name2 } = callee;
          const setStateCalls = getSetStateCalls(name2, context.sourceCode.getScope(callee));
          for (const setStateCall of setStateCalls) {
            context.report({
              messageId: "noDirectSetStateInUseEffect",
              node: setStateCall,
              data: {
                name: AST2.toReadableNodeName(setStateCall, (n) => context.sourceCode.getText(n))
              }
            });
          }
        }
        for (const id of setupFunctionIdentifiers) {
          const setStateCalls = getSetStateCalls(id.name, context.sourceCode.getScope(id));
          for (const setStateCall of setStateCalls) {
            context.report({
              messageId: "noDirectSetStateInUseEffect",
              node: setStateCall,
              data: {
                name: AST2.toReadableNodeName(setStateCall, (n) => context.sourceCode.getText(n))
              }
            });
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME2 = "no-direct-set-state-in-use-layout-effect";
var RULE_FEATURES2 = [
  "CHK"
];
var no_direct_set_state_in_use_layout_effect_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow direct calls to the 'set' function of 'useState' in 'useLayoutEffect'",
      [Symbol.for("rule_features")]: RULE_FEATURES2
    },
    messages: {
      noDirectSetStateInUseLayoutEffect: "Do not call the 'set' function '{{name}}' of 'useState' directly in 'useLayoutEffect'."
    },
    schema: []
  },
  name: RULE_NAME2,
  create(context) {
    if (!/use\w*Effect/u.test(context.sourceCode.text)) return {};
    const settings = getSettingsFromContext(context);
    const additionalHooks = settings.additionalHooks ?? {};
    const isUseLayoutEffectLikeCall = isReactHookCallWithNameAlias(
      "useLayoutEffect",
      context,
      additionalHooks.useLayoutEffect ?? []
    );
    const isUseStateCall2 = isReactHookCallWithNameAlias("useState", context, additionalHooks.useState ?? []);
    const isUseMemoCall2 = isReactHookCallWithNameAlias("useMemo", context, additionalHooks.useMemo ?? []);
    const isUseCallbackCall2 = isReactHookCallWithNameAlias("useCallback", context, additionalHooks.useCallback ?? []);
    const isSetStateCall = isSetFunctionCall(context, settings);
    const isIdFromUseStateCall = isFromUseStateCall(context, settings);
    const functionStack = [];
    const setupFunctionRef = { current: O.none() };
    const setupFunctionIdentifiers = [];
    const indFunctionCalls = [];
    const indSetStateCalls = /* @__PURE__ */ new WeakMap();
    const indSetStateCallsInUseLayoutEffectArg0 = /* @__PURE__ */ new WeakMap();
    const indSetStateCallsInUseLayoutEffectSetup = /* @__PURE__ */ new Map();
    const indSetStateCallsInUseMemoOrCallback = /* @__PURE__ */ new WeakMap();
    const onSetupFunctionEnter = (node) => {
      setupFunctionRef.current = O.some(node);
    };
    const onSetupFunctionExit = (node) => {
      setupFunctionRef.current = O.filter(setupFunctionRef.current, (current) => current !== node);
    };
    function isSetupFunction(node) {
      return node.parent?.type === AST_NODE_TYPES.CallExpression && node.parent.callee !== node && isUseLayoutEffectLikeCall(node.parent);
    }
    function getCallKind(node) {
      return match(node).when(isUseStateCall2, () => "useState").when(isUseLayoutEffectLikeCall, () => "useLayoutEffect").when(isSetStateCall, () => "setState").when(isThenCall, () => "then").otherwise(() => "other");
    }
    function getFunctionKind(node) {
      return match(node).when(isSetupFunction, () => "setup").when(AST2.isFunctionOfImmediatelyInvoked, () => "immediate").otherwise(() => "other");
    }
    return {
      ":function"(node) {
        const kind = getFunctionKind(node);
        functionStack.push({ kind, node });
        if (kind === "setup") {
          onSetupFunctionEnter(node);
        }
      },
      ":function:exit"(node) {
        const { kind } = functionStack.at(-1) ?? {};
        if (kind === "setup") {
          onSetupFunctionExit(node);
        }
        functionStack.pop();
      },
      CallExpression(node) {
        const setupFunction = O.getOrNull(setupFunctionRef.current);
        const pEntry = functionStack.at(-1);
        if (pEntry?.node.async) return;
        match(getCallKind(node)).with("setState", () => {
          if (!pEntry) return;
          switch (true) {
            case (pEntry.node === setupFunction || pEntry.kind === "immediate"): {
              context.report({
                messageId: "noDirectSetStateInUseLayoutEffect",
                node,
                data: {
                  name: context.sourceCode.getText(node.callee)
                }
              });
              return;
            }
            default: {
              const mbVariableDeclarator = AST2.findParentNodeGuard(node, isVariableDeclaratorFromHookCall);
              if (O.isNone(mbVariableDeclarator)) {
                const calls = indSetStateCalls.get(pEntry.node) ?? [];
                indSetStateCalls.set(pEntry.node, [...calls, node]);
                return;
              }
              const vd = mbVariableDeclarator.value;
              const prevs = indSetStateCallsInUseMemoOrCallback.get(vd.init) ?? [];
              indSetStateCallsInUseMemoOrCallback.set(vd.init, [...prevs, node]);
            }
          }
        }).with("useLayoutEffect", () => {
          if (AST2.isFunction(node.arguments.at(0))) return;
          setupFunctionIdentifiers.push(...AST2.getNestedIdentifiers(node));
        }).with("other", () => {
          if (pEntry?.node !== setupFunction) return;
          indFunctionCalls.push(node);
        }).otherwise(F.constVoid);
      },
      Identifier(node) {
        if (node.parent.type === AST_NODE_TYPES.CallExpression && node.parent.callee === node) return;
        if (!isIdFromUseStateCall(node)) return;
        switch (node.parent.type) {
          case AST_NODE_TYPES.ArrowFunctionExpression: {
            const parent = node.parent.parent;
            if (parent.type !== AST_NODE_TYPES.CallExpression) break;
            if (!isUseMemoCall2(parent)) break;
            const mbVariableDeclarator = AST2.findParentNodeGuard(parent, isVariableDeclaratorFromHookCall);
            if (O.isNone(mbVariableDeclarator)) break;
            const variableDeclarator = mbVariableDeclarator.value;
            const calls = indSetStateCallsInUseLayoutEffectArg0.get(variableDeclarator.init) ?? [];
            indSetStateCallsInUseLayoutEffectArg0.set(variableDeclarator.init, [...calls, node]);
            break;
          }
          case AST_NODE_TYPES.CallExpression: {
            if (node !== node.parent.arguments.at(0)) break;
            if (isUseCallbackCall2(node.parent)) {
              const mbVariableDeclarator = AST2.findParentNodeGuard(node.parent, isVariableDeclaratorFromHookCall);
              if (O.isNone(mbVariableDeclarator)) break;
              const variableDeclarator = mbVariableDeclarator.value;
              const prevs = indSetStateCallsInUseLayoutEffectArg0.get(variableDeclarator.init) ?? [];
              indSetStateCallsInUseLayoutEffectArg0.set(variableDeclarator.init, [...prevs, node]);
            }
            if (isUseLayoutEffectLikeCall(node.parent)) {
              const prevs = indSetStateCallsInUseLayoutEffectArg0.get(node.parent) ?? [];
              indSetStateCallsInUseLayoutEffectSetup.set(node.parent, [...prevs, node]);
            }
            break;
          }
        }
      },
      "Program:exit"() {
        const getSetStateCalls = (id, initialScope) => {
          const node = O.flatMap(VAR5.findVariable(id, initialScope), VAR5.getVariableNode(0)).pipe(O.getOrNull);
          switch (node?.type) {
            case AST_NODE_TYPES.ArrowFunctionExpression:
            case AST_NODE_TYPES.FunctionDeclaration:
            case AST_NODE_TYPES.FunctionExpression:
              return indSetStateCalls.get(node) ?? [];
            case AST_NODE_TYPES.CallExpression:
              return indSetStateCallsInUseMemoOrCallback.get(node) ?? indSetStateCallsInUseLayoutEffectArg0.get(node) ?? [];
          }
          return [];
        };
        for (const [_, calls] of indSetStateCallsInUseLayoutEffectSetup) {
          for (const call of calls) {
            context.report({
              messageId: "noDirectSetStateInUseLayoutEffect",
              node: call,
              data: { name: call.name }
            });
          }
        }
        for (const { callee } of indFunctionCalls) {
          if (!("name" in callee)) continue;
          const { name: name2 } = callee;
          const setStateCalls = getSetStateCalls(name2, context.sourceCode.getScope(callee));
          for (const setStateCall of setStateCalls) {
            context.report({
              messageId: "noDirectSetStateInUseLayoutEffect",
              node: setStateCall,
              data: {
                name: AST2.toReadableNodeName(setStateCall, (n) => context.sourceCode.getText(n))
              }
            });
          }
        }
        for (const id of setupFunctionIdentifiers) {
          const setStateCalls = getSetStateCalls(id.name, context.sourceCode.getScope(id));
          for (const setStateCall of setStateCalls) {
            context.report({
              messageId: "noDirectSetStateInUseLayoutEffect",
              node: setStateCall,
              data: {
                name: AST2.toReadableNodeName(setStateCall, (n) => context.sourceCode.getText(n))
              }
            });
          }
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME3 = "no-unnecessary-use-callback";
var RULE_FEATURES3 = [
  "CHK"
];
var no_unnecessary_use_callback_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow unnecessary usage of 'useCallback'",
      [Symbol.for("rule_features")]: RULE_FEATURES3
    },
    messages: {
      noUnnecessaryUseCallback: "An 'useCallback' with empty deps and no references to the component scope may be unnecessary."
    },
    schema: []
  },
  name: RULE_NAME3,
  create(context) {
    if (!context.sourceCode.text.includes("use")) return {};
    const alias = getSettingsFromContext(context).additionalHooks?.useCallback ?? [];
    return {
      CallExpression(node) {
        if (!isReactHookCall(node)) return;
        const initialScope = context.sourceCode.getScope(node);
        if (!isUseCallbackCall(node, context) && !alias.some(isReactHookCallWithNameLoose(node))) return;
        const scope = context.sourceCode.getScope(node);
        const component = scope.block;
        if (!AST2.isFunction(component)) return;
        const [arg0, arg1] = node.arguments;
        if (!arg0 || !arg1) return;
        const hasEmptyDeps = F.pipe(
          match(arg1).with({ type: AST_NODE_TYPES.ArrayExpression }, O.some).with({ type: AST_NODE_TYPES.Identifier }, (n) => {
            return F.pipe(
              VAR5.findVariable(n.name, initialScope),
              O.flatMap(VAR5.getVariableNode(0)),
              O.filter(AST2.is(AST_NODE_TYPES.ArrayExpression))
            );
          }).otherwise(O.none),
          O.exists((x) => x.elements.length === 0)
        );
        if (!hasEmptyDeps) return;
        const isReferencedToComponentScope = F.pipe(
          match(arg0).with({ type: AST_NODE_TYPES.ArrowFunctionExpression }, (n) => {
            if (n.body.type === AST_NODE_TYPES.ArrowFunctionExpression) {
              return O.some(n.body);
            }
            return O.some(n);
          }).with({ type: AST_NODE_TYPES.FunctionExpression }, O.some).with({ type: AST_NODE_TYPES.Identifier }, (n) => {
            return F.pipe(
              VAR5.findVariable(n.name, initialScope),
              O.flatMap(VAR5.getVariableNode(0)),
              O.filter(AST2.isFunction)
            );
          }).otherwise(O.none),
          O.map((n) => context.sourceCode.getScope(n)),
          O.map((s) => VAR5.getChidScopes(s).flatMap((x) => x.references)),
          O.exists((refs) => refs.some((x) => x.resolved?.scope.block === component))
        );
        if (!isReferencedToComponentScope) {
          context.report({
            messageId: "noUnnecessaryUseCallback",
            node
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME4 = "no-unnecessary-use-memo";
var RULE_FEATURES4 = [
  "CHK"
];
var no_unnecessary_use_memo_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow unnecessary usage of 'useMemo'",
      [Symbol.for("rule_features")]: RULE_FEATURES4
    },
    messages: {
      noUnnecessaryUseMemo: "An 'useMemo' with empty deps and no references to the component scope may be unnecessary."
    },
    schema: []
  },
  name: RULE_NAME4,
  create(context) {
    if (!context.sourceCode.text.includes("use")) return {};
    const alias = getSettingsFromContext(context).additionalHooks?.useMemo ?? [];
    return {
      CallExpression(node) {
        if (!isReactHookCall(node)) return;
        const initialScope = context.sourceCode.getScope(node);
        if (!isUseMemoCall(node, context) && !alias.some(isReactHookCallWithNameLoose(node))) return;
        const scope = context.sourceCode.getScope(node);
        const component = scope.block;
        if (!AST2.isFunction(component)) return;
        const [arg0, arg1] = node.arguments;
        if (!arg0 || !arg1) return;
        const hasCallInArg0 = F.pipe(
          O.some(arg0),
          O.filter((n) => AST2.isFunction(n)),
          O.exists((n) => [...AST2.getNestedCallExpressions(n.body), ...AST2.getNestedNewExpressions(n.body)].length > 0)
        );
        if (hasCallInArg0) return;
        const hasEmptyDeps = F.pipe(
          match(arg1).with({ type: AST_NODE_TYPES.ArrayExpression }, O.some).with({ type: AST_NODE_TYPES.Identifier }, (n) => {
            return F.pipe(
              VAR5.findVariable(n.name, initialScope),
              O.flatMap(VAR5.getVariableNode(0)),
              O.filter(AST2.is(AST_NODE_TYPES.ArrayExpression))
            );
          }).otherwise(O.none),
          O.exists((x) => x.elements.length === 0)
        );
        if (!hasEmptyDeps) return;
        const isReferencedToComponentScope = F.pipe(
          match(arg0).with({ type: AST_NODE_TYPES.ArrowFunctionExpression }, (n) => {
            if (n.body.type === AST_NODE_TYPES.ArrowFunctionExpression) {
              return O.some(n.body);
            }
            return O.some(n);
          }).with({ type: AST_NODE_TYPES.FunctionExpression }, O.some).with({ type: AST_NODE_TYPES.Identifier }, (n) => {
            return F.pipe(
              VAR5.findVariable(n.name, initialScope),
              O.flatMap(VAR5.getVariableNode(0)),
              O.filter(AST2.isFunction)
            );
          }).otherwise(O.none),
          O.map((n) => context.sourceCode.getScope(n)),
          O.map((s) => VAR5.getChidScopes(s).flatMap((x) => x.references)),
          O.exists((refs) => refs.some((x) => x.resolved?.scope.block === component))
        );
        if (!isReferencedToComponentScope) {
          context.report({
            messageId: "noUnnecessaryUseMemo",
            node
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME5 = "no-useless-custom-hooks";
var RULE_FEATURES5 = [
  "CHK"
];
function isNodeContainsUseCallComments(node, context) {
  return context.sourceCode.getCommentsInside(node).some((comment) => /use\w+\(/u.test(comment.value));
}
var no_useless_custom_hooks_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "enforce custom Hooks to use at least one other hook inside",
      [Symbol.for("rule_features")]: RULE_FEATURES5
    },
    messages: {
      noUselessCustomHooks: "A custom Hook '{{name}}' should use at least one other hook."
    },
    schema: []
  },
  name: RULE_NAME5,
  create(context) {
    const { ctx, listeners } = useHookCollector();
    return {
      ...listeners,
      "Program:exit"(node) {
        const allHooks = ctx.getAllHooks(node);
        for (const { name: name2, node: node2, hookCalls } of allHooks.values()) {
          if (AST2.isEmptyFunction(node2)) continue;
          if (hookCalls.length > 0) continue;
          if (isNodeContainsUseCallComments(node2, context)) continue;
          context.report({
            messageId: "noUselessCustomHooks",
            node: node2,
            data: {
              name: name2.value
            }
          });
        }
      }
    };
  },
  defaultOptions: []
});
var RULE_NAME6 = "prefer-use-state-lazy-initialization";
var RULE_FEATURES6 = [
  "CHK"
];
var ALLOW_LIST = ["Boolean", "String", "Number"];
var prefer_use_state_lazy_initialization_default = createRule({
  meta: {
    type: "problem",
    docs: {
      description: "disallow function calls in 'useState' that aren't wrapped in an initializer function",
      [Symbol.for("rule_features")]: RULE_FEATURES6
    },
    messages: {
      preferUseStateLazyInitialization: "To prevent re-computation, consider using lazy initial state for useState calls that involve function calls. Ex: 'useState(() => getValue())'."
    },
    schema: []
  },
  name: RULE_NAME6,
  create(context) {
    if (!context.sourceCode.text.includes("use")) return {};
    const alias = getSettingsFromContext(context).additionalHooks?.useState ?? [];
    return {
      CallExpression(node) {
        if (!isReactHookCall(node)) return;
        if (!isUseStateCall(node, context) && !alias.some(isReactHookCallWithNameLoose(node))) return;
        const [useStateInput] = node.arguments;
        if (!useStateInput) return;
        const nestedCallExpressions = AST2.getNestedCallExpressions(useStateInput);
        const hasFunctionCall = nestedCallExpressions.some((n) => {
          return "name" in n.callee && !ALLOW_LIST.includes(n.callee.name);
        });
        const hasNewCall = AST2.getNestedNewExpressions(useStateInput).some((n) => {
          return "name" in n.callee && !ALLOW_LIST.includes(n.callee.name);
        });
        if (!hasFunctionCall && !hasNewCall) return;
        context.report({
          messageId: "preferUseStateLazyInitialization",
          node: useStateInput
        });
      }
    };
  },
  defaultOptions: []
});

// src/index.ts
var index_default = {
  meta: {
    name,
    version
  },
  rules: {
    "no-direct-set-state-in-use-effect": no_direct_set_state_in_use_effect_default,
    "no-direct-set-state-in-use-layout-effect": no_direct_set_state_in_use_layout_effect_default,
    "no-unnecessary-use-callback": no_unnecessary_use_callback_default,
    "no-unnecessary-use-memo": no_unnecessary_use_memo_default,
    "no-useless-custom-hooks": no_useless_custom_hooks_default,
    "prefer-use-state-lazy-initialization": prefer_use_state_lazy_initialization_default,
    // Part: deprecated rules
    /** @deprecated Use `no-useless-custom-hooks` instead */
    "ensure-custom-hooks-using-other-hooks": no_useless_custom_hooks_default,
    /** @deprecated Use `no-unnecessary-use-callback` instead */
    "ensure-use-callback-has-non-empty-deps": no_unnecessary_use_callback_default,
    /** @deprecated Use `no-unnecessary-use-memo` instead */
    "ensure-use-memo-has-non-empty-deps": no_unnecessary_use_memo_default,
    /** @deprecated Use `no-useless-custom-hooks` instead */
    "no-redundant-custom-hook": no_useless_custom_hooks_default
  }
};

export { index_default as default };
