'use strict';

// src/helpers.ts
var narrow = (a) => a;
var asConst = (a) => a;
function typeOf(t) {
  return Object.prototype.toString.call(t).replace(/^\[object (.+)\]$/, "$1").toLowerCase();
}
function entries(...args) {
  return Object.entries(args);
}
function fromEntries(...args) {
  return Object.fromEntries(args);
}
function reverse(record) {
  return Object.fromEntries(
    Object.entries(record).map(([key, value]) => [value, key])
  );
}
function birecord(original) {
  return new BiRecord(original);
}
var BiRecord = class {
  constructor(original, reversed = reverse(original)) {
    this.original = original;
    this.reversed = reversed;
  }
  get(key) {
    return this.original[key] ?? this.reversed[key];
  }
  has(key) {
    return key in this.original || key in this.reversed;
  }
};
function zip(...arrs) {
  const result = [];
  const maxIndex = Math.max(...arrs.map((x) => x.length));
  for (let i = 0; i < maxIndex; i++) {
    const element = [];
    for (const arr of arrs) {
      element.push(arr[i]);
    }
    result.push(element);
  }
  return result;
}

exports.BiRecord = BiRecord;
exports.asConst = asConst;
exports.birecord = birecord;
exports.entries = entries;
exports.fromEntries = fromEntries;
exports.narrow = narrow;
exports.typeOf = typeOf;
exports.zip = zip;
