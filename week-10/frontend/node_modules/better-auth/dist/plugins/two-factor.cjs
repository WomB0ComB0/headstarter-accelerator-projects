"use strict";var Ce=Object.defineProperty;var mr=Object.getOwnPropertyDescriptor;var fr=Object.getOwnPropertyNames;var gr=Object.prototype.hasOwnProperty;var hr=(e,t)=>{for(var r in t)Ce(e,r,{get:t[r],enumerable:!0})},wr=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of fr(t))!gr.call(e,n)&&n!==r&&Ce(e,n,{get:()=>t[n],enumerable:!(o=mr(t,n))||o.enumerable});return e};var yr=e=>wr(Ce({},"__esModule",{value:!0}),e);var jo={};hr(jo,{twoFactor:()=>No,twoFactorClient:()=>Do});module.exports=yr(jo);var nt=require("@better-auth/utils/random"),j=(0,nt.createRandomStringGenerator)("a-z","0-9","A-Z","-_");var Re=require("zod");var ee=require("better-call"),st=(0,ee.createMiddleware)(async()=>({})),F=(0,ee.createMiddlewareCreator)({use:[st,(0,ee.createMiddleware)(async()=>({}))]}),m=(0,ee.createEndpointCreator)({use:[st]});var le=require("better-call");var Fe=require("better-call");function De(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function br(e){let t="";for(let r=0;r<e.length;r++)t+=De(e[r]);return t}function it(e,t=!0){if(Array.isArray(e))return`(?:${e.map(u=>`^${it(u,t)}$`).join("|")})`;let r="",o="",n=".";t===!0?(r="/",o="[/\\\\]",n="[^/\\\\]"):t&&(r=t,o=br(r),o.length>1?(o=`(?:${o})`,n=`((?!${o}).)`):n=`[^${o}]`);let s=t?`${o}+?`:"",i=t?`${o}*?`:"",c=t?e.split(r):[e],a="";for(let d=0;d<c.length;d++){let u=c[d],l=c[d+1],p="";if(!(!u&&d>0)){if(t&&(d===c.length-1?p=i:l!=="**"?p=s:p=""),t&&u==="**"){p&&(a+=d===0?"":p,a+=`(?:${n}*?${p})*?`);continue}for(let h=0;h<u.length;h++){let w=u[h];w==="\\"?h<u.length-1&&(a+=De(u[h+1]),h++):w==="?"?a+=n:w==="*"?a+=`${n}*?`:a+=De(w)}a+=p}}return a}function Ar(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}function Ee(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=it(e,t.separator),o=new RegExp(`^${r}$`,t.flags),n=Ar.bind(null,o);return n.options=t,n.pattern=e,n.regexp=o,n}var ke=Object.create(null),we=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ke:globalThis),at=new Proxy(ke,{get(e,t){return we()[t]??ke[t]},has(e,t){let r=we();return t in r||t in ke},set(e,t,r){let o=we(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=we(!0);return delete r[t],!0},ownKeys(){let e=we(!0);return Object.keys(e)}});function Tr(e){return e?e!=="false":!1}var Ne=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var je=Ne==="dev"||Ne==="development",Rr=Ne==="test"||Tr(at.TEST);var K=class extends Error{constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function _e(e){try{return new URL(e).origin}catch{return null}}function ct(e){try{return new URL(e).protocol}catch{return null}}function Be(e){return e.includes("://")?new URL(e).host:e}var Er=F(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,n=e.headers?.get("origin")||e.headers?.get("referer")||"",s=t?.callbackURL||r?.callbackURL,i=t?.redirectTo,c=r?.currentURL,a=t?.errorCallbackURL,d=t?.newUserCallbackURL,u=o.trustedOrigins,l=e.headers?.has("cookie"),p=(w,S)=>{if(w.startsWith("/"))return!1;if(S.includes("*"))return Ee(S)(Be(w));let Q=ct(w);return Q==="http:"||Q==="https:"||!Q?S===_e(w):w.startsWith(S)},h=(w,S)=>{if(!w)return;if(!u.some(ge=>p(w,ge)||w?.startsWith("/")&&S!=="origin"&&!w.includes(":")))throw e.context.logger.error(`Invalid ${S}: ${w}`),e.context.logger.info(`If it's a valid URL, please add ${w} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${u}`),new Fe.APIError("FORBIDDEN",{message:`Invalid ${S}`})};l&&!e.context.options.advanced?.disableCSRFCheck&&h(n,"origin"),s&&h(s,"callbackURL"),i&&h(i,"redirectURL"),c&&h(c,"currentURL"),a&&h(a,"errorCallbackURL"),d&&h(d,"newUserCallbackURL")}),se=e=>F(async t=>{let{context:r}=t,o=e(t),n=r.trustedOrigins,s=(c,a)=>c.startsWith("/")?!1:a.includes("*")?Ee(a)(Be(c)):c.startsWith(a);o&&((c,a)=>{if(!c)return;if(!n.some(u=>s(c,u)||c?.startsWith("/")&&a!=="origin"&&!c.includes(":")))throw t.context.logger.error(`Invalid ${a}: ${c}`),t.context.logger.info(`If it's a valid URL, please add ${c} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${n}`),new Fe.APIError("FORBIDDEN",{message:`Invalid ${a}`})})(o,"callbackURL")});var v=require("better-call"),k=require("zod");var Z=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));var dt=require("@better-auth/utils/base64");var ut=require("@better-auth/utils/hmac");async function $e(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=dt.base64Url.encode(JSON.stringify({session:t,expiresAt:Z(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await(0,ut.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new K("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}async function E(e,t,r,o){let n=e.context.authCookies.sessionToken.options,s=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...n,maxAge:s,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await $e(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}function D(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}var kr=Object.defineProperty,_r=Object.defineProperties,Ur=Object.getOwnPropertyDescriptors,lt=Object.getOwnPropertySymbols,Or=Object.prototype.hasOwnProperty,Sr=Object.prototype.propertyIsEnumerable,pt=(e,t,r)=>t in e?kr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,te=(e,t)=>{for(var r in t||(t={}))Or.call(t,r)&&pt(e,r,t[r]);if(lt)for(var r of lt(t))Sr.call(t,r)&&pt(e,r,t[r]);return e},re=(e,t)=>_r(e,Ur(t)),vr=class extends Error{constructor(e,t,r){super(t||e.toString(),{cause:r}),this.status=e,this.statusText=t,this.error=r}},Pr=async(e,t)=>{var r,o,n,s,i,c;let a=t||{},d={onRequest:[t?.onRequest],onResponse:[t?.onResponse],onSuccess:[t?.onSuccess],onError:[t?.onError],onRetry:[t?.onRetry]};if(!t||!t?.plugins)return{url:e,options:a,hooks:d};for(let u of t?.plugins||[]){if(u.init){let l=await((r=u.init)==null?void 0:r.call(u,e.toString(),t));a=l.options||a,e=l.url}d.onRequest.push((o=u.hooks)==null?void 0:o.onRequest),d.onResponse.push((n=u.hooks)==null?void 0:n.onResponse),d.onSuccess.push((s=u.hooks)==null?void 0:s.onSuccess),d.onError.push((i=u.hooks)==null?void 0:i.onError),d.onRetry.push((c=u.hooks)==null?void 0:c.onRetry)}return{url:e,options:a,hooks:d}},mt=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(){return this.options.delay}},Ir=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(e){return Math.min(this.options.maxDelay,this.options.baseDelay*2**e)}};function Lr(e){if(typeof e=="number")return new mt({type:"linear",attempts:e,delay:1e3});switch(e.type){case"linear":return new mt(e);case"exponential":return new Ir(e);default:throw new Error("Invalid retry strategy")}}var xr=e=>{let t={},r=o=>typeof o=="function"?o():o;if(e?.auth){if(e.auth.type==="Bearer"){let o=r(e.auth.token);if(!o)return t;t.authorization=`Bearer ${o}`}else if(e.auth.type==="Basic"){let o=r(e.auth.username),n=r(e.auth.password);if(!o||!n)return t;t.authorization=`Basic ${btoa(`${o}:${n}`)}`}else if(e.auth.type==="Custom"){let o=r(e.auth.value);if(!o)return t;t.authorization=`${r(e.auth.prefix)} ${o}`}}return t},ht=["get","post","put","patch","delete"];var Cr=/^application\/(?:[\w!#$%&*.^`~-]*\+)?json(;.+)?$/i;function Dr(e){let t=e.headers.get("content-type"),r=new Set(["image/svg","application/xml","application/xhtml","application/html"]);if(!t)return"json";let o=t.split(";").shift()||"";return Cr.test(o)?"json":r.has(o)||o.startsWith("text/")?"text":"blob"}function Nr(e){try{return JSON.parse(e),!0}catch{return!1}}function wt(e){if(e===void 0)return!1;let t=typeof e;return t==="string"||t==="number"||t==="boolean"||t===null?!0:t!=="object"?!1:Array.isArray(e)?!0:e.buffer?!1:e.constructor&&e.constructor.name==="Object"||typeof e.toJSON=="function"}function ft(e){try{return JSON.parse(e)}catch{return e}}function gt(e){return typeof e=="function"}function jr(e){if(e?.customFetchImpl)return e.customFetchImpl;if(typeof globalThis<"u"&&gt(globalThis.fetch))return globalThis.fetch;if(typeof window<"u"&&gt(window.fetch))return window.fetch;throw new Error("No fetch implementation found")}function Br(e){let t=new Headers(e?.headers),r=xr(e);for(let[o,n]of Object.entries(r||{}))t.set(o,n);if(!t.has("content-type")){let o=Fr(e?.body);o&&t.set("content-type",o)}return t}function Fr(e){return wt(e)?"application/json":null}function $r(e){if(!e?.body)return null;let t=new Headers(e?.headers);return wt(e.body)&&!t.has("content-type")?JSON.stringify(e.body):e.body}function Vr(e,t){var r;if(t?.method)return t.method.toUpperCase();if(e.startsWith("@")){let o=(r=e.split("@")[1])==null?void 0:r.split("/")[0];return ht.includes(o)?o.toUpperCase():t?.body?"POST":"GET"}return t?.body?"POST":"GET"}function Mr(e,t){let r;return!e?.signal&&e?.timeout&&(r=setTimeout(()=>t?.abort(),e?.timeout)),{abortTimeout:r,clearTimeout:()=>{r&&clearTimeout(r)}}}function qr(e,t){let{baseURL:r,params:o,query:n}=t||{query:{},params:{},baseURL:""},s=e.startsWith("http")?e.split("/").slice(0,3).join("/"):r;if(!s)throw new TypeError(`Invalid URL ${e}. Are you passing in a relative URL but not setting the baseURL?`);if(e.startsWith("@")){let l=e.toString().split("@")[1].split("/")[0];ht.includes(l)&&(e=e.replace(`@${l}/`,"/"))}s.endsWith("/")||(s+="/");let[i,c]=e.replace(s,"").split("?"),a=new URLSearchParams(c);for(let[l,p]of Object.entries(n||{}))a.set(l,String(p));if(o)if(Array.isArray(o)){let l=i.split("/").filter(p=>p.startsWith(":"));for(let[p,h]of l.entries()){let w=o[p];i=i.replace(h,w)}}else for(let[l,p]of Object.entries(o))i=i.replace(`:${l}`,String(p));i=i.split("/").map(encodeURIComponent).join("/"),i.startsWith("/")&&(i=i.slice(1));let d=a.size>0?`?${a}`.replace(/\+/g,"%20"):"";return new URL(`${i}${d}`,s)}var b=async(e,t)=>{var r,o,n,s,i,c,a,d;let{hooks:u,url:l,options:p}=await Pr(e,t),h=jr(p),w=new AbortController,S=(r=p.signal)!=null?r:w.signal,Q=qr(l,p),ge=$r(p),he=Br(p),I=Vr(l,p),y=re(te({},p),{url:Q,headers:he,body:ge,method:I,signal:S});for(let C of u.onRequest)if(C){let P=await C(y);P instanceof Object&&(y=P)}("pipeTo"in y&&typeof y.pipeTo=="function"||typeof((o=t?.body)==null?void 0:o.pipe)=="function")&&("duplex"in y||(y.duplex="half"));let{clearTimeout:tt}=Mr(p,w),T=await h(y.url,y);tt();let rt={response:T,request:y};for(let C of u.onResponse)if(C){let P=await C(re(te({},rt),{response:(n=t?.hookOptions)!=null&&n.cloneResponse?T.clone():T}));P instanceof Response?T=P:P instanceof Object&&(T=P.response)}if(T.ok){if(!(y.method!=="HEAD"))return{data:"",error:null};let P=Dr(T),z={data:"",response:T,request:y};if(P==="json"||P==="text"){let H=await T.text(),pr=await((s=y.jsonParser)!=null?s:ft)(H);z.data=pr}else z.data=await T[P]();y?.output&&y.output&&!y.disableValidation&&(z.data=y.output.parse(z.data));for(let H of u.onSuccess)H&&await H(re(te({},z),{response:(i=t?.hookOptions)!=null&&i.cloneResponse?T.clone():T}));return t?.throw?z.data:{data:z.data,error:null}}let ur=(c=t?.jsonParser)!=null?c:ft,ot=await T.text(),xe=Nr(ot)?await ur(ot):{},lr={response:T,request:y,error:re(te({},xe),{status:T.status,statusText:T.statusText})};for(let C of u.onError)C&&await C(re(te({},lr),{response:(a=t?.hookOptions)!=null&&a.cloneResponse?T.clone():T}));if(t?.retry){let C=Lr(t.retry),P=(d=t.retryAttempt)!=null?d:0;if(await C.shouldAttemptRetry(P,T)){for(let H of u.onRetry)H&&await H(rt);let z=C.getDelay(P);return await new Promise(H=>setTimeout(H,z)),await b(e,re(te({},t),{retryAttempt:P+1}))}}if(t?.throw)throw new vr(T.status,T.statusText,xe);return{data:null,error:re(te({},xe),{status:T.status,statusText:T.statusText})}};var kt=require("better-call"),J=require("jose");var yt=require("@better-auth/utils/hash"),bt=require("@better-auth/utils/base64");async function At(e){let t=await(0,yt.createHash)("SHA-256").digest(e);return bt.base64Url.encode(new Uint8Array(t),{padding:!1})}function Ue(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?Z(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function R({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:n,scopes:s,claims:i,redirectURI:c,duration:a}){let d=new URL(r);if(d.searchParams.set("response_type","code"),d.searchParams.set("client_id",t.clientId),d.searchParams.set("state",o),d.searchParams.set("scope",s.join(" ")),d.searchParams.set("redirect_uri",t.redirectURI||c),n){let u=await At(n);d.searchParams.set("code_challenge_method","S256"),d.searchParams.set("code_challenge",u)}if(i){let u=i.reduce((l,p)=>(l[p]=null,l),{});d.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...u}}))}return a&&d.searchParams.set("duration",a),d}var zr=require("jose");async function A({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:n,authentication:s}){let i=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(i.set("grant_type","authorization_code"),i.set("code",e),t&&i.set("code_verifier",t),i.set("redirect_uri",r),s==="basic"){let l=btoa(`${o.clientId}:${o.clientSecret}`);c.authorization=`Basic ${l}`}else i.set("client_id",o.clientId),i.set("client_secret",o.clientSecret);let{data:a,error:d}=await b(n,{method:"POST",body:i,headers:c});if(d)throw d;return Ue(a)}var $=require("zod"),ze=require("better-call");var Ve=require("@better-auth/utils/hash"),Me=require("@noble/ciphers/chacha"),ie=require("@noble/ciphers/utils"),qe=require("@noble/ciphers/webcrypto");var Wr=require("@better-auth/utils/hash");var Tt=require("jose");async function Rt(e,t,r=3600){return await new Tt.SignJWT(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}var Gr=require("@noble/hashes/scrypt"),Qr=require("uncrypto"),Kr=require("@better-auth/utils/hex");var ye=async({key:e,data:t})=>{let r=await(0,Ve.createHash)("SHA-256").digest(e),o=(0,ie.utf8ToBytes)(t),n=(0,qe.managedNonce)(Me.xchacha20poly1305)(new Uint8Array(r));return(0,ie.bytesToHex)(n.encrypt(o))},be=async({key:e,data:t})=>{let r=await(0,Ve.createHash)("SHA-256").digest(e),o=(0,ie.hexToBytes)(t),n=(0,qe.managedNonce)(Me.xchacha20poly1305)(new Uint8Array(r));return new TextDecoder().decode(n.decrypt(o))};async function Oe(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?_e(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new ze.APIError("BAD_REQUEST",{message:"callbackURL is required"});let o=j(128),n=j(32),s=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),i=new Date;i.setMinutes(i.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:s,identifier:n,expiresAt:i});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new ze.APIError("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:o}}async function Et(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=$.z.object({callbackURL:$.z.string(),codeVerifier:$.z.string(),errorURL:$.z.string().optional(),newUserURL:$.z.string().optional(),expiresAt:$.z.number(),link:$.z.object({email:$.z.string(),userId:$.z.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}var _t=e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:n}){let s=o||["email","name"];return e.scope&&s.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||n}&scope=${s.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:n})=>A({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let n=(0,J.decodeProtectedHeader)(r),{kid:s,alg:i}=n;if(!s||!i)return!1;let c=await Zr(s),{payload:a}=await(0,J.jwtVerify)(r,c,{algorithms:[i],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(d=>{a[d]!==void 0&&(a[d]=!!a[d])}),o&&a.nonce!==o?!1:!!a},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=(0,J.decodeJwt)(r.idToken);if(!o)return null;let n=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,s=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:n,emailVerified:!1,email:o.email,...s},data:o}}}},Zr=async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await b(`${t}${r}`);if(!o?.keys)throw new kt.APIError("BAD_REQUEST",{message:"Keys not found"});let n=o.keys.find(s=>s.kid===e);if(!n)throw new Error(`JWK with kid ${e} not found`);return await(0,J.importJWK)(n,n.alg)};var Ut=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identify","email"];return e.scope&&n.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${n.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>A({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let s=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${s}.png`}else{let s=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${s}`}let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...n},data:r}}});var Ot=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["email","public_profile"];return e.scope&&n.push(...e.scope),await R({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:n,state:t,redirectURI:o})},validateAuthorizationCode:async({code:t,redirectURI:r})=>A({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=["id","name","email","picture",...e?.fields||[]],{data:o,error:n}=await b("https://graph.facebook.com/me?fields="+r.join(","),{auth:{type:"Bearer",token:t.accessToken}});if(n)return null;let s=await e.mapProfileToUser?.(o);return{user:{id:o.id,name:o.name,email:o.email,image:o.picture.data.url,emailVerified:o.email_verified,...s},data:o}}});var St=e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:n,redirectURI:s}){let i=o||["user:email"];return e.scope&&i.push(...e.scope),R({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:i,state:r,redirectURI:s})},validateAuthorizationCode:async({code:r,redirectURI:o})=>A({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await b("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(n)return null;let s=!1,{data:i}=await b("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});i&&(o.email=(i.find(a=>a.primary)??i[0])?.email,s=i.find(a=>a.email===o.email)?.verified??!1);let c=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:s,...c},data:o}}}};var vt=require("jose");var He=["info","success","warn","error","debug"];function Jr(e,t){return He.indexOf(t)<=He.indexOf(e)}var V={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Yr={info:V.fg.blue,success:V.fg.green,warn:V.fg.yellow,error:V.fg.red,debug:V.fg.magenta},Xr=(e,t)=>{let r=new Date().toISOString();return`${V.dim}${r}${V.reset} ${Yr[e]}${e.toUpperCase()}${V.reset} ${V.bright}[Better Auth]:${V.reset} ${t}`},eo=e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=(n,s,i=[])=>{if(!t||!Jr(r,n))return;let c=Xr(n,s);if(!e||typeof e.log!="function"){n==="error"?console.error(c,...i):n==="warn"?console.warn(c,...i):console.log(c,...i);return}e.log(n==="success"?"info":n,s,...i)};return Object.fromEntries(He.map(n=>[n,(...[s,...i])=>o(n,s,i)]))},B=eo();var Pt=e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){if(!e.clientId||!e.clientSecret)throw B.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new K("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new K("codeVerifier is required for Google");let s=r||["email","profile","openid"];e.scope&&s.push(...e.scope);let i=await R({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:s,state:t,codeVerifier:o,redirectURI:n});return e.accessType&&i.searchParams.set("access_type",e.accessType),e.prompt&&i.searchParams.set("prompt",e.prompt),e.display&&i.searchParams.set("display",e.display),e.hd&&i.searchParams.set("hd",e.hd),i},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>A({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:n}=await b(o);return n?n.aud===e.clientId&&n.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=(0,vt.decodeJwt)(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}});var It=require("jose"),Lt=e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(n){let s=n.scopes||["openid","profile","email","User.Read"];return e.scope&&s.push(...e.scope),R({id:"microsoft",options:e,authorizationEndpoint:r,state:n.state,codeVerifier:n.codeVerifier,scopes:s,redirectURI:n.redirectURI})},validateAuthorizationCode({code:n,codeVerifier:s,redirectURI:i}){return A({code:n,codeVerifier:s,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:o})},async getUserInfo(n){if(e.getUserInfo)return e.getUserInfo(n);if(!n.idToken)return null;let s=(0,It.decodeJwt)(n.idToken),i=e.profilePhotoSize||48;await b(`https://graph.microsoft.com/v1.0/me/photos/${i}x${i}/$value`,{headers:{Authorization:`Bearer ${n.accessToken}`},async onResponse(a){if(!(e.disableProfilePhoto||!a.response.ok))try{let u=await a.response.clone().arrayBuffer(),l=Buffer.from(u).toString("base64");s.picture=`data:image/jpeg;base64, ${l}`}catch(d){B.error(d&&typeof d=="object"&&"name"in d?d.name:"",d)}}});let c=await e.mapProfileToUser?.(s);return{user:{id:s.sub,name:s.name,email:s.email,image:s.picture,emailVerified:!0,...c},data:s}}}};var xt=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){let s=r||["user-read-email"];return e.scope&&s.push(...e.scope),R({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:s,state:t,codeVerifier:o,redirectURI:n})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>A({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...n},data:r}}});var ae={isAction:!1};var Ct=require("@better-auth/utils/random"),Dt=e=>(0,Ct.createRandomStringGenerator)("a-z","A-Z","0-9")(e||32);var Nt=require("jose"),jt=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["user:read:email","openid"];return e.scope&&n.push(...e.scope),R({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:n,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:t,redirectURI:r})=>A({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return B.error("No idToken found in token"),null;let o=(0,Nt.decodeJwt)(r),n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...n},data:o}}});var Bt=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),R({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>A({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...n},data:r}}});var Ft=e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:r,scopes:o,codeVerifier:n,redirectURI:s})=>{let i=o||["account_info.read"];return e.scope&&i.push(...e.scope),await R({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:i,state:r,redirectURI:s,codeVerifier:n})},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:n})=>await A({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await b("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(n)return null;let s=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...s},data:o}}}};var $t=e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:o,scopes:n,redirectURI:s})=>{let i=n||["profile","email","openid"];return e.scope&&i.push(...e.scope),await R({id:"linkedin",options:e,authorizationEndpoint:t,scopes:i,state:o,redirectURI:s})},validateAuthorizationCode:async({code:o,redirectURI:n})=>await A({code:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:r}),async getUserInfo(o){let{data:n,error:s}=await b("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(s)return null;let i=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,emailVerified:n.email_verified||!1,image:n.picture,...i},data:n}}}};var We=(e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),to=e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:We(`${t}/oauth/authorize`),tokenEndpoint:We(`${t}/oauth/token`),userinfoEndpoint:We(`${t}/api/v4/user`)}},Vt=e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=to(e.issuer),n="gitlab";return{id:n,name:"Gitlab",createAuthorizationURL:async({state:i,scopes:c,codeVerifier:a,redirectURI:d})=>{let u=c||["read_user"];return e.scope&&u.push(...e.scope),await R({id:n,options:e,authorizationEndpoint:t,scopes:u,state:i,redirectURI:d,codeVerifier:a})},validateAuthorizationCode:async({code:i,redirectURI:c,codeVerifier:a})=>A({code:i,redirectURI:e.redirectURI||c,options:e,codeVerifier:a,tokenEndpoint:r}),async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);let{data:c,error:a}=await b(o,{headers:{authorization:`Bearer ${i.accessToken}`}});if(a||c.state!=="active"||c.locked)return null;let d=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...d},data:c}}}};var Mt=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identity"];return e.scope&&n.push(...e.scope),R({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:n,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),n={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:s,error:i}=await b("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:n,body:o.toString()});if(i)throw i;return Ue(s)},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...n},data:r}}});var qt=require("zod"),ro={apple:_t,discord:Ut,facebook:Ot,github:St,microsoft:Lt,google:Pt,spotify:xt,twitch:jt,twitter:Bt,dropbox:Ft,linkedin:$t,gitlab:Vt,reddit:Mt},Ge=Object.keys(ro),zt=qt.z.enum(Ge,{description:"OAuth2 provider to use"});var N=require("zod");var ce=require("better-call");var M=require("better-call");var Y=require("zod");function Ht(e){try{return JSON.parse(e)}catch{return null}}var f={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action.",FAILED_TO_UNLINK_LAST_ACCOUNT:"You can't unlink your last account",ACCOUNT_NOT_FOUND:"Account not found"};var Wt=require("@better-auth/utils/hmac"),Gt=require("@better-auth/utils/base64"),Qt=require("@better-auth/utils/binary"),Kt=()=>m("/get-session",{method:"GET",query:Y.z.optional(Y.z.object({disableCookieCache:Y.z.boolean({description:"Disable cookie cache and fetch session from database"}).or(Y.z.string().transform(e=>e==="true")).optional(),disableRefresh:Y.z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Ht(Qt.binary.decode(Gt.base64.decode(r))):null;if(o&&!await(0,Wt.createHMAC)("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return D(e),e.json(null);let n=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let u=o.session;if(o.expiresAt<Date.now()||u.session.expiresAt<new Date){let p=e.context.authCookies.sessionData.name;e.setCookie(p,"",{maxAge:0})}else return e.json(u)}let s=await e.context.internalAdapter.findSession(t);if(e.context.session=s,!s||s.session.expiresAt<new Date)return D(e),s&&await e.context.internalAdapter.deleteSession(s.session.token),e.json(null);if(n||e.query?.disableRefresh)return e.json(s);let i=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(s.session.expiresAt.valueOf()-i*1e3+c*1e3<=Date.now()){let u=await e.context.internalAdapter.updateSession(s.session.token,{expiresAt:Z(e.context.sessionConfig.expiresIn,"sec")});if(!u)return D(e),e.json(null,{status:401});let l=(u.expiresAt.valueOf()-Date.now())/1e3;return await E(e,{session:u,user:s.user},!1,{maxAge:l}),e.json({session:u,user:s.user})}return await $e(e,s),e.json(s)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new M.APIError("INTERNAL_SERVER_ERROR",{message:f.FAILED_TO_GET_SESSION})}}),W=async(e,t)=>{if(e.context.session)return e.context.session;let r=await Kt()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},U=F(async e=>{let t=await W(e);if(!t?.session)throw new M.APIError("UNAUTHORIZED");return{session:t}}),Zt=F(async e=>{let t=await W(e);if(!t?.session)throw new M.APIError("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new M.APIError("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var oo=m("/revoke-session",{method:"POST",body:Y.z.object({token:Y.z.string({description:"The token to revoke"})}),use:[U],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new M.APIError("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new M.APIError("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new M.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),no=m("/revoke-sessions",{method:"POST",use:[U],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new M.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),so=m("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[U],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new M.APIError("UNAUTHORIZED");let n=(await e.context.internalAdapter.listSessions(t.user.id)).filter(s=>s.expiresAt>new Date).filter(s=>s.token!==e.context.session.session.token);return await Promise.all(n.map(s=>e.context.internalAdapter.deleteSession(s.token))),e.json({status:!0})});var Jt=require("jose");var Yt=require("jose/errors");async function G(e,t,r,o=3600){return await Rt({email:t.toLowerCase(),updateTo:r},e,o)}async function io(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ce.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await G(e.context.secret,t.email,void 0,e.context.options.emailVerification?.expiresIn),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}var ao=m("/send-verification-email",{method:"POST",query:N.z.object({currentURL:N.z.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:N.z.object({email:N.z.string({description:"The email to send the verification email to"}).email(),callbackURL:N.z.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ce.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new ce.APIError("BAD_REQUEST",{message:f.USER_NOT_FOUND});return await io(e,r.user),e.json({status:!0})}),co=m("/verify-email",{method:"GET",query:N.z.object({token:N.z.string({description:"The token to verify the email"}),callbackURL:N.z.string({description:"The URL to redirect to after email verification"}).optional()}),use:[se(e=>e.query.callbackURL)],metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new ce.APIError("UNAUTHORIZED",{message:c})}let{token:r}=e.query,o;try{o=await(0,Jt.jwtVerify)(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return c instanceof Yt.JWTExpired?t("token_expired"):t("invalid_token")}let s=N.z.object({email:N.z.string().email(),updateTo:N.z.string().optional()}).parse(o.payload),i=await e.context.internalAdapter.findUserByEmail(s.email);if(!i)return t("user_not_found");if(s.updateTo){let c=await W(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(c.user.email!==s.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let a=await e.context.internalAdapter.updateUserByEmail(s.email,{email:s.updateTo,emailVerified:!1}),d=await G(e.context.secret,s.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:a,url:`${e.context.baseURL}/verify-email?token=${d}`,token:d},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0,user:{id:a.id,email:a.email,name:a.name,image:a.image,emailVerified:a.emailVerified,createdAt:a.createdAt,updatedAt:a.updatedAt}})}if(await e.context.internalAdapter.updateUserByEmail(s.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification){let c=await W(e);if(!c||c.user.email!==s.email){let a=await e.context.internalAdapter.createSession(i.user.id,e.request);if(!a)throw new ce.APIError("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await E(e,{session:a,user:i.user})}}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0,user:null})});async function Se(e,{userInfo:t,account:r,callbackURL:o}){let n=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(a=>{throw B.error(`Better auth was unable to query your database.
Error: `,a),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),s=n?.user,i=!s;if(n){let a=n.accounts.find(d=>d.providerId===r.providerId);if(a){let d=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([u,l])=>l!==void 0));Object.keys(d).length>0&&await e.context.internalAdapter.updateAccount(a.id,d)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return je&&B.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:n.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(l){return B.error("Unable to link account",l),{error:"unable to link account",data:null}}}}else try{if(s=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(a=>a?.user),!t.emailVerified&&s&&e.context.options.emailVerification?.sendOnSignUp){let a=await G(e.context.secret,s.email,void 0,e.context.options.emailVerification?.expiresIn),d=`${e.context.baseURL}/verify-email?token=${a}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:s,url:d,token:a},e.request)}}catch(a){return a instanceof Qe.APIError?{error:a.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!s)return{error:"unable to create user",data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(s.id,e.request);return c?{data:{session:c,user:s},error:null,isRegister:i}:{error:"unable to create session",data:null,isRegister:!1}}var uo=m("/sign-in/social",{method:"POST",query:k.z.object({currentURL:k.z.string().optional()}).optional(),body:k.z.object({callbackURL:k.z.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:k.z.string().optional(),errorCallbackURL:k.z.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:zt,disableRedirect:k.z.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:k.z.optional(k.z.object({token:k.z.string({description:"ID token from the provider"}),nonce:k.z.string({description:"Nonce used to generate the token"}).optional(),accessToken:k.z.string({description:"Access token from the provider"}).optional(),refreshToken:k.z.string({description:"Refresh token from the provider"}).optional(),expiresAt:k.z.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(s=>s.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new v.APIError("NOT_FOUND",{message:f.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new v.APIError("NOT_FOUND",{message:f.ID_TOKEN_NOT_SUPPORTED});let{token:s,nonce:i}=e.body.idToken;if(!await t.verifyIdToken(s,i))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new v.APIError("UNAUTHORIZED",{message:f.INVALID_TOKEN});let a=await t.getUserInfo({idToken:s,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!a||!a?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new v.APIError("UNAUTHORIZED",{message:f.FAILED_TO_GET_USER_INFO});if(!a.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new v.APIError("UNAUTHORIZED",{message:f.USER_EMAIL_NOT_FOUND});let d=await Se(e,{userInfo:{email:a.user.email,id:a.user.id,name:a.user.name||"",image:a.user.image,emailVerified:a.user.emailVerified||!1},account:{providerId:t.id,accountId:a.user.id,accessToken:e.body.idToken.accessToken}});if(d.error)throw new v.APIError("UNAUTHORIZED",{message:d.error});return await E(e,d.data),e.json({redirect:!1,token:d.data.session.token,url:void 0,user:{id:d.data.user.id,email:d.data.user.email,name:d.data.user.name,image:d.data.user.image,emailVerified:d.data.user.emailVerified,createdAt:d.data.user.createdAt,updatedAt:d.data.user.updatedAt}})}let{codeVerifier:r,state:o}=await Oe(e),n=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:n.toString(),redirect:!e.body.disableRedirect})}),lo=m("/sign-in/email",{method:"POST",body:k.z.object({email:k.z.string({description:"Email of the user"}),password:k.z.string({description:"Password of the user"}),callbackURL:k.z.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:k.z.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new v.APIError("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!k.z.string().email().safeParse(t).success)throw new v.APIError("BAD_REQUEST",{message:f.INVALID_EMAIL});let n=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!n)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new v.APIError("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});let s=n.accounts.find(d=>d.providerId==="credential");if(!s)throw e.context.logger.error("Credential account not found",{email:t}),new v.APIError("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});let i=s?.password;if(!i)throw e.context.logger.error("Password not found",{email:t}),new v.APIError("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:i,password:r}))throw e.context.logger.error("Invalid password"),new v.APIError("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!n.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new v.APIError("UNAUTHORIZED",{message:f.EMAIL_NOT_VERIFIED});let d=await G(e.context.secret,n.user.email,void 0,e.context.options.emailVerification?.expiresIn),u=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:n.user,url:u,token:d},e.request),new v.APIError("FORBIDDEN",{message:f.EMAIL_NOT_VERIFIED})}let a=await e.context.internalAdapter.createSession(n.user.id,e.headers,e.body.rememberMe===!1);if(!a)throw e.context.logger.error("Failed to create session"),new v.APIError("UNAUTHORIZED",{message:f.FAILED_TO_CREATE_SESSION});return await E(e,{session:a,user:n.user},e.body.rememberMe===!1),e.json({redirect:!!e.body.callbackURL,token:a.token,url:e.body.callbackURL,user:{id:n.user.id,email:n.user.email,name:n.user.name,image:n.user.image,emailVerified:n.user.emailVerified,createdAt:n.user.createdAt,updatedAt:n.user.updatedAt}})});var de=require("zod");var ve=de.z.object({code:de.z.string().optional(),error:de.z.string().optional(),error_description:de.z.string().optional(),state:de.z.string().optional()}),po=m("/callback/:id",{method:["GET","POST"],body:ve.optional(),query:ve.optional(),metadata:ae},async e=>{let t;try{if(e.method==="GET")t=ve.parse(e.query);else if(e.method==="POST")t=ve.parse(e.body);else throw new Error("Unsupported method")}catch(I){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",I),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:n,error_description:s}=t;if(!n)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${s}`);let i=e.context.socialProviders.find(I=>I.id===e.params.id);if(!i)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:a,link:d,errorURL:u,newUserURL:l}=await Et(e),p;try{p=await i.validateAuthorizationCode({code:r,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${i.id}`})}catch(I){throw e.context.logger.error("",I),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let h=await i.getUserInfo(p).then(I=>I?.user);function w(I){let y=u||a||`${e.context.baseURL}/error`;throw y.includes("?")?y=`${y}&error=${I}`:y=`${y}?error=${I}`,e.redirect(y)}if(!h)return e.context.logger.error("Unable to get user info"),w("unable_to_get_user_info");if(!h.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),w("email_not_found");if(!a)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(d){if(d.email!==h.email.toLowerCase())return w("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:d.userId,providerId:i.id,accountId:h.id}))return w("unable_to_link_account");let y;try{y=a.toString()}catch{y=a}throw e.redirect(y)}let S=await Se(e,{userInfo:{...h,email:h.email,name:h.name||h.email},account:{providerId:i.id,accountId:h.id,...p,scope:p.scopes?.join(",")},callbackURL:a});if(S.error)return e.context.logger.error(S.error.split(" ").join("_")),w(S.error.split(" ").join("_"));let{session:Q,user:ge}=S.data;await E(e,{session:Q,user:ge});let he;try{he=(S.isRegister&&l||a).toString()}catch{he=S.isRegister&&l||a}throw e.redirect(he)});var Xt=require("better-call");var mo=m("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw D(e),new Xt.APIError("BAD_REQUEST",{message:f.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),D(e),e.json({success:!0})});var L=require("zod");var ue=require("better-call");function er(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([n,s])=>o.searchParams.set(n,s)),o.href}function fo(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([n,s])=>o.searchParams.set(n,s)),o.href}var go=m("/forget-password",{method:"POST",body:L.z.object({email:L.z.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:L.z.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new ue.APIError("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let n=60*60*1,s=Z(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||n,"sec"),i=Dt(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${i}`,expiresAt:s});let c=`${e.context.baseURL}/reset-password/${i}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:c,token:i},e.request),e.json({status:!0})}),ho=m("/reset-password/:token",{method:"GET",query:L.z.object({callbackURL:L.z.string({description:"The URL to redirect the user to reset their password"})}),use:[se(e=>e.query.callbackURL)],metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(er(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(er(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(fo(e.context,r,{token:t}))}),wo=m("/reset-password",{query:L.z.optional(L.z.object({token:L.z.string().optional(),currentURL:L.z.string().optional()})),method:"POST",body:L.z.object({newPassword:L.z.string({description:"The new password to set"}),token:L.z.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new ue.APIError("BAD_REQUEST",{message:f.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,n=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new ue.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});if(r.length>n)throw new ue.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let s=`reset-password:${t}`,i=await e.context.internalAdapter.findVerificationValue(s);if(!i||i.expiresAt<new Date)throw new ue.APIError("BAD_REQUEST",{message:f.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(i.id);let c=i.value,a=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(c)).find(l=>l.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,a),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:a,accountId:c}),e.json({status:!0}))});var O=require("zod");var _=require("better-call");var g=require("zod"),yo=require("better-call"),ia=g.z.object({id:g.z.string(),providerId:g.z.string(),accountId:g.z.string(),userId:g.z.string(),accessToken:g.z.string().nullish(),refreshToken:g.z.string().nullish(),idToken:g.z.string().nullish(),accessTokenExpiresAt:g.z.date().nullish(),refreshTokenExpiresAt:g.z.date().nullish(),scope:g.z.string().nullish(),password:g.z.string().nullish(),createdAt:g.z.date().default(()=>new Date),updatedAt:g.z.date().default(()=>new Date)}),aa=g.z.object({id:g.z.string(),email:g.z.string().transform(e=>e.toLowerCase()),emailVerified:g.z.boolean().default(!1),name:g.z.string(),image:g.z.string().nullish(),createdAt:g.z.date().default(()=>new Date),updatedAt:g.z.date().default(()=>new Date)}),ca=g.z.object({id:g.z.string(),userId:g.z.string(),expiresAt:g.z.date(),createdAt:g.z.date().default(()=>new Date),updatedAt:g.z.date().default(()=>new Date),token:g.z.string(),ipAddress:g.z.string().nullish(),userAgent:g.z.string().nullish()}),da=g.z.object({id:g.z.string(),value:g.z.string(),createdAt:g.z.date().default(()=>new Date),updatedAt:g.z.date().default(()=>new Date),expiresAt:g.z.date(),identifier:g.z.string()});function tr(e,t){if(!t)return e;for(let r in t){let o=t[r]?.modelName;o&&(e[r].modelName=o);for(let n in e[r].fields){let s=t[r]?.fields?.[n];s&&(e[r].fields[n].fieldName=s)}}return e}var Ao=m("/change-password",{method:"POST",body:O.z.object({newPassword:O.z.string({description:"The new password to set"}),currentPassword:O.z.string({description:"The current password"}),revokeOtherSessions:O.z.boolean({description:"Revoke all other sessions"}).optional()}),use:[U],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,n=e.context.session,s=e.context.password.config.minPasswordLength;if(t.length<s)throw e.context.logger.error("Password is too short"),new _.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(t.length>i)throw e.context.logger.error("Password is too long"),new _.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(n.user.id)).find(p=>p.providerId==="credential"&&p.password);if(!a||!a.password)throw new _.APIError("BAD_REQUEST",{message:f.CREDENTIAL_ACCOUNT_NOT_FOUND});let d=await e.context.password.hash(t);if(!await e.context.password.verify({hash:a.password,password:r}))throw new _.APIError("BAD_REQUEST",{message:f.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(a.id,{password:d});let l=null;if(o){await e.context.internalAdapter.deleteSessions(n.user.id);let p=await e.context.internalAdapter.createSession(n.user.id,e.headers);if(!p)throw new _.APIError("INTERNAL_SERVER_ERROR",{message:f.FAILED_TO_GET_SESSION});await E(e,{session:p,user:n.user}),l=p.token}return e.json({token:l,user:{id:n.user.id,email:n.user.email,name:n.user.name,image:n.user.image,emailVerified:n.user.emailVerified,createdAt:n.user.createdAt,updatedAt:n.user.updatedAt}})}),To=m("/set-password",{method:"POST",body:O.z.object({newPassword:O.z.string()}),metadata:{SERVER_ONLY:!0},use:[U]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new _.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});let n=e.context.password.config.maxPasswordLength;if(t.length>n)throw e.context.logger.error("Password is too long"),new _.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let i=(await e.context.internalAdapter.findAccounts(r.user.id)).find(a=>a.providerId==="credential"&&a.password),c=await e.context.password.hash(t);if(!i)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:c}),e.json({status:!0});throw new _.APIError("BAD_REQUEST",{message:"user already has a password"})}),Ro=m("/delete-user",{method:"POST",use:[U],body:O.z.object({callbackURL:O.z.string().optional(),password:O.z.string().optional(),token:O.z.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new _.APIError("NOT_FOUND");let t=e.context.session;if(e.body.password){let s=(await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!s||!s.password)throw new _.APIError("BAD_REQUEST",{message:f.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:s.password,password:e.body.password}))throw new _.APIError("BAD_REQUEST",{message:f.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let n=t.session.createdAt.getTime(),s=e.context.options.session.freshAge;if(Date.now()-n>s)throw new _.APIError("BAD_REQUEST",{message:f.SESSION_EXPIRED})}if(e.body.token)return await rr({...e,query:{token:e.body.token}}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let n=j(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${n}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let s=`${e.context.baseURL}/delete-user/callback?token=${n}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:s,token:n},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),D(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),rr=m("/delete-user/callback",{method:"GET",query:O.z.object({token:O.z.string(),callbackURL:O.z.string().optional()}),use:[se(e=>e.query.callbackURL)]},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new _.APIError("NOT_FOUND");let t=await W(e);if(!t)throw new _.APIError("NOT_FOUND",{message:f.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new _.APIError("NOT_FOUND",{message:f.INVALID_TOKEN});if(r.value!==t.user.id)throw new _.APIError("NOT_FOUND",{message:f.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),D(e);let n=e.context.options.user.deleteUser?.afterDelete;if(n&&await n(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),Eo=m("/change-email",{method:"POST",query:O.z.object({currentURL:O.z.string().optional()}).optional(),body:O.z.object({newEmail:O.z.string({description:"The new email to set"}).email(),callbackURL:O.z.string({description:"The URL to redirect to after email verification"}).optional()}),use:[U],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new _.APIError("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new _.APIError("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new _.APIError("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let n=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new _.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await G(e.context.secret,e.context.session.user.email,e.body.newEmail,e.context.options.emailVerification?.expiresIn),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var ko=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,_o=m("/error",{method:"GET",metadata:{...ae,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(ko(t),{headers:{"Content-Type":"text/html"}})});var Uo=m("/ok",{method:"GET",metadata:{...ae,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));var Oo=require("zod");var So=require("better-call");var X=require("zod");var Ae=require("better-call");var vo=m("/list-accounts",{method:"GET",use:[U],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId,createdAt:o.createdAt,updatedAt:o.updatedAt,accountId:o.accountId,scopes:o.scope?.split(",")||[]})))}),Po=m("/link-social",{method:"POST",requireHeaders:!0,query:X.z.object({currentURL:X.z.string().optional()}).optional(),body:X.z.object({callbackURL:X.z.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:X.z.enum(Ge,{description:"The OAuth2 provider to use"})}),use:[U],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId===e.body.provider))throw new Ae.APIError("BAD_REQUEST",{message:f.SOCIAL_ACCOUNT_ALREADY_LINKED});let n=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!n)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new Ae.APIError("NOT_FOUND",{message:f.PROVIDER_NOT_FOUND});let s=await Oe(e,{userId:t.user.id,email:t.user.email}),i=await n.createAuthorizationURL({state:s.state,codeVerifier:s.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${n.id}`});return e.json({url:i.toString(),redirect:!0})}),Io=m("/unlink-account",{method:"POST",body:X.z.object({providerId:X.z.string()}),use:[Zt]},async e=>{let t=await e.context.internalAdapter.findAccounts(e.context.session.user.id);if(t.length===1)throw new Ae.APIError("BAD_REQUEST",{message:f.FAILED_TO_UNLINK_LAST_ACCOUNT});if(!t.find(o=>o.providerId===e.body.providerId))throw new Ae.APIError("BAD_REQUEST",{message:f.ACCOUNT_NOT_FOUND});return await e.context.internalAdapter.deleteAccount(e.body.providerId,e.context.session.user.id),e.json({status:!0})});var Qe=require("better-call");var q=require("zod");var pe=require("better-call");var Pe="two_factor";var Ie="trust_device";var Ke=require("zod");var or=require("@better-auth/utils/hmac"),oe=F({body:Ke.z.object({trustDevice:Ke.z.boolean().optional()})},async e=>{let t=await W(e);if(!t){let r=e.context.createAuthCookie(Pe),o=await e.getSignedCookie(r.name,e.context.secret);if(!o)throw new pe.APIError("UNAUTHORIZED",{message:"invalid two factor cookie"});let n=await e.context.internalAdapter.findUserById(o);if(!n)throw new pe.APIError("UNAUTHORIZED",{message:"invalid two factor cookie"});let s=await e.context.internalAdapter.createSession(o,e.request);if(!s)throw new pe.APIError("INTERNAL_SERVER_ERROR",{message:"failed to create session"});return{valid:async()=>{if(await E(e,{session:s,user:n}),e.body.trustDevice){let i=e.context.createAuthCookie(Ie,{maxAge:2592e3}),c=await(0,or.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,`${n.id}!${s.token}`);await e.setSignedCookie(i.name,`${c}!${s.token}`,e.context.secret,i.attributes)}return e.json({token:s.token,user:{id:n.id,email:n.email,emailVerified:n.emailVerified,name:n.name,image:n.image,createdAt:n.createdAt,updatedAt:n.updatedAt}})},invalid:async()=>{throw new pe.APIError("UNAUTHORIZED",{message:"invalid two factor authentication"})},session:{session:s,user:n}}}return{valid:async()=>e.json({token:t.session.token,user:{id:t.user.id,email:t.user.email,emailVerified:t.user.emailVerified,name:t.user.name,image:t.user.image,createdAt:t.user.createdAt,updatedAt:t.user.updatedAt}}),invalid:async()=>{throw new pe.APIError("UNAUTHORIZED",{message:"invalid two factor authentication"})},session:t}});var me=require("better-call");var x={OTP_NOT_ENABLED:"OTP not enabled",OTP_HAS_EXPIRED:"OTP has expired",TOTP_NOT_ENABLED:"TOTP not enabled",TWO_FACTOR_NOT_ENABLED:"Two factor isn't enabled",BACKUP_CODES_NOT_ENABLED:"Backup codes aren't enabled",INVALID_BACKUP_CODE:"Invalid backup code"};function Lo(e){return Array.from({length:e?.amount??10}).fill(null).map(()=>j(e?.length??10,"a-z","0-9","A-Z")).map(t=>`${t.slice(0,5)}-${t.slice(5)}`)}async function Ze(e,t){let r=e,o=t?.customBackupCodesGenerate?t.customBackupCodesGenerate():Lo(),n=await ye({data:JSON.stringify(o),key:r});return{backupCodes:o,encryptedBackupCodes:n}}async function xo(e,t){let r=await nr(e.backupCodes,t);return r?{status:r.includes(e.code),updated:r.filter(o=>o!==e.code)}:{status:!1,updated:null}}async function nr(e,t){let r=Buffer.from(await be({key:t,data:e})).toString("utf-8"),o=JSON.parse(r),n=q.z.array(q.z.string()).safeParse(o);return n.success?n.data:null}var sr=e=>{let t="twoFactor";return{id:"backup_code",endpoints:{verifyBackupCode:m("/two-factor/verify-backup-code",{method:"POST",body:q.z.object({code:q.z.string(),disableSession:q.z.boolean().optional()}),use:[oe]},async r=>{let o=r.context.session.user,n=await r.context.adapter.findOne({model:t,where:[{field:"userId",value:o.id}]});if(!n)throw new me.APIError("BAD_REQUEST",{message:x.BACKUP_CODES_NOT_ENABLED});let s=await xo({backupCodes:n.backupCodes,code:r.body.code},r.context.secret);if(!s.status)throw new me.APIError("UNAUTHORIZED",{message:x.INVALID_BACKUP_CODE});let i=await ye({key:r.context.secret,data:JSON.stringify(s.updated)});return await r.context.adapter.updateMany({model:t,update:{backupCodes:i},where:[{field:"userId",value:o.id}]}),r.body.disableSession||await E(r,{session:r.context.session.session,user:o}),r.json({user:o,session:r.context.session})}),generateBackupCodes:m("/two-factor/generate-backup-codes",{method:"POST",body:q.z.object({password:q.z.string()}),use:[U]},async r=>{let o=r.context.session.user;if(!o.twoFactorEnabled)throw new me.APIError("BAD_REQUEST",{message:x.TWO_FACTOR_NOT_ENABLED});await r.context.password.checkPassword(o.id,r);let n=await Ze(r.context.secret,e);return await r.context.adapter.update({model:t,update:{backupCodes:n.encryptedBackupCodes},where:[{field:"userId",value:r.context.session.user.id}]}),r.json({status:!0,backupCodes:n.backupCodes})}),viewBackupCodes:m("/two-factor/view-backup-codes",{method:"GET",body:q.z.object({userId:q.z.string()}),metadata:{SERVER_ONLY:!0}},async r=>{let o=await r.context.adapter.findOne({model:t,where:[{field:"userId",value:r.body.userId}]});if(!o)throw new me.APIError("BAD_REQUEST",{message:"Backup codes aren't enabled"});let n=await nr(o.backupCodes,r.context.secret);if(!n)throw new me.APIError("BAD_REQUEST",{message:x.BACKUP_CODES_NOT_ENABLED});return r.json({status:!0,backupCodes:n})})}}};var fe=require("better-call"),Je=require("zod");var ir=e=>{let t={...e,digits:e?.digits||6,period:(e?.period||3)*60*1e3},r="twoFactor",o=m("/two-factor/send-otp",{method:"POST",use:[oe],metadata:{openapi:{summary:"Send two factor OTP",description:"Send two factor OTP to the user",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async s=>{if(!e||!e.sendOTP)throw s.context.logger.error("send otp isn't configured. Please configure the send otp function on otp options."),new fe.APIError("BAD_REQUEST",{message:"otp isn't configured"});let i=s.context.session.user;if(!await s.context.adapter.findOne({model:r,where:[{field:"userId",value:i.id}]}))throw new fe.APIError("BAD_REQUEST",{message:x.OTP_NOT_ENABLED});let a=j(t.digits,"0-9");return await s.context.internalAdapter.createVerificationValue({value:a,identifier:`2fa-otp-${i.id}`,expiresAt:new Date(Date.now()+t.period)}),await e.sendOTP({user:i,otp:a},s.request),s.json({status:!0})}),n=m("/two-factor/verify-otp",{method:"POST",body:Je.z.object({code:Je.z.string({description:"The otp code to verify"})}),use:[oe],metadata:{openapi:{summary:"Verify two factor OTP",description:"Verify two factor OTP",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async s=>{let i=s.context.session.user;if(!i.twoFactorEnabled)throw new fe.APIError("BAD_REQUEST",{message:"two factor isn't enabled"});if(!await s.context.adapter.findOne({model:r,where:[{field:"userId",value:i.id}]}))throw new fe.APIError("BAD_REQUEST",{message:x.OTP_NOT_ENABLED});let a=await s.context.internalAdapter.findVerificationValue(`2fa-otp-${i.id}`);if(!a||a.expiresAt<new Date)throw new fe.APIError("BAD_REQUEST",{message:x.OTP_HAS_EXPIRED});return a.value===s.body.code?s.context.valid():s.context.invalid()});return{id:"otp",endpoints:{sendTwoFactorOTP:o,verifyTwoFactorOTP:n}}};var ne=require("better-call"),Te=require("zod");var Le=require("@better-auth/utils/otp"),ar=e=>{let t={...e,digits:e?.digits||6,period:e?.period||30},r="twoFactor",o=m("/totp/generate",{method:"POST",use:[U],metadata:{openapi:{summary:"Generate TOTP code",description:"Use this endpoint to generate a TOTP code",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{code:{type:"string"}}}}}}}}}},async i=>{if(e?.disable)throw i.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new ne.APIError("BAD_REQUEST",{message:"totp isn't configured"});let c=i.context.session.user,a=await i.context.adapter.findOne({model:r,where:[{field:"userId",value:c.id}]});if(!a)throw new ne.APIError("BAD_REQUEST",{message:x.TOTP_NOT_ENABLED});return{code:await(0,Le.createOTP)(a.secret,{period:t.period,digits:t.digits}).totp()}}),n=m("/two-factor/get-totp-uri",{method:"POST",use:[U],body:Te.z.object({password:Te.z.string({description:"User password"})}),metadata:{openapi:{summary:"Get TOTP URI",description:"Use this endpoint to get the TOTP URI",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{totpURI:{type:"string"}}}}}}}}}},async i=>{if(e?.disable)throw i.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new ne.APIError("BAD_REQUEST",{message:"totp isn't configured"});let c=i.context.session.user,a=await i.context.adapter.findOne({model:r,where:[{field:"userId",value:c.id}]});if(!a||!c.twoFactorEnabled)throw new ne.APIError("BAD_REQUEST",{message:x.TOTP_NOT_ENABLED});let d=await be({key:i.context.secret,data:a.secret});return await i.context.password.checkPassword(c.id,i),{totpURI:(0,Le.createOTP)(d,{digits:t.digits,period:t.period}).url(e?.issuer||i.context.appName,c.email)}}),s=m("/two-factor/verify-totp",{method:"POST",body:Te.z.object({code:Te.z.string({description:"The otp code to verify"})}),use:[oe],metadata:{openapi:{summary:"Verify two factor TOTP",description:"Verify two factor TOTP",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async i=>{if(e?.disable)throw i.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new ne.APIError("BAD_REQUEST",{message:"totp isn't configured"});let c=i.context.session.user,a=await i.context.adapter.findOne({model:r,where:[{field:"userId",value:c.id}]});if(!a)throw new ne.APIError("BAD_REQUEST",{message:x.TOTP_NOT_ENABLED});let d=await be({key:i.context.secret,data:a.secret});if(!await(0,Le.createOTP)(d,{period:t.period,digits:t.digits}).verify(i.body.code))return i.context.invalid();if(!c.twoFactorEnabled){let l=await i.context.internalAdapter.updateUser(c.id,{twoFactorEnabled:!0}),p=await i.context.internalAdapter.createSession(c.id,i.request,!1,i.context.session.session).catch(h=>{throw h});await i.context.internalAdapter.deleteSession(i.context.session.session.token),await E(i,{session:p,user:l})}return i.context.valid()});return{id:"totp",endpoints:{generateTOTP:o,getTOTPURI:n,verifyTOTP:s}}};var Co=require("better-call");async function Ye(e,t){let o=(await e.context.internalAdapter.findAccounts(t.userId))?.find(i=>i.providerId==="credential"),n=o?.password;return!o||!n?!1:await e.context.password.verify({hash:n,password:t.password})}var Xe=require("better-call");var cr={user:{fields:{twoFactorEnabled:{type:"boolean",required:!1,defaultValue:!1,input:!1}}},twoFactor:{fields:{secret:{type:"string",required:!0,returned:!1},backupCodes:{type:"string",required:!0,returned:!1},userId:{type:"string",required:!0,returned:!1,references:{model:"user",field:"id"}}}}};var dr=require("@better-auth/utils/otp"),et=require("@better-auth/utils/hmac");var Do=e=>({id:"two-factor",$InferServerPlugin:{},atomListeners:[{matcher:t=>t.startsWith("/two-factor/"),signal:"$sessionSignal"}],pathMethods:{"/two-factor/disable":"POST","/two-factor/enable":"POST","/two-factor/send-otp":"POST","/two-factor/generate-backup-codes":"POST"},fetchPlugins:[{id:"two-factor",name:"two-factor",hooks:{async onSuccess(t){t.data?.twoFactorRedirect&&e?.onTwoFactorRedirect&&await e.onTwoFactorRedirect()}}}]});var No=e=>{let t={twoFactorTable:"twoFactor"},r=ar(e?.totpOptions),o=sr(e?.backupCodeOptions),n=ir(e?.otpOptions);return{id:"two-factor",endpoints:{...r.endpoints,...n.endpoints,...o.endpoints,enableTwoFactor:m("/two-factor/enable",{method:"POST",body:Re.z.object({password:Re.z.string({description:"User password"}).min(8)}),use:[U],metadata:{openapi:{summary:"Enable two factor authentication",description:"Use this endpoint to enable two factor authentication. This will generate a TOTP URI and backup codes. Once the user verifies the TOTP URI, the two factor authentication will be enabled.",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{totpURI:{type:"string",description:"TOTP URI"},backupCodes:{type:"array",items:{type:"string"},description:"Backup codes"}}}}}}}}}},async s=>{let i=s.context.session.user,{password:c}=s.body;if(!await Ye(s,{password:c,userId:i.id}))throw new Xe.APIError("BAD_REQUEST",{message:f.INVALID_PASSWORD});let d=j(32),u=await ye({key:s.context.secret,data:d}),l=await Ze(s.context.secret,e?.backupCodeOptions);if(e?.skipVerificationOnEnable){let h=await s.context.internalAdapter.updateUser(i.id,{twoFactorEnabled:!0}),w=await s.context.internalAdapter.createSession(h.id,s.request,!1,s.context.session.session);await E(s,{session:w,user:h}),await s.context.internalAdapter.deleteSession(s.context.session.session.token)}await s.context.adapter.deleteMany({model:t.twoFactorTable,where:[{field:"userId",value:i.id}]}),await s.context.adapter.create({model:t.twoFactorTable,data:{secret:u,backupCodes:l.encryptedBackupCodes,userId:i.id}});let p=(0,dr.createOTP)(d,{digits:e?.totpOptions?.digits||6,period:e?.totpOptions?.period}).url(e?.issuer||s.context.appName,i.email);return s.json({totpURI:p,backupCodes:l.backupCodes})}),disableTwoFactor:m("/two-factor/disable",{method:"POST",body:Re.z.object({password:Re.z.string({description:"User password"}).min(8)}),use:[U],metadata:{openapi:{summary:"Disable two factor authentication",description:"Use this endpoint to disable two factor authentication.",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async s=>{let i=s.context.session.user,{password:c}=s.body;if(!await Ye(s,{password:c,userId:i.id}))throw new Xe.APIError("BAD_REQUEST",{message:"Invalid password"});let d=await s.context.internalAdapter.updateUser(i.id,{twoFactorEnabled:!1});await s.context.adapter.delete({model:t.twoFactorTable,where:[{field:"userId",value:d.id}]});let u=await s.context.internalAdapter.createSession(d.id,s.request,!1,s.context.session.session);return await E(s,{session:u,user:d}),await s.context.internalAdapter.deleteSession(s.context.session.session.token),s.json({status:!0})})},options:e,hooks:{after:[{matcher(s){return s.path==="/sign-in/email"||s.path==="/sign-in/username"||s.path==="/sign-in/phone-number"},handler:F(async s=>{let i=s.context.newSession;if(!i||!i?.user.twoFactorEnabled)return;let c=s.context.createAuthCookie(Ie),a=await s.getSignedCookie(c.name,s.context.secret);if(a){let[u,l]=a.split("!"),p=await(0,et.createHMAC)("SHA-256","base64urlnopad").sign(s.context.secret,`${i.user.id}!${l}`);if(u===p){let h=await(0,et.createHMAC)("SHA-256","base64urlnopad").sign(s.context.secret,`${i.user.id}!${l}`);await s.setSignedCookie(c.name,`${h}!${i.session.token}`,s.context.secret,c.attributes);return}}D(s),await s.context.internalAdapter.deleteSession(i.session.token);let d=s.context.createAuthCookie(Pe,{maxAge:60*10});return await s.setSignedCookie(d.name,i.user.id,s.context.secret,d.attributes),s.json({twoFactorRedirect:!0})})}]},schema:tr(cr,e?.schema),rateLimit:[{pathMatcher(s){return s.startsWith("/two-factor/")},window:10,max:3}]}};0&&(module.exports={twoFactor,twoFactorClient});
