import{z as T}from"zod";import{APIError as vc,createRouter as Pc,getCookie as Ic,getSignedCookie as Lc,setCookie as xc,setSignedCookie as Dc}from"better-call";import{APIError as Ce}from"better-call";import{createEndpointCreator as ht,createMiddleware as Pe,createMiddlewareCreator as wt}from"better-call";var Ie=Pe(async()=>({})),ee=wt({use:[Ie,Pe(async()=>({}))]}),m=ht({use:[Ie]});function ye(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function yt(e){let t="";for(let o=0;o<e.length;o++)t+=ye(e[o]);return t}function Le(e,t=!0){if(Array.isArray(e))return`(?:${e.map(l=>`^${Le(l,t)}$`).join("|")})`;let o="",r="",i=".";t===!0?(o="/",r="[/\\\\]",i="[^/\\\\]"):t&&(o=t,r=yt(o),r.length>1?(r=`(?:${r})`,i=`((?!${r}).)`):i=`[^${r}]`);let n=t?`${r}+?`:"",s=t?`${r}*?`:"",d=t?e.split(o):[e],a="";for(let c=0;c<d.length;c++){let l=d[c],f=d[c+1],p="";if(!(!l&&c>0)){if(t&&(c===d.length-1?p=s:f!=="**"?p=n:p=""),t&&l==="**"){p&&(a+=c===0?"":p,a+=`(?:${i}*?${p})*?`);continue}for(let b=0;b<l.length;b++){let y=l[b];y==="\\"?b<l.length-1&&(a+=ye(l[b+1]),b++):y==="?"?a+=i:y==="*"?a+=`${i}*?`:a+=ye(y)}a+=p}}return a}function bt(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}function de(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let o=Le(e,t.separator),r=new RegExp(`^${o}$`,t.flags),i=bt.bind(null,r);return i.options=t,i.pattern=e,i.regexp=r,i}var le=Object.create(null),ne=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?le:globalThis),xe=new Proxy(le,{get(e,t){return ne()[t]??le[t]},has(e,t){let o=ne();return t in o||t in le},set(e,t,o){let r=ne(!0);return r[t]=o,!0},deleteProperty(e,t){if(!t)return!1;let o=ne(!0);return delete o[t],!0},ownKeys(){let e=ne(!0);return Object.keys(e)}});function At(e){return e?e!=="false":!1}var be=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var Ae=be==="dev"||be==="development",Rt=be==="test"||At(xe.TEST);var Q=class extends Error{constructor(t,o){super(t),this.name="BetterAuthError",this.message=t,this.cause=o,this.stack=""}};function ue(e){try{return new URL(e).origin}catch{return null}}function De(e){try{return new URL(e).protocol}catch{return null}}function Re(e){return e.includes("://")?new URL(e).host:e}var Et=ee(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:o,context:r}=e,i=e.headers?.get("origin")||e.headers?.get("referer")||"",n=t?.callbackURL||o?.callbackURL,s=t?.redirectTo,d=o?.currentURL,a=t?.errorCallbackURL,c=t?.newUserCallbackURL,l=r.trustedOrigins,f=e.headers?.has("cookie"),p=(y,S)=>{if(y.startsWith("/"))return!1;if(S.includes("*"))return de(S)(Re(y));let W=De(y);return W==="http:"||W==="https:"||!W?S===ue(y):y.startsWith(S)},b=(y,S)=>{if(!y)return;if(!l.some(oe=>p(y,oe)||y?.startsWith("/")&&S!=="origin"&&!y.includes(":")))throw e.context.logger.error(`Invalid ${S}: ${y}`),e.context.logger.info(`If it's a valid URL, please add ${y} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${l}`),new Ce("FORBIDDEN",{message:`Invalid ${S}`})};f&&!e.context.options.advanced?.disableCSRFCheck&&b(i,"origin"),n&&b(n,"callbackURL"),s&&b(s,"redirectURL"),d&&b(d,"currentURL"),a&&b(a,"errorCallbackURL"),c&&b(c,"newUserCallbackURL")}),te=e=>ee(async t=>{let{context:o}=t,r=e(t),i=o.trustedOrigins,n=(d,a)=>d.startsWith("/")?!1:a.includes("*")?de(a)(Re(d)):d.startsWith(a);r&&((d,a)=>{if(!d)return;if(!i.some(l=>n(d,l)||d?.startsWith("/")&&a!=="origin"&&!d.includes(":")))throw t.context.logger.error(`Invalid ${a}: ${d}`),t.context.logger.info(`If it's a valid URL, please add ${d} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${i}`),new Ce("FORBIDDEN",{message:`Invalid ${a}`})})(r,"callbackURL")});import{APIError as I}from"better-call";import{z as k}from"zod";var x=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));import{base64Url as Tt}from"@better-auth/utils/base64";import{createHMAC as Ut}from"@better-auth/utils/hmac";async function Ee(e,t){if(e.context.options.session?.cookieCache?.enabled){let r=Tt.encode(JSON.stringify({session:t,expiresAt:x(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await Ut("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(r.length>4093)throw new Q("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,r,e.context.authCookies.sessionData.options)}}async function v(e,t,o,r){let i=e.context.authCookies.sessionToken.options,n=o?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...i,maxAge:n,...r}),o&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await Ee(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}function $(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}var kt=Object.defineProperty,_t=Object.defineProperties,Ot=Object.getOwnPropertyDescriptors,je=Object.getOwnPropertySymbols,St=Object.prototype.hasOwnProperty,vt=Object.prototype.propertyIsEnumerable,Ve=(e,t,o)=>t in e?kt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o,Z=(e,t)=>{for(var o in t||(t={}))St.call(t,o)&&Ve(e,o,t[o]);if(je)for(var o of je(t))vt.call(t,o)&&Ve(e,o,t[o]);return e},J=(e,t)=>_t(e,Ot(t)),Pt=class extends Error{constructor(e,t,o){super(t||e.toString(),{cause:o}),this.status=e,this.statusText=t,this.error=o}},It=async(e,t)=>{var o,r,i,n,s,d;let a=t||{},c={onRequest:[t?.onRequest],onResponse:[t?.onResponse],onSuccess:[t?.onSuccess],onError:[t?.onError],onRetry:[t?.onRetry]};if(!t||!t?.plugins)return{url:e,options:a,hooks:c};for(let l of t?.plugins||[]){if(l.init){let f=await((o=l.init)==null?void 0:o.call(l,e.toString(),t));a=f.options||a,e=f.url}c.onRequest.push((r=l.hooks)==null?void 0:r.onRequest),c.onResponse.push((i=l.hooks)==null?void 0:i.onResponse),c.onSuccess.push((n=l.hooks)==null?void 0:n.onSuccess),c.onError.push((s=l.hooks)==null?void 0:s.onError),c.onRetry.push((d=l.hooks)==null?void 0:d.onRetry)}return{url:e,options:a,hooks:c}},Ne=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(){return this.options.delay}},Lt=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(e){return Math.min(this.options.maxDelay,this.options.baseDelay*2**e)}};function xt(e){if(typeof e=="number")return new Ne({type:"linear",attempts:e,delay:1e3});switch(e.type){case"linear":return new Ne(e);case"exponential":return new Lt(e);default:throw new Error("Invalid retry strategy")}}var Dt=e=>{let t={},o=r=>typeof r=="function"?r():r;if(e?.auth){if(e.auth.type==="Bearer"){let r=o(e.auth.token);if(!r)return t;t.authorization=`Bearer ${r}`}else if(e.auth.type==="Basic"){let r=o(e.auth.username),i=o(e.auth.password);if(!r||!i)return t;t.authorization=`Basic ${btoa(`${r}:${i}`)}`}else if(e.auth.type==="Custom"){let r=o(e.auth.value);if(!r)return t;t.authorization=`${o(e.auth.prefix)} ${r}`}}return t},Me=["get","post","put","patch","delete"];var Ct=/^application\/(?:[\w!#$%&*.^`~-]*\+)?json(;.+)?$/i;function jt(e){let t=e.headers.get("content-type"),o=new Set(["image/svg","application/xml","application/xhtml","application/html"]);if(!t)return"json";let r=t.split(";").shift()||"";return Ct.test(r)?"json":o.has(r)||r.startsWith("text/")?"text":"blob"}function Vt(e){try{return JSON.parse(e),!0}catch{return!1}}function qe(e){if(e===void 0)return!1;let t=typeof e;return t==="string"||t==="number"||t==="boolean"||t===null?!0:t!=="object"?!1:Array.isArray(e)?!0:e.buffer?!1:e.constructor&&e.constructor.name==="Object"||typeof e.toJSON=="function"}function $e(e){try{return JSON.parse(e)}catch{return e}}function Be(e){return typeof e=="function"}function Nt(e){if(e?.customFetchImpl)return e.customFetchImpl;if(typeof globalThis<"u"&&Be(globalThis.fetch))return globalThis.fetch;if(typeof window<"u"&&Be(window.fetch))return window.fetch;throw new Error("No fetch implementation found")}function $t(e){let t=new Headers(e?.headers),o=Dt(e);for(let[r,i]of Object.entries(o||{}))t.set(r,i);if(!t.has("content-type")){let r=Bt(e?.body);r&&t.set("content-type",r)}return t}function Bt(e){return qe(e)?"application/json":null}function Mt(e){if(!e?.body)return null;let t=new Headers(e?.headers);return qe(e.body)&&!t.has("content-type")?JSON.stringify(e.body):e.body}function qt(e,t){var o;if(t?.method)return t.method.toUpperCase();if(e.startsWith("@")){let r=(o=e.split("@")[1])==null?void 0:o.split("/")[0];return Me.includes(r)?r.toUpperCase():t?.body?"POST":"GET"}return t?.body?"POST":"GET"}function zt(e,t){let o;return!e?.signal&&e?.timeout&&(o=setTimeout(()=>t?.abort(),e?.timeout)),{abortTimeout:o,clearTimeout:()=>{o&&clearTimeout(o)}}}function Ft(e,t){let{baseURL:o,params:r,query:i}=t||{query:{},params:{},baseURL:""},n=e.startsWith("http")?e.split("/").slice(0,3).join("/"):o;if(!n)throw new TypeError(`Invalid URL ${e}. Are you passing in a relative URL but not setting the baseURL?`);if(e.startsWith("@")){let f=e.toString().split("@")[1].split("/")[0];Me.includes(f)&&(e=e.replace(`@${f}/`,"/"))}n.endsWith("/")||(n+="/");let[s,d]=e.replace(n,"").split("?"),a=new URLSearchParams(d);for(let[f,p]of Object.entries(i||{}))a.set(f,String(p));if(r)if(Array.isArray(r)){let f=s.split("/").filter(p=>p.startsWith(":"));for(let[p,b]of f.entries()){let y=r[p];s=s.replace(b,y)}}else for(let[f,p]of Object.entries(r))s=s.replace(`:${f}`,String(p));s=s.split("/").map(encodeURIComponent).join("/"),s.startsWith("/")&&(s=s.slice(1));let c=a.size>0?`?${a}`.replace(/\+/g,"%20"):"";return new URL(`${s}${c}`,n)}var w=async(e,t)=>{var o,r,i,n,s,d,a,c;let{hooks:l,url:f,options:p}=await It(e,t),b=Nt(p),y=new AbortController,S=(o=p.signal)!=null?o:y.signal,W=Ft(f,p),oe=Mt(p),ie=$t(p),L=qt(f,p),h=J(Z({},p),{url:W,headers:ie,body:oe,method:L,signal:S});for(let D of l.onRequest)if(D){let P=await D(h);P instanceof Object&&(h=P)}("pipeTo"in h&&typeof h.pipeTo=="function"||typeof((r=t?.body)==null?void 0:r.pipe)=="function")&&("duplex"in h||(h.duplex="half"));let{clearTimeout:Oe}=zt(p,y),R=await b(h.url,h);Oe();let Se={response:R,request:h};for(let D of l.onResponse)if(D){let P=await D(J(Z({},Se),{response:(i=t?.hookOptions)!=null&&i.cloneResponse?R.clone():R}));P instanceof Response?R=P:P instanceof Object&&(R=P.response)}if(R.ok){if(!(h.method!=="HEAD"))return{data:"",error:null};let P=jt(R),q={data:"",response:R,request:h};if(P==="json"||P==="text"){let z=await R.text(),gt=await((n=h.jsonParser)!=null?n:$e)(z);q.data=gt}else q.data=await R[P]();h?.output&&h.output&&!h.disableValidation&&(q.data=h.output.parse(q.data));for(let z of l.onSuccess)z&&await z(J(Z({},q),{response:(s=t?.hookOptions)!=null&&s.cloneResponse?R.clone():R}));return t?.throw?q.data:{data:q.data,error:null}}let mt=(d=t?.jsonParser)!=null?d:$e,ve=await R.text(),we=Vt(ve)?await mt(ve):{},ft={response:R,request:h,error:J(Z({},we),{status:R.status,statusText:R.statusText})};for(let D of l.onError)D&&await D(J(Z({},ft),{response:(a=t?.hookOptions)!=null&&a.cloneResponse?R.clone():R}));if(t?.retry){let D=xt(t.retry),P=(c=t.retryAttempt)!=null?c:0;if(await D.shouldAttemptRetry(P,R)){for(let z of l.onRetry)z&&await z(Se);let q=D.getDelay(P);return await new Promise(z=>setTimeout(z,q)),await w(e,J(Z({},t),{retryAttempt:P+1}))}}if(t?.throw)throw new Pt(R.status,R.statusText,we);return{data:null,error:J(Z({},we),{status:R.status,statusText:R.statusText})}};import{APIError as Jt}from"better-call";import{decodeJwt as Kt,decodeProtectedHeader as Yt,importJWK as Xt,jwtVerify as er}from"jose";import{createHash as Ht}from"@better-auth/utils/hash";import{base64Url as Gt}from"@better-auth/utils/base64";async function ze(e){let t=await Ht("SHA-256").digest(e);return Gt.encode(new Uint8Array(t),{padding:!1})}function pe(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?x(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function E({id:e,options:t,authorizationEndpoint:o,state:r,codeVerifier:i,scopes:n,claims:s,redirectURI:d,duration:a}){let c=new URL(o);if(c.searchParams.set("response_type","code"),c.searchParams.set("client_id",t.clientId),c.searchParams.set("state",r),c.searchParams.set("scope",n.join(" ")),c.searchParams.set("redirect_uri",t.redirectURI||d),i){let l=await ze(i);c.searchParams.set("code_challenge_method","S256"),c.searchParams.set("code_challenge",l)}if(s){let l=s.reduce((f,p)=>(f[p]=null,f),{});c.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...l}}))}return a&&c.searchParams.set("duration",a),c}import{jwtVerify as Lo}from"jose";async function A({code:e,codeVerifier:t,redirectURI:o,options:r,tokenEndpoint:i,authentication:n}){let s=new URLSearchParams,d={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(s.set("grant_type","authorization_code"),s.set("code",e),t&&s.set("code_verifier",t),s.set("redirect_uri",o),n==="basic"){let f=btoa(`${r.clientId}:${r.clientSecret}`);d.authorization=`Basic ${f}`}else s.set("client_id",r.clientId),s.set("client_secret",r.clientSecret);let{data:a,error:c}=await w(i,{method:"POST",body:s,headers:d});if(c)throw c;return pe(a)}import{z as F}from"zod";import{APIError as He}from"better-call";import{createHash as Yo}from"@better-auth/utils/hash";import{xchacha20poly1305 as ei}from"@noble/ciphers/chacha";import{bytesToHex as ri,hexToBytes as oi,utf8ToBytes as ii}from"@noble/ciphers/utils";import{managedNonce as si}from"@noble/ciphers/webcrypto";import{createHash as Vo}from"@better-auth/utils/hash";import{SignJWT as Qt}from"jose";async function Fe(e,t,o=3600){return await new Qt(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+o).sign(new TextEncoder().encode(t))}import{scryptAsync as zo}from"@noble/hashes/scrypt";import{getRandomValues as Ho}from"uncrypto";import{hex as Wo}from"@better-auth/utils/hex";import{createRandomStringGenerator as Zt}from"@better-auth/utils/random";var B=Zt("a-z","0-9","A-Z","-_");async function me(e,t){let o=e.body?.callbackURL||(e.query?.currentURL?ue(e.query?.currentURL):"")||e.context.options.baseURL;if(!o)throw new He("BAD_REQUEST",{message:"callbackURL is required"});let r=B(128),i=B(32),n=JSON.stringify({callbackURL:o,codeVerifier:r,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),s=new Date;s.setMinutes(s.getMinutes()+10);let d=await e.context.internalAdapter.createVerificationValue({value:n,identifier:i,expiresAt:s});if(!d)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new He("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:d.identifier,codeVerifier:r}}async function Ge(e){let t=e.query.state||e.body.state,o=await e.context.internalAdapter.findVerificationValue(t);if(!o)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let r=F.object({callbackURL:F.string(),codeVerifier:F.string(),errorURL:F.string().optional(),newUserURL:F.string().optional(),expiresAt:F.number(),link:F.object({email:F.string(),userId:F.string()}).optional()}).parse(JSON.parse(o.value));if(r.errorURL||(r.errorURL=`${e.context.baseURL}/error`),r.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(o.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(o.id),r}var We=e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:o,scopes:r,redirectURI:i}){let n=r||["email","name"];return e.scope&&n.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||i}&scope=${n.join(" ")}&state=${o}&response_mode=form_post`)},validateAuthorizationCode:async({code:o,codeVerifier:r,redirectURI:i})=>A({code:o,codeVerifier:r,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),async verifyIdToken(o,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(o,r);let i=Yt(o),{kid:n,alg:s}=i;if(!n||!s)return!1;let d=await tr(n),{payload:a}=await er(o,d,{algorithms:[s],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(c=>{a[c]!==void 0&&(a[c]=!!a[c])}),r&&a.nonce!==r?!1:!!a},async getUserInfo(o){if(e.getUserInfo)return e.getUserInfo(o);if(!o.idToken)return null;let r=Kt(o.idToken);if(!r)return null;let i=r.user?`${r.user.name.firstName} ${r.user.name.lastName}`:r.email,n=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:i,emailVerified:!1,email:r.email,...n},data:r}}}},tr=async e=>{let t="https://appleid.apple.com",o="/auth/keys",{data:r}=await w(`${t}${o}`);if(!r?.keys)throw new Jt("BAD_REQUEST",{message:"Keys not found"});let i=r.keys.find(n=>n.kid===e);if(!i)throw new Error(`JWK with kid ${e} not found`);return await Xt(i,i.alg)};var Qe=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:o,redirectURI:r}){let i=o||["identify","email"];return e.scope&&i.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${i.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||r)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:t,redirectURI:o})=>A({code:t,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:o,error:r}=await w("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(r)return null;if(o.avatar===null){let n=o.discriminator==="0"?Number(BigInt(o.id)>>BigInt(22))%6:parseInt(o.discriminator)%5;o.image_url=`https://cdn.discordapp.com/embed/avatars/${n}.png`}else{let n=o.avatar.startsWith("a_")?"gif":"png";o.image_url=`https://cdn.discordapp.com/avatars/${o.id}/${o.avatar}.${n}`}let i=await e.mapProfileToUser?.(o);return{user:{id:o.id,name:o.display_name||o.username||"",email:o.email,emailVerified:o.verified,image:o.image_url,...i},data:o}}});var Ze=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:o,redirectURI:r}){let i=o||["email","public_profile"];return e.scope&&i.push(...e.scope),await E({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:i,state:t,redirectURI:r})},validateAuthorizationCode:async({code:t,redirectURI:o})=>A({code:t,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let o=["id","name","email","picture",...e?.fields||[]],{data:r,error:i}=await w("https://graph.facebook.com/me?fields="+o.join(","),{auth:{type:"Bearer",token:t.accessToken}});if(i)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...n},data:r}}});var Je=e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:o,scopes:r,codeVerifier:i,redirectURI:n}){let s=r||["user:email"];return e.scope&&s.push(...e.scope),E({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:s,state:o,redirectURI:n})},validateAuthorizationCode:async({code:o,redirectURI:r})=>A({code:o,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:t}),async getUserInfo(o){if(e.getUserInfo)return e.getUserInfo(o);let{data:r,error:i}=await w("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${o.accessToken}`}});if(i)return null;let n=!1,{data:s}=await w("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${o.accessToken}`,"User-Agent":"better-auth"}});s&&(r.email=(s.find(a=>a.primary)??s[0])?.email,n=s.find(a=>a.email===r.email)?.verified??!1);let d=await e.mapProfileToUser?.(r);return{user:{id:r.id.toString(),name:r.name||r.login,email:r.email,image:r.avatar_url,emailVerified:n,...d},data:r}}}};import{decodeJwt as sr}from"jose";var Te=["info","success","warn","error","debug"];function rr(e,t){return Te.indexOf(t)<=Te.indexOf(e)}var M={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},or={info:M.fg.blue,success:M.fg.green,warn:M.fg.yellow,error:M.fg.red,debug:M.fg.magenta},ir=(e,t)=>{let o=new Date().toISOString();return`${M.dim}${o}${M.reset} ${or[e]}${e.toUpperCase()}${M.reset} ${M.bright}[Better Auth]:${M.reset} ${t}`},nr=e=>{let t=e?.disabled!==!0,o=e?.level??"error",r=(i,n,s=[])=>{if(!t||!rr(o,i))return;let d=ir(i,n);if(!e||typeof e.log!="function"){i==="error"?console.error(d,...s):i==="warn"?console.warn(d,...s):console.log(d,...s);return}e.log(i==="success"?"info":i,n,...s)};return Object.fromEntries(Te.map(i=>[i,(...[n,...s])=>r(i,n,s)]))},j=nr();var Ke=e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:o,codeVerifier:r,redirectURI:i}){if(!e.clientId||!e.clientSecret)throw j.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new Q("CLIENT_ID_AND_SECRET_REQUIRED");if(!r)throw new Q("codeVerifier is required for Google");let n=o||["email","profile","openid"];e.scope&&n.push(...e.scope);let s=await E({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:n,state:t,codeVerifier:r,redirectURI:i});return e.accessType&&s.searchParams.set("access_type",e.accessType),e.prompt&&s.searchParams.set("prompt",e.prompt),e.display&&s.searchParams.set("display",e.display),e.hd&&s.searchParams.set("hd",e.hd),s},validateAuthorizationCode:async({code:t,codeVerifier:o,redirectURI:r})=>A({code:t,codeVerifier:o,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(t,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,o);let r=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:i}=await w(r);return i?i.aud===e.clientId&&i.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let o=sr(t.idToken),r=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.name,email:o.email,image:o.picture,emailVerified:o.email_verified,...r},data:o}}});import{decodeJwt as ar}from"jose";var Ye=e=>{let t=e.tenantId||"common",o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(i){let n=i.scopes||["openid","profile","email","User.Read"];return e.scope&&n.push(...e.scope),E({id:"microsoft",options:e,authorizationEndpoint:o,state:i.state,codeVerifier:i.codeVerifier,scopes:n,redirectURI:i.redirectURI})},validateAuthorizationCode({code:i,codeVerifier:n,redirectURI:s}){return A({code:i,codeVerifier:n,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:r})},async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);if(!i.idToken)return null;let n=ar(i.idToken),s=e.profilePhotoSize||48;await w(`https://graph.microsoft.com/v1.0/me/photos/${s}x${s}/$value`,{headers:{Authorization:`Bearer ${i.accessToken}`},async onResponse(a){if(!(e.disableProfilePhoto||!a.response.ok))try{let l=await a.response.clone().arrayBuffer(),f=Buffer.from(l).toString("base64");n.picture=`data:image/jpeg;base64, ${f}`}catch(c){j.error(c&&typeof c=="object"&&"name"in c?c.name:"",c)}}});let d=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,image:n.picture,emailVerified:!0,...d},data:n}}}};var Xe=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:o,codeVerifier:r,redirectURI:i}){let n=o||["user-read-email"];return e.scope&&n.push(...e.scope),E({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:n,state:t,codeVerifier:r,redirectURI:i})},validateAuthorizationCode:async({code:t,codeVerifier:o,redirectURI:r})=>A({code:t,codeVerifier:o,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:o,error:r}=await w("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(r)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.id,name:o.display_name,email:o.email,image:o.images[0]?.url,emailVerified:!1,...i},data:o}}});var re={isAction:!1};import{createRandomStringGenerator as cr}from"@better-auth/utils/random";var et=e=>cr("a-z","A-Z","0-9")(e||32);import{decodeJwt as dr}from"jose";var tt=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:o,redirectURI:r}){let i=o||["user:read:email","openid"];return e.scope&&i.push(...e.scope),E({id:"twitch",redirectURI:r,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:i,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:t,redirectURI:o})=>A({code:t,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let o=t.idToken;if(!o)return j.error("No idToken found in token"),null;let r=dr(o),i=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.preferred_username,email:r.email,image:r.picture,emailVerified:!1,...i},data:r}}});var rt=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let o=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&o.push(...e.scope),E({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:o,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:async({code:t,codeVerifier:o,redirectURI:r})=>A({code:t,codeVerifier:o,authentication:"basic",redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:o,error:r}=await w("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(r)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.data.id,name:o.data.name,email:o.data.username||null,image:o.data.profile_image_url,emailVerified:o.data.verified||!1,...i},data:o}}});var ot=e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:o,scopes:r,codeVerifier:i,redirectURI:n})=>{let s=r||["account_info.read"];return e.scope&&s.push(...e.scope),await E({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:s,state:o,redirectURI:n,codeVerifier:i})},validateAuthorizationCode:async({code:o,codeVerifier:r,redirectURI:i})=>await A({code:o,codeVerifier:r,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),async getUserInfo(o){if(e.getUserInfo)return e.getUserInfo(o);let{data:r,error:i}=await w("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${o.accessToken}`}});if(i)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.account_id,name:r.name?.display_name,email:r.email,emailVerified:r.email_verified||!1,image:r.profile_photo_url,...n},data:r}}}};var it=e=>{let t="https://www.linkedin.com/oauth/v2/authorization",o="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:r,scopes:i,redirectURI:n})=>{let s=i||["profile","email","openid"];return e.scope&&s.push(...e.scope),await E({id:"linkedin",options:e,authorizationEndpoint:t,scopes:s,state:r,redirectURI:n})},validateAuthorizationCode:async({code:r,redirectURI:i})=>await A({code:r,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:o}),async getUserInfo(r){let{data:i,error:n}=await w("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${r.accessToken}`}});if(n)return null;let s=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,emailVerified:i.email_verified||!1,image:i.picture,...s},data:i}}}};var Ue=(e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),lr=e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:Ue(`${t}/oauth/authorize`),tokenEndpoint:Ue(`${t}/oauth/token`),userinfoEndpoint:Ue(`${t}/api/v4/user`)}},nt=e=>{let{authorizationEndpoint:t,tokenEndpoint:o,userinfoEndpoint:r}=lr(e.issuer),i="gitlab";return{id:i,name:"Gitlab",createAuthorizationURL:async({state:s,scopes:d,codeVerifier:a,redirectURI:c})=>{let l=d||["read_user"];return e.scope&&l.push(...e.scope),await E({id:i,options:e,authorizationEndpoint:t,scopes:l,state:s,redirectURI:c,codeVerifier:a})},validateAuthorizationCode:async({code:s,redirectURI:d,codeVerifier:a})=>A({code:s,redirectURI:e.redirectURI||d,options:e,codeVerifier:a,tokenEndpoint:o}),async getUserInfo(s){if(e.getUserInfo)return e.getUserInfo(s);let{data:d,error:a}=await w(r,{headers:{authorization:`Bearer ${s.accessToken}`}});if(a||d.state!=="active"||d.locked)return null;let c=await e.mapProfileToUser?.(d);return{user:{id:d.id.toString(),name:d.name??d.username,email:d.email,image:d.avatar_url,emailVerified:!0,...c},data:d}}}};var st=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:o,redirectURI:r}){let i=o||["identity"];return e.scope&&i.push(...e.scope),E({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:i,state:t,redirectURI:r,duration:e.duration})},validateAuthorizationCode:async({code:t,redirectURI:o})=>{let r=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||o}),i={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:n,error:s}=await w("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:i,body:r.toString()});if(s)throw s;return pe(n)},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:o,error:r}=await w("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(r)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.id,name:o.name,email:o.oauth_client_id,emailVerified:o.has_verified_email,image:o.icon_img?.split("?")[0],...i},data:o}}});import{z as ur}from"zod";var pr={apple:We,discord:Qe,facebook:Ze,github:Je,microsoft:Ye,google:Ke,spotify:Xe,twitch:tt,twitter:rt,dropbox:ot,linkedin:it,gitlab:nt,reddit:st},ke=Object.keys(pr),at=ur.enum(ke,{description:"OAuth2 provider to use"});import{z as N}from"zod";import{APIError as se}from"better-call";import{APIError as H}from"better-call";import{z as K}from"zod";function ct(e){try{return JSON.parse(e)}catch{return null}}var u={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action.",FAILED_TO_UNLINK_LAST_ACCOUNT:"You can't unlink your last account",ACCOUNT_NOT_FOUND:"Account not found"};import{createHMAC as mr}from"@better-auth/utils/hmac";import{base64 as fr}from"@better-auth/utils/base64";import{binary as gr}from"@better-auth/utils/binary";var dt=()=>m("/get-session",{method:"GET",query:K.optional(K.object({disableCookieCache:K.boolean({description:"Disable cookie cache and fetch session from database"}).or(K.string().transform(e=>e==="true")).optional(),disableRefresh:K.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let o=e.getCookie(e.context.authCookies.sessionData.name),r=o?ct(gr.decode(fr.decode(o))):null;if(r&&!await mr("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(r.session),r.signature))return $(e),e.json(null);let i=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(r?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let l=r.session;if(r.expiresAt<Date.now()||l.session.expiresAt<new Date){let p=e.context.authCookies.sessionData.name;e.setCookie(p,"",{maxAge:0})}else return e.json(l)}let n=await e.context.internalAdapter.findSession(t);if(e.context.session=n,!n||n.session.expiresAt<new Date)return $(e),n&&await e.context.internalAdapter.deleteSession(n.session.token),e.json(null);if(i||e.query?.disableRefresh)return e.json(n);let s=e.context.sessionConfig.expiresIn,d=e.context.sessionConfig.updateAge;if(n.session.expiresAt.valueOf()-s*1e3+d*1e3<=Date.now()){let l=await e.context.internalAdapter.updateSession(n.session.token,{expiresAt:x(e.context.sessionConfig.expiresIn,"sec")});if(!l)return $(e),e.json(null,{status:401});let f=(l.expiresAt.valueOf()-Date.now())/1e3;return await v(e,{session:l,user:n.user},!1,{maxAge:f}),e.json({session:l,user:n.user})}return await Ee(e,n),e.json(n)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new H("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION})}}),Y=async(e,t)=>{if(e.context.session)return e.context.session;let o=await dt()({...e,_flag:"json",headers:e.headers,query:t}).catch(r=>null);return e.context.session=o,o},V=ee(async e=>{let t=await Y(e);if(!t?.session)throw new H("UNAUTHORIZED");return{session:t}}),lt=ee(async e=>{let t=await Y(e);if(!t?.session)throw new H("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let o=e.context.sessionConfig.freshAge,r=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-r<o*1e3))throw new H("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var hr=m("/revoke-session",{method:"POST",body:K.object({token:K.string({description:"The token to revoke"})}),use:[V],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,o=await e.context.internalAdapter.findSession(t);if(!o)throw new H("BAD_REQUEST",{message:"Session not found"});if(o.session.userId!==e.context.session.user.id)throw new H("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(r){throw e.context.logger.error(r&&typeof r=="object"&&"name"in r?r.name:"",r),new H("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),wr=m("/revoke-sessions",{method:"POST",use:[V],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new H("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),yr=m("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[V],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new H("UNAUTHORIZED");let i=(await e.context.internalAdapter.listSessions(t.user.id)).filter(n=>n.expiresAt>new Date).filter(n=>n.token!==e.context.session.session.token);return await Promise.all(i.map(n=>e.context.internalAdapter.deleteSession(n.token))),e.json({status:!0})});import{jwtVerify as br}from"jose";import{JWTExpired as Ar}from"jose/errors";async function G(e,t,o,r=3600){return await Fe({email:t.toLowerCase(),updateTo:o},e,r)}async function Rr(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new se("BAD_REQUEST",{message:"Verification email isn't enabled"});let o=await G(e.context.secret,t.email,void 0,e.context.options.emailVerification?.expiresIn),r=`${e.context.baseURL}/verify-email?token=${o}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:r,token:o},e.request)}var Er=m("/send-verification-email",{method:"POST",query:N.object({currentURL:N.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:N.object({email:N.string({description:"The email to send the verification email to"}).email(),callbackURL:N.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new se("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,o=await e.context.internalAdapter.findUserByEmail(t);if(!o)throw new se("BAD_REQUEST",{message:u.USER_NOT_FOUND});return await Rr(e,o.user),e.json({status:!0})}),Tr=m("/verify-email",{method:"GET",query:N.object({token:N.string({description:"The token to verify the email"}),callbackURL:N.string({description:"The URL to redirect to after email verification"}).optional()}),use:[te(e=>e.query.callbackURL)],metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(d){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${d}`):e.redirect(`${e.query.callbackURL}?error=${d}`):new se("UNAUTHORIZED",{message:d})}let{token:o}=e.query,r;try{r=await br(o,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(d){return d instanceof Ar?t("token_expired"):t("invalid_token")}let n=N.object({email:N.string().email(),updateTo:N.string().optional()}).parse(r.payload),s=await e.context.internalAdapter.findUserByEmail(n.email);if(!s)return t("user_not_found");if(n.updateTo){let d=await Y(e);if(!d){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(d.user.email!==n.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let a=await e.context.internalAdapter.updateUserByEmail(n.email,{email:n.updateTo,emailVerified:!1}),c=await G(e.context.secret,n.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:a,url:`${e.context.baseURL}/verify-email?token=${c}`,token:c},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0,user:{id:a.id,email:a.email,name:a.name,image:a.image,emailVerified:a.emailVerified,createdAt:a.createdAt,updatedAt:a.updatedAt}})}if(await e.context.internalAdapter.updateUserByEmail(n.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification){let d=await Y(e);if(!d||d.user.email!==n.email){let a=await e.context.internalAdapter.createSession(s.user.id,e.request);if(!a)throw new se("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await v(e,{session:a,user:s.user})}}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0,user:null})});async function fe(e,{userInfo:t,account:o,callbackURL:r}){let i=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),o.accountId,o.providerId).catch(a=>{throw j.error(`Better auth was unable to query your database.
Error: `,a),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),n=i?.user,s=!n;if(i){let a=i.accounts.find(c=>c.providerId===o.providerId);if(a){let c=Object.fromEntries(Object.entries({accessToken:o.accessToken,idToken:o.idToken,refreshToken:o.refreshToken,accessTokenExpiresAt:o.accessTokenExpiresAt,refreshTokenExpiresAt:o.refreshTokenExpiresAt}).filter(([l,f])=>f!==void 0));Object.keys(c).length>0&&await e.context.internalAdapter.updateAccount(a.id,c)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(o.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return Ae&&j.warn(`User already exist but account isn't linked to ${o.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:o.providerId,accountId:t.id.toString(),userId:i.user.id,accessToken:o.accessToken,idToken:o.idToken,refreshToken:o.refreshToken,accessTokenExpiresAt:o.accessTokenExpiresAt,refreshTokenExpiresAt:o.refreshTokenExpiresAt,scope:o.scope})}catch(f){return j.error("Unable to link account",f),{error:"unable to link account",data:null}}}}else try{if(n=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:o.accessToken,idToken:o.idToken,refreshToken:o.refreshToken,accessTokenExpiresAt:o.accessTokenExpiresAt,refreshTokenExpiresAt:o.refreshTokenExpiresAt,scope:o.scope,providerId:o.providerId,accountId:t.id.toString()}).then(a=>a?.user),!t.emailVerified&&n&&e.context.options.emailVerification?.sendOnSignUp){let a=await G(e.context.secret,n.email,void 0,e.context.options.emailVerification?.expiresIn),c=`${e.context.baseURL}/verify-email?token=${a}&callbackURL=${r}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:n,url:c,token:a},e.request)}}catch(a){return a instanceof U?{error:a.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!n)return{error:"unable to create user",data:null,isRegister:!1};let d=await e.context.internalAdapter.createSession(n.id,e.request);return d?{data:{session:d,user:n},error:null,isRegister:s}:{error:"unable to create session",data:null,isRegister:!1}}var Ur=m("/sign-in/social",{method:"POST",query:k.object({currentURL:k.string().optional()}).optional(),body:k.object({callbackURL:k.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:k.string().optional(),errorCallbackURL:k.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:at,disableRedirect:k.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:k.optional(k.object({token:k.string({description:"ID token from the provider"}),nonce:k.string({description:"Nonce used to generate the token"}).optional(),accessToken:k.string({description:"Access token from the provider"}).optional(),refreshToken:k.string({description:"Refresh token from the provider"}).optional(),expiresAt:k.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(n=>n.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new I("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new I("NOT_FOUND",{message:u.ID_TOKEN_NOT_SUPPORTED});let{token:n,nonce:s}=e.body.idToken;if(!await t.verifyIdToken(n,s))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new I("UNAUTHORIZED",{message:u.INVALID_TOKEN});let a=await t.getUserInfo({idToken:n,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!a||!a?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new I("UNAUTHORIZED",{message:u.FAILED_TO_GET_USER_INFO});if(!a.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new I("UNAUTHORIZED",{message:u.USER_EMAIL_NOT_FOUND});let c=await fe(e,{userInfo:{email:a.user.email,id:a.user.id,name:a.user.name||"",image:a.user.image,emailVerified:a.user.emailVerified||!1},account:{providerId:t.id,accountId:a.user.id,accessToken:e.body.idToken.accessToken}});if(c.error)throw new I("UNAUTHORIZED",{message:c.error});return await v(e,c.data),e.json({redirect:!1,token:c.data.session.token,url:void 0,user:{id:c.data.user.id,email:c.data.user.email,name:c.data.user.name,image:c.data.user.image,emailVerified:c.data.user.emailVerified,createdAt:c.data.user.createdAt,updatedAt:c.data.user.updatedAt}})}let{codeVerifier:o,state:r}=await me(e),i=await t.createAuthorizationURL({state:r,codeVerifier:o,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:i.toString(),redirect:!e.body.disableRedirect})}),kr=m("/sign-in/email",{method:"POST",body:k.object({email:k.string({description:"Email of the user"}),password:k.string({description:"Password of the user"}),callbackURL:k.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:k.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new I("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:o}=e.body;if(!k.string().email().safeParse(t).success)throw new I("BAD_REQUEST",{message:u.INVALID_EMAIL});let i=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!i)throw await e.context.password.hash(o),e.context.logger.error("User not found",{email:t}),new I("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let n=i.accounts.find(c=>c.providerId==="credential");if(!n)throw e.context.logger.error("Credential account not found",{email:t}),new I("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let s=n?.password;if(!s)throw e.context.logger.error("Password not found",{email:t}),new I("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:s,password:o}))throw e.context.logger.error("Invalid password"),new I("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!i.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new I("UNAUTHORIZED",{message:u.EMAIL_NOT_VERIFIED});let c=await G(e.context.secret,i.user.email,void 0,e.context.options.emailVerification?.expiresIn),l=`${e.context.baseURL}/verify-email?token=${c}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:i.user,url:l,token:c},e.request),new I("FORBIDDEN",{message:u.EMAIL_NOT_VERIFIED})}let a=await e.context.internalAdapter.createSession(i.user.id,e.headers,e.body.rememberMe===!1);if(!a)throw e.context.logger.error("Failed to create session"),new I("UNAUTHORIZED",{message:u.FAILED_TO_CREATE_SESSION});return await v(e,{session:a,user:i.user},e.body.rememberMe===!1),e.json({redirect:!!e.body.callbackURL,token:a.token,url:e.body.callbackURL,user:{id:i.user.id,email:i.user.email,name:i.user.name,image:i.user.image,emailVerified:i.user.emailVerified,createdAt:i.user.createdAt,updatedAt:i.user.updatedAt}})});import{z as ae}from"zod";var ge=ae.object({code:ae.string().optional(),error:ae.string().optional(),error_description:ae.string().optional(),state:ae.string().optional()}),_r=m("/callback/:id",{method:["GET","POST"],body:ge.optional(),query:ge.optional(),metadata:re},async e=>{let t;try{if(e.method==="GET")t=ge.parse(e.query);else if(e.method==="POST")t=ge.parse(e.body);else throw new Error("Unsupported method")}catch(L){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",L),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:o,error:r,state:i,error_description:n}=t;if(!i)throw e.context.logger.error("State not found",r),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!o)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${r||"no_code"}&error_description=${n}`);let s=e.context.socialProviders.find(L=>L.id===e.params.id);if(!s)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:d,callbackURL:a,link:c,errorURL:l,newUserURL:f}=await Ge(e),p;try{p=await s.validateAuthorizationCode({code:o,codeVerifier:d,redirectURI:`${e.context.baseURL}/callback/${s.id}`})}catch(L){throw e.context.logger.error("",L),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let b=await s.getUserInfo(p).then(L=>L?.user);function y(L){let h=l||a||`${e.context.baseURL}/error`;throw h.includes("?")?h=`${h}&error=${L}`:h=`${h}?error=${L}`,e.redirect(h)}if(!b)return e.context.logger.error("Unable to get user info"),y("unable_to_get_user_info");if(!b.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),y("email_not_found");if(!a)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(c){if(c.email!==b.email.toLowerCase())return y("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:c.userId,providerId:s.id,accountId:b.id}))return y("unable_to_link_account");let h;try{h=a.toString()}catch{h=a}throw e.redirect(h)}let S=await fe(e,{userInfo:{...b,email:b.email,name:b.name||b.email},account:{providerId:s.id,accountId:b.id,...p,scope:p.scopes?.join(",")},callbackURL:a});if(S.error)return e.context.logger.error(S.error.split(" ").join("_")),y(S.error.split(" ").join("_"));let{session:W,user:oe}=S.data;await v(e,{session:W,user:oe});let ie;try{ie=(S.isRegister&&f||a).toString()}catch{ie=S.isRegister&&f||a}throw e.redirect(ie)});import{APIError as Or}from"better-call";var Sr=m("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw $(e),new Or("BAD_REQUEST",{message:u.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),$(e),e.json({success:!0})});import{z as C}from"zod";import{APIError as ce}from"better-call";function ut(e,t,o){let r=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return o&&Object.entries(o).forEach(([i,n])=>r.searchParams.set(i,n)),r.href}function vr(e,t,o){let r=new URL(t,e.baseURL);return o&&Object.entries(o).forEach(([i,n])=>r.searchParams.set(i,n)),r.href}var Pr=m("/forget-password",{method:"POST",body:C.object({email:C.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:C.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new ce("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:o}=e.body,r=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!r)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let i=60*60*1,n=x(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||i,"sec"),s=et(24);await e.context.internalAdapter.createVerificationValue({value:r.user.id.toString(),identifier:`reset-password:${s}`,expiresAt:n});let d=`${e.context.baseURL}/reset-password/${s}?callbackURL=${o}`;return await e.context.options.emailAndPassword.sendResetPassword({user:r.user,url:d,token:s},e.request),e.json({status:!0})}),Ir=m("/reset-password/:token",{method:"GET",query:C.object({callbackURL:C.string({description:"The URL to redirect the user to reset their password"})}),use:[te(e=>e.query.callbackURL)],metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:o}=e.query;if(!t||!o)throw e.redirect(ut(e.context,o,{error:"INVALID_TOKEN"}));let r=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!r||r.expiresAt<new Date?e.redirect(ut(e.context,o,{error:"INVALID_TOKEN"})):e.redirect(vr(e.context,o,{token:t}))}),Lr=m("/reset-password",{query:C.optional(C.object({token:C.string().optional(),currentURL:C.string().optional()})),method:"POST",body:C.object({newPassword:C.string({description:"The new password to set"}),token:C.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new ce("BAD_REQUEST",{message:u.INVALID_TOKEN});let{newPassword:o}=e.body,r=e.context.password?.config.minPasswordLength,i=e.context.password?.config.maxPasswordLength;if(o.length<r)throw new ce("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});if(o.length>i)throw new ce("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let n=`reset-password:${t}`,s=await e.context.internalAdapter.findVerificationValue(n);if(!s||s.expiresAt<new Date)throw new ce("BAD_REQUEST",{message:u.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(s.id);let d=s.value,a=await e.context.password.hash(o);return(await e.context.internalAdapter.findAccounts(d)).find(f=>f.providerId==="credential")?(await e.context.internalAdapter.updatePassword(d,a),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:d,providerId:"credential",password:a,accountId:d}),e.json({status:!0}))});import{z as O}from"zod";import{APIError as _}from"better-call";import{z as g}from"zod";import{APIError as pa}from"better-call";var ma=g.object({id:g.string(),providerId:g.string(),accountId:g.string(),userId:g.string(),accessToken:g.string().nullish(),refreshToken:g.string().nullish(),idToken:g.string().nullish(),accessTokenExpiresAt:g.date().nullish(),refreshTokenExpiresAt:g.date().nullish(),scope:g.string().nullish(),password:g.string().nullish(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date)}),fa=g.object({id:g.string(),email:g.string().transform(e=>e.toLowerCase()),emailVerified:g.boolean().default(!1),name:g.string(),image:g.string().nullish(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date)}),ga=g.object({id:g.string(),userId:g.string(),expiresAt:g.date(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date),token:g.string(),ipAddress:g.string().nullish(),userAgent:g.string().nullish()}),ha=g.object({id:g.string(),value:g.string(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date),expiresAt:g.date(),identifier:g.string()});var Dr=m("/change-password",{method:"POST",body:O.object({newPassword:O.string({description:"The new password to set"}),currentPassword:O.string({description:"The current password"}),revokeOtherSessions:O.boolean({description:"Revoke all other sessions"}).optional()}),use:[V],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:o,revokeOtherSessions:r}=e.body,i=e.context.session,n=e.context.password.config.minPasswordLength;if(t.length<n)throw e.context.logger.error("Password is too short"),new _("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let s=e.context.password.config.maxPasswordLength;if(t.length>s)throw e.context.logger.error("Password is too long"),new _("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(i.user.id)).find(p=>p.providerId==="credential"&&p.password);if(!a||!a.password)throw new _("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});let c=await e.context.password.hash(t);if(!await e.context.password.verify({hash:a.password,password:o}))throw new _("BAD_REQUEST",{message:u.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(a.id,{password:c});let f=null;if(r){await e.context.internalAdapter.deleteSessions(i.user.id);let p=await e.context.internalAdapter.createSession(i.user.id,e.headers);if(!p)throw new _("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION});await v(e,{session:p,user:i.user}),f=p.token}return e.json({token:f,user:{id:i.user.id,email:i.user.email,name:i.user.name,image:i.user.image,emailVerified:i.user.emailVerified,createdAt:i.user.createdAt,updatedAt:i.user.updatedAt}})}),Cr=m("/set-password",{method:"POST",body:O.object({newPassword:O.string()}),metadata:{SERVER_ONLY:!0},use:[V]},async e=>{let{newPassword:t}=e.body,o=e.context.session,r=e.context.password.config.minPasswordLength;if(t.length<r)throw e.context.logger.error("Password is too short"),new _("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(t.length>i)throw e.context.logger.error("Password is too long"),new _("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let s=(await e.context.internalAdapter.findAccounts(o.user.id)).find(a=>a.providerId==="credential"&&a.password),d=await e.context.password.hash(t);if(!s)return await e.context.internalAdapter.linkAccount({userId:o.user.id,providerId:"credential",accountId:o.user.id,password:d}),e.json({status:!0});throw new _("BAD_REQUEST",{message:"user already has a password"})}),jr=m("/delete-user",{method:"POST",use:[V],body:O.object({callbackURL:O.string().optional(),password:O.string().optional(),token:O.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new _("NOT_FOUND");let t=e.context.session;if(e.body.password){let n=(await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId==="credential"&&d.password);if(!n||!n.password)throw new _("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:n.password,password:e.body.password}))throw new _("BAD_REQUEST",{message:u.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let i=t.session.createdAt.getTime(),n=e.context.options.session.freshAge;if(Date.now()-i>n)throw new _("BAD_REQUEST",{message:u.SESSION_EXPIRED})}if(e.body.token)return await pt({...e,query:{token:e.body.token}}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let i=B(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${i}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let n=`${e.context.baseURL}/delete-user/callback?token=${i}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:n,token:i},e.request),e.json({success:!0,message:"Verification email sent"})}let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),$(e);let r=e.context.options.user.deleteUser?.afterDelete;return r&&await r(t.user,e.request),e.json({success:!0,message:"User deleted"})}),pt=m("/delete-user/callback",{method:"GET",query:O.object({token:O.string(),callbackURL:O.string().optional()}),use:[te(e=>e.query.callbackURL)]},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new _("NOT_FOUND");let t=await Y(e);if(!t)throw new _("NOT_FOUND",{message:u.FAILED_TO_GET_USER_INFO});let o=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!o||o.expiresAt<new Date)throw o&&await e.context.internalAdapter.deleteVerificationValue(o.id),new _("NOT_FOUND",{message:u.INVALID_TOKEN});if(o.value!==t.user.id)throw new _("NOT_FOUND",{message:u.INVALID_TOKEN});let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(o.id),$(e);let i=e.context.options.user.deleteUser?.afterDelete;if(i&&await i(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),Vr=m("/change-email",{method:"POST",query:O.object({currentURL:O.string().optional()}).optional(),body:O.object({newEmail:O.string({description:"The new email to set"}).email(),callbackURL:O.string({description:"The URL to redirect to after email verification"}).optional()}),use:[V],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new _("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new _("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new _("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let i=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new _("BAD_REQUEST",{message:"Verification email isn't enabled"});let o=await G(e.context.secret,e.context.session.user.email,e.body.newEmail,e.context.options.emailVerification?.expiresIn),r=`${e.context.baseURL}/verify-email?token=${o}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:r,token:o},e.request),e.json({status:!0})});var Nr=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,$r=m("/error",{method:"GET",metadata:{...re,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(Nr(t),{headers:{"Content-Type":"text/html"}})});var Br=m("/ok",{method:"GET",metadata:{...re,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as Ba}from"zod";import{APIError as Wa}from"better-call";import{z as X}from"zod";import{APIError as he}from"better-call";var Mr=m("/list-accounts",{method:"GET",use:[V],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,o=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(o.map(r=>({id:r.id,provider:r.providerId,createdAt:r.createdAt,updatedAt:r.updatedAt,accountId:r.accountId,scopes:r.scope?.split(",")||[]})))}),qr=m("/link-social",{method:"POST",requireHeaders:!0,query:X.object({currentURL:X.string().optional()}).optional(),body:X.object({callbackURL:X.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:X.enum(ke,{description:"The OAuth2 provider to use"})}),use:[V],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId===e.body.provider))throw new he("BAD_REQUEST",{message:u.SOCIAL_ACCOUNT_ALREADY_LINKED});let i=e.context.socialProviders.find(d=>d.id===e.body.provider);if(!i)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new he("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});let n=await me(e,{userId:t.user.id,email:t.user.email}),s=await i.createAuthorizationURL({state:n.state,codeVerifier:n.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${i.id}`});return e.json({url:s.toString(),redirect:!0})}),zr=m("/unlink-account",{method:"POST",body:X.object({providerId:X.string()}),use:[lt]},async e=>{let t=await e.context.internalAdapter.findAccounts(e.context.session.user.id);if(t.length===1)throw new he("BAD_REQUEST",{message:u.FAILED_TO_UNLINK_LAST_ACCOUNT});if(!t.find(r=>r.providerId===e.body.providerId))throw new he("BAD_REQUEST",{message:u.ACCOUNT_NOT_FOUND});return await e.context.internalAdapter.deleteAccount(e.body.providerId,e.context.session.user.id),e.json({status:!0})});import{APIError as U}from"better-call";var _e=["email-verification","sign-in","forget-password"],Yc=e=>{let t={expiresIn:300,otpLength:6,...e},o={OTP_EXPIRED:"otp expired",INVALID_OTP:"invalid otp",INVALID_EMAIL:"invalid email",USER_NOT_FOUND:"user not found"};return{id:"email-otp",endpoints:{sendVerificationOTP:m("/email-otp/send-verification-otp",{method:"POST",body:T.object({email:T.string({description:"Email address to send the OTP"}),type:T.enum(_e,{description:"Type of the OTP"})}),metadata:{openapi:{description:"Send verification OTP",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async r=>{if(!e?.sendVerificationOTP)throw r.context.logger.error("send email verification is not implemented"),new U("BAD_REQUEST",{message:"send email verification is not implemented"});let i=r.body.email;if(!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(i))throw new U("BAD_REQUEST",{message:o.INVALID_EMAIL});if((r.body.type==="forget-password"||t.disableSignUp)&&!await r.context.internalAdapter.findUserByEmail(i))return r.json({success:!0});let s=B(t.otpLength,"0-9");return await r.context.internalAdapter.createVerificationValue({value:s,identifier:`${r.body.type}-otp-${i}`,expiresAt:x(t.expiresIn,"sec")}).catch(async d=>{await r.context.internalAdapter.deleteVerificationByIdentifier(`${r.body.type}-otp-${i}`),await r.context.internalAdapter.createVerificationValue({value:s,identifier:`${r.body.type}-otp-${i}`,expiresAt:x(t.expiresIn,"sec")})}),await e.sendVerificationOTP({email:i,otp:s,type:r.body.type},r.request),r.json({success:!0})}),createVerificationOTP:m("/email-otp/create-verification-otp",{method:"POST",body:T.object({email:T.string({description:"Email address to send the OTP"}),type:T.enum(_e,{description:"Type of the OTP"})}),metadata:{SERVER_ONLY:!0,openapi:{description:"Create verification OTP",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"string"}}}}}}}},async r=>{let i=r.body.email,n=B(t.otpLength,"0-9");return await r.context.internalAdapter.createVerificationValue({value:n,identifier:`${r.body.type}-otp-${i}`,expiresAt:x(t.expiresIn,"sec")}),n}),getVerificationOTP:m("/email-otp/get-verification-otp",{method:"GET",query:T.object({email:T.string({description:"Email address to get the OTP"}),type:T.enum(_e)}),metadata:{SERVER_ONLY:!0,openapi:{description:"Get verification OTP",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{otp:{type:"string"}}}}}}}}}},async r=>{let i=r.query.email,n=await r.context.internalAdapter.findVerificationValue(`${r.query.type}-otp-${i}`);return!n||n.expiresAt<new Date?r.json({otp:null}):r.json({otp:n.value})}),verifyEmailOTP:m("/email-otp/verify-email",{method:"POST",body:T.object({email:T.string({description:"Email address to verify"}),otp:T.string({description:"OTP to verify"})}),metadata:{openapi:{description:"Verify email OTP",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{$ref:"#/components/schemas/User"}}}}}}}}}},async r=>{let i=r.body.email;if(!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(i))throw new U("BAD_REQUEST",{message:o.INVALID_EMAIL});let s=await r.context.internalAdapter.findVerificationValue(`email-verification-otp-${i}`);if(!s)throw new U("BAD_REQUEST",{message:o.INVALID_OTP});if(s.expiresAt<new Date)throw await r.context.internalAdapter.deleteVerificationValue(s.id),new U("BAD_REQUEST",{message:o.OTP_EXPIRED});let d=r.body.otp;if(s.value!==d)throw new U("BAD_REQUEST",{message:o.INVALID_OTP});await r.context.internalAdapter.deleteVerificationValue(s.id);let a=await r.context.internalAdapter.findUserByEmail(i);if(!a)throw new U("BAD_REQUEST",{message:o.USER_NOT_FOUND});let c=await r.context.internalAdapter.updateUser(a.user.id,{email:i,emailVerified:!0});if(r.context.options.emailVerification?.autoSignInAfterVerification){let l=await r.context.internalAdapter.createSession(c.id,r.request);return await v(r,{session:l,user:c}),r.json({status:!0,token:l.token,user:{id:c.id,email:c.email,emailVerified:c.emailVerified,name:c.name,image:c.image,createdAt:c.createdAt,updatedAt:c.updatedAt}})}return r.json({status:!0,token:null,user:{id:c.id,email:c.email,emailVerified:c.emailVerified,name:c.name,image:c.image,createdAt:c.createdAt,updatedAt:c.updatedAt}})}),signInEmailOTP:m("/sign-in/email-otp",{method:"POST",body:T.object({email:T.string({description:"Email address to sign in"}),otp:T.string({description:"OTP sent to the email"})}),metadata:{openapi:{description:"Sign in with email OTP",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{$ref:"#/components/schemas/User"},session:{$ref:"#/components/schemas/Session"}}}}}}}}}},async r=>{let i=r.body.email,n=await r.context.internalAdapter.findVerificationValue(`sign-in-otp-${i}`);if(!n)throw new U("BAD_REQUEST",{message:o.INVALID_OTP});if(n.expiresAt<new Date)throw await r.context.internalAdapter.deleteVerificationValue(n.id),new U("BAD_REQUEST",{message:o.OTP_EXPIRED});let s=r.body.otp;if(n.value!==s)throw new U("BAD_REQUEST",{message:o.INVALID_OTP});await r.context.internalAdapter.deleteVerificationValue(n.id);let d=await r.context.internalAdapter.findUserByEmail(i);if(!d){if(t.disableSignUp)throw new U("BAD_REQUEST",{message:o.USER_NOT_FOUND});let c=await r.context.internalAdapter.createUser({email:i,emailVerified:!0,name:i}),l=await r.context.internalAdapter.createSession(c.id,r.request);return await v(r,{session:l,user:c}),r.json({token:l.token,user:{id:c.id,email:c.email,emailVerified:c.emailVerified,name:c.name,image:c.image,createdAt:c.createdAt,updatedAt:c.updatedAt}})}d.user.emailVerified||await r.context.internalAdapter.updateUser(d.user.id,{emailVerified:!0});let a=await r.context.internalAdapter.createSession(d.user.id,r.request);return await v(r,{session:a,user:d.user}),r.json({token:a.token,user:{id:d.user.id,email:d.user.email,emailVerified:d.user.emailVerified,name:d.user.name,image:d.user.image,createdAt:d.user.createdAt,updatedAt:d.user.updatedAt}})}),forgetPasswordEmailOTP:m("/forget-password/email-otp",{method:"POST",body:T.object({email:T.string({description:"Email address to send the OTP"})}),metadata:{openapi:{description:"Forget password with email OTP",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async r=>{let i=r.body.email;if(!await r.context.internalAdapter.findUserByEmail(i))throw new U("BAD_REQUEST",{message:o.USER_NOT_FOUND});let s=B(t.otpLength,"0-9");return await r.context.internalAdapter.createVerificationValue({value:s,identifier:`forget-password-otp-${i}`,expiresAt:x(t.expiresIn,"sec")}),await e.sendVerificationOTP({email:i,otp:s,type:"forget-password"},r.request),r.json({success:!0})}),resetPasswordEmailOTP:m("/email-otp/reset-password",{method:"POST",body:T.object({email:T.string({description:"Email address to reset the password"}),otp:T.string({description:"OTP sent to the email"}),password:T.string({description:"New password"})}),metadata:{openapi:{description:"Reset password with email OTP",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async r=>{let i=r.body.email,n=await r.context.internalAdapter.findUserByEmail(i,{includeAccounts:!0});if(!n)throw new U("BAD_REQUEST",{message:o.USER_NOT_FOUND});let s=await r.context.internalAdapter.findVerificationValue(`forget-password-otp-${i}`);if(!s)throw new U("BAD_REQUEST",{message:o.INVALID_OTP});if(s.expiresAt<new Date)throw await r.context.internalAdapter.deleteVerificationValue(s.id),new U("BAD_REQUEST",{message:o.OTP_EXPIRED});let d=r.body.otp;if(s.value!==d)throw new U("BAD_REQUEST",{message:o.INVALID_OTP});await r.context.internalAdapter.deleteVerificationValue(s.id);let a=await r.context.password.hash(r.body.password);return n.accounts.find(l=>l.providerId==="credential")?await r.context.internalAdapter.updatePassword(n.user.id,a):await r.context.internalAdapter.createAccount({userId:n.user.id,providerId:"credential",accountId:n.user.id,password:a}),r.json({success:!0})})},hooks:{after:[{matcher(r){return!!(r.path?.startsWith("/sign-up")&&t.sendVerificationOnSignUp)},async handler(r){let i=r.context.returned;if(i instanceof U)return;let n=i&&"email"in i?i.email:i instanceof Response&&i.status===200?r.body.email:null;if(n){let s=B(t.otpLength,"0-9");await r.context.internalAdapter.createVerificationValue({value:s,identifier:`email-verification-otp-${n}`,expiresAt:x(t.expiresIn,"sec")}),await e.sendVerificationOTP({email:n,otp:s,type:"email-verification"},r.request)}}}]},$ERROR_CODES:o,rateLimit:[{pathMatcher(r){return r==="/email-otp/send-verification-otp"},window:60,max:3},{pathMatcher(r){return r==="/email-otp/verify-email"},window:60,max:3},{pathMatcher(r){return r==="/sign-in/email-otp"},window:60,max:3}]}};export{Yc as emailOTP};
