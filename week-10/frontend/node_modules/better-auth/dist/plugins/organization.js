import{APIError as je}from"better-call";import{z as pe}from"zod";import{createEndpointCreator as Qt,createMiddleware as $e,createMiddlewareCreator as Yt}from"better-call";var Fe=$e(async()=>({})),ee=Yt({use:[Fe,$e(async()=>({}))]}),m=Qt({use:[Fe]});import{APIError as x}from"better-call";import{z as v}from"zod";var Z=class extends Error{constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};var W=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));var Oe=Object.create(null),ge=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?Oe:globalThis),qe=new Proxy(Oe,{get(e,t){return ge()[t]??Oe[t]},has(e,t){let r=ge();return t in r||t in Oe},set(e,t,r){let o=ge(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=ge(!0);return delete r[t],!0},ownKeys(){let e=ge(!0);return Object.keys(e)}});function Jt(e){return e?e!=="false":!1}var Se=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var ke=Se==="dev"||Se==="development",Kt=Se==="test"||Jt(qe.TEST);import{base64Url as Xt}from"@better-auth/utils/base64";import{createHMAC as er}from"@better-auth/utils/hmac";async function Ne(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=Xt.encode(JSON.stringify({session:t,expiresAt:W(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await er("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new Z("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}async function z(e,t,r,o){let n=e.context.authCookies.sessionToken.options,i=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...n,maxAge:i,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await Ne(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}function Q(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}var tr=Object.defineProperty,rr=Object.defineProperties,or=Object.getOwnPropertyDescriptors,He=Object.getOwnPropertySymbols,nr=Object.prototype.hasOwnProperty,ir=Object.prototype.propertyIsEnumerable,Ge=(e,t,r)=>t in e?tr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,ie=(e,t)=>{for(var r in t||(t={}))nr.call(t,r)&&Ge(e,r,t[r]);if(He)for(var r of He(t))ir.call(t,r)&&Ge(e,r,t[r]);return e},se=(e,t)=>rr(e,or(t)),sr=class extends Error{constructor(e,t,r){super(t||e.toString(),{cause:r}),this.status=e,this.statusText=t,this.error=r}},ar=async(e,t)=>{var r,o,n,i,s,d;let a=t||{},c={onRequest:[t?.onRequest],onResponse:[t?.onResponse],onSuccess:[t?.onSuccess],onError:[t?.onError],onRetry:[t?.onRetry]};if(!t||!t?.plugins)return{url:e,options:a,hooks:c};for(let l of t?.plugins||[]){if(l.init){let p=await((r=l.init)==null?void 0:r.call(l,e.toString(),t));a=p.options||a,e=p.url}c.onRequest.push((o=l.hooks)==null?void 0:o.onRequest),c.onResponse.push((n=l.hooks)==null?void 0:n.onResponse),c.onSuccess.push((i=l.hooks)==null?void 0:i.onSuccess),c.onError.push((s=l.hooks)==null?void 0:s.onError),c.onRetry.push((d=l.hooks)==null?void 0:d.onRetry)}return{url:e,options:a,hooks:c}},Ze=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(){return this.options.delay}},dr=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(e){return Math.min(this.options.maxDelay,this.options.baseDelay*2**e)}};function cr(e){if(typeof e=="number")return new Ze({type:"linear",attempts:e,delay:1e3});switch(e.type){case"linear":return new Ze(e);case"exponential":return new dr(e);default:throw new Error("Invalid retry strategy")}}var lr=e=>{let t={},r=o=>typeof o=="function"?o():o;if(e?.auth){if(e.auth.type==="Bearer"){let o=r(e.auth.token);if(!o)return t;t.authorization=`Bearer ${o}`}else if(e.auth.type==="Basic"){let o=r(e.auth.username),n=r(e.auth.password);if(!o||!n)return t;t.authorization=`Basic ${btoa(`${o}:${n}`)}`}else if(e.auth.type==="Custom"){let o=r(e.auth.value);if(!o)return t;t.authorization=`${r(e.auth.prefix)} ${o}`}}return t},Ye=["get","post","put","patch","delete"];var ur=/^application\/(?:[\w!#$%&*.^`~-]*\+)?json(;.+)?$/i;function pr(e){let t=e.headers.get("content-type"),r=new Set(["image/svg","application/xml","application/xhtml","application/html"]);if(!t)return"json";let o=t.split(";").shift()||"";return ur.test(o)?"json":r.has(o)||o.startsWith("text/")?"text":"blob"}function mr(e){try{return JSON.parse(e),!0}catch{return!1}}function Je(e){if(e===void 0)return!1;let t=typeof e;return t==="string"||t==="number"||t==="boolean"||t===null?!0:t!=="object"?!1:Array.isArray(e)?!0:e.buffer?!1:e.constructor&&e.constructor.name==="Object"||typeof e.toJSON=="function"}function We(e){try{return JSON.parse(e)}catch{return e}}function Qe(e){return typeof e=="function"}function fr(e){if(e?.customFetchImpl)return e.customFetchImpl;if(typeof globalThis<"u"&&Qe(globalThis.fetch))return globalThis.fetch;if(typeof window<"u"&&Qe(window.fetch))return window.fetch;throw new Error("No fetch implementation found")}function gr(e){let t=new Headers(e?.headers),r=lr(e);for(let[o,n]of Object.entries(r||{}))t.set(o,n);if(!t.has("content-type")){let o=hr(e?.body);o&&t.set("content-type",o)}return t}function hr(e){return Je(e)?"application/json":null}function yr(e){if(!e?.body)return null;let t=new Headers(e?.headers);return Je(e.body)&&!t.has("content-type")?JSON.stringify(e.body):e.body}function wr(e,t){var r;if(t?.method)return t.method.toUpperCase();if(e.startsWith("@")){let o=(r=e.split("@")[1])==null?void 0:r.split("/")[0];return Ye.includes(o)?o.toUpperCase():t?.body?"POST":"GET"}return t?.body?"POST":"GET"}function br(e,t){let r;return!e?.signal&&e?.timeout&&(r=setTimeout(()=>t?.abort(),e?.timeout)),{abortTimeout:r,clearTimeout:()=>{r&&clearTimeout(r)}}}function Or(e,t){let{baseURL:r,params:o,query:n}=t||{query:{},params:{},baseURL:""},i=e.startsWith("http")?e.split("/").slice(0,3).join("/"):r;if(!i)throw new TypeError(`Invalid URL ${e}. Are you passing in a relative URL but not setting the baseURL?`);if(e.startsWith("@")){let p=e.toString().split("@")[1].split("/")[0];Ye.includes(p)&&(e=e.replace(`@${p}/`,"/"))}i.endsWith("/")||(i+="/");let[s,d]=e.replace(i,"").split("?"),a=new URLSearchParams(d);for(let[p,u]of Object.entries(n||{}))a.set(p,String(u));if(o)if(Array.isArray(o)){let p=s.split("/").filter(u=>u.startsWith(":"));for(let[u,y]of p.entries()){let O=o[u];s=s.replace(y,O)}}else for(let[p,u]of Object.entries(o))s=s.replace(`:${p}`,String(u));s=s.split("/").map(encodeURIComponent).join("/"),s.startsWith("/")&&(s=s.slice(1));let c=a.size>0?`?${a}`.replace(/\+/g,"%20"):"";return new URL(`${s}${c}`,i)}var b=async(e,t)=>{var r,o,n,i,s,d,a,c;let{hooks:l,url:p,options:u}=await ar(e,t),y=fr(u),O=new AbortController,L=(r=u.signal)!=null?r:O.signal,ne=Or(p,u),me=yr(u),fe=gr(u),j=wr(p,u),w=se(ie({},u),{url:ne,headers:fe,body:me,method:j,signal:L});for(let V of l.onRequest)if(V){let P=await V(w);P instanceof Object&&(w=P)}("pipeTo"in w&&typeof w.pipeTo=="function"||typeof((o=t?.body)==null?void 0:o.pipe)=="function")&&("duplex"in w||(w.duplex="half"));let{clearTimeout:Me}=br(u,O),I=await y(w.url,w);Me();let Be={response:I,request:w};for(let V of l.onResponse)if(V){let P=await V(se(ie({},Be),{response:(n=t?.hookOptions)!=null&&n.cloneResponse?I.clone():I}));P instanceof Response?I=P:P instanceof Object&&(I=P.response)}if(I.ok){if(!(w.method!=="HEAD"))return{data:"",error:null};let P=pr(I),K={data:"",response:I,request:w};if(P==="json"||P==="text"){let X=await I.text(),Wt=await((i=w.jsonParser)!=null?i:We)(X);K.data=Wt}else K.data=await I[P]();w?.output&&w.output&&!w.disableValidation&&(K.data=w.output.parse(K.data));for(let X of l.onSuccess)X&&await X(se(ie({},K),{response:(s=t?.hookOptions)!=null&&s.cloneResponse?I.clone():I}));return t?.throw?K.data:{data:K.data,error:null}}let Gt=(d=t?.jsonParser)!=null?d:We,Ve=await I.text(),Ue=mr(Ve)?await Gt(Ve):{},Zt={response:I,request:w,error:se(ie({},Ue),{status:I.status,statusText:I.statusText})};for(let V of l.onError)V&&await V(se(ie({},Zt),{response:(a=t?.hookOptions)!=null&&a.cloneResponse?I.clone():I}));if(t?.retry){let V=cr(t.retry),P=(c=t.retryAttempt)!=null?c:0;if(await V.shouldAttemptRetry(P,I)){for(let X of l.onRetry)X&&await X(Be);let K=V.getDelay(P);return await new Promise(X=>setTimeout(X,K)),await b(e,se(ie({},t),{retryAttempt:P+1}))}}if(t?.throw)throw new sr(I.status,I.statusText,Ue);return{data:null,error:se(ie({},Ue),{status:I.status,statusText:I.statusText})}};import{APIError as Tr}from"better-call";import{decodeJwt as vr,decodeProtectedHeader as Ur,importJWK as Sr,jwtVerify as kr}from"jose";import{createHash as Ar}from"@better-auth/utils/hash";import{base64Url as _r}from"@better-auth/utils/base64";async function Ke(e){let t=await Ar("SHA-256").digest(e);return _r.encode(new Uint8Array(t),{padding:!1})}function Ae(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?W(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function E({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:n,scopes:i,claims:s,redirectURI:d,duration:a}){let c=new URL(r);if(c.searchParams.set("response_type","code"),c.searchParams.set("client_id",t.clientId),c.searchParams.set("state",o),c.searchParams.set("scope",i.join(" ")),c.searchParams.set("redirect_uri",t.redirectURI||d),n){let l=await Ke(n);c.searchParams.set("code_challenge_method","S256"),c.searchParams.set("code_challenge",l)}if(s){let l=s.reduce((p,u)=>(p[u]=null,p),{});c.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...l}}))}return a&&c.searchParams.set("duration",a),c}import{jwtVerify as hn}from"jose";async function _({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:n,authentication:i}){let s=new URLSearchParams,d={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(s.set("grant_type","authorization_code"),s.set("code",e),t&&s.set("code_verifier",t),s.set("redirect_uri",r),i==="basic"){let p=btoa(`${o.clientId}:${o.clientSecret}`);d.authorization=`Basic ${p}`}else s.set("client_id",o.clientId),s.set("client_secret",o.clientSecret);let{data:a,error:c}=await b(n,{method:"POST",body:s,headers:d});if(c)throw c;return Ae(a)}import{z as te}from"zod";import{APIError as tt}from"better-call";function _e(e){try{return new URL(e).origin}catch{return null}}function Xe(e){try{return new URL(e).protocol}catch{return null}}function Le(e){return e.includes("://")?new URL(e).host:e}import{createHash as Mn}from"@better-auth/utils/hash";import{xchacha20poly1305 as Vn}from"@noble/ciphers/chacha";import{bytesToHex as Fn,hexToBytes as qn,utf8ToBytes as Hn}from"@noble/ciphers/utils";import{managedNonce as Zn}from"@noble/ciphers/webcrypto";import{createHash as En}from"@better-auth/utils/hash";import{SignJWT as Er}from"jose";async function et(e,t,r=3600){return await new Er(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}import{scryptAsync as kn}from"@noble/hashes/scrypt";import{getRandomValues as Ln}from"uncrypto";import{hex as zn}from"@better-auth/utils/hex";import{createRandomStringGenerator as Rr}from"@better-auth/utils/random";var he=Rr("a-z","0-9","A-Z","-_");async function Ie(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?_e(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new tt("BAD_REQUEST",{message:"callbackURL is required"});let o=he(128),n=he(32),i=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),s=new Date;s.setMinutes(s.getMinutes()+10);let d=await e.context.internalAdapter.createVerificationValue({value:i,identifier:n,expiresAt:s});if(!d)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new tt("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:d.identifier,codeVerifier:o}}async function rt(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=te.object({callbackURL:te.string(),codeVerifier:te.string(),errorURL:te.string().optional(),newUserURL:te.string().optional(),expiresAt:te.number(),link:te.object({email:te.string(),userId:te.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}var ot=e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:n}){let i=o||["email","name"];return e.scope&&i.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||n}&scope=${i.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:n})=>_({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let n=Ur(r),{kid:i,alg:s}=n;if(!i||!s)return!1;let d=await Nr(i),{payload:a}=await kr(r,d,{algorithms:[s],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(c=>{a[c]!==void 0&&(a[c]=!!a[c])}),o&&a.nonce!==o?!1:!!a},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=vr(r.idToken);if(!o)return null;let n=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:n,emailVerified:!1,email:o.email,...i},data:o}}}},Nr=async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await b(`${t}${r}`);if(!o?.keys)throw new Tr("BAD_REQUEST",{message:"Keys not found"});let n=o.keys.find(i=>i.kid===e);if(!n)throw new Error(`JWK with kid ${e} not found`);return await Sr(n,n.alg)};var nt=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identify","email"];return e.scope&&n.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${n.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>_({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let i=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${i}.png`}else{let i=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${i}`}let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...n},data:r}}});var it=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["email","public_profile"];return e.scope&&n.push(...e.scope),await E({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:n,state:t,redirectURI:o})},validateAuthorizationCode:async({code:t,redirectURI:r})=>_({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=["id","name","email","picture",...e?.fields||[]],{data:o,error:n}=await b("https://graph.facebook.com/me?fields="+r.join(","),{auth:{type:"Bearer",token:t.accessToken}});if(n)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.id,name:o.name,email:o.email,image:o.picture.data.url,emailVerified:o.email_verified,...i},data:o}}});var st=e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:n,redirectURI:i}){let s=o||["user:email"];return e.scope&&s.push(...e.scope),E({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:s,state:r,redirectURI:i})},validateAuthorizationCode:async({code:r,redirectURI:o})=>_({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await b("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(n)return null;let i=!1,{data:s}=await b("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});s&&(o.email=(s.find(a=>a.primary)??s[0])?.email,i=s.find(a=>a.email===o.email)?.verified??!1);let d=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:i,...d},data:o}}}};import{decodeJwt as xr}from"jose";var Pe=["info","success","warn","error","debug"];function Lr(e,t){return Pe.indexOf(t)<=Pe.indexOf(e)}var Y={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Pr={info:Y.fg.blue,success:Y.fg.green,warn:Y.fg.yellow,error:Y.fg.red,debug:Y.fg.magenta},zr=(e,t)=>{let r=new Date().toISOString();return`${Y.dim}${r}${Y.reset} ${Pr[e]}${e.toUpperCase()}${Y.reset} ${Y.bright}[Better Auth]:${Y.reset} ${t}`},Dr=e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=(n,i,s=[])=>{if(!t||!Lr(r,n))return;let d=zr(n,i);if(!e||typeof e.log!="function"){n==="error"?console.error(d,...s):n==="warn"?console.warn(d,...s):console.log(d,...s);return}e.log(n==="success"?"info":n,i,...s)};return Object.fromEntries(Pe.map(n=>[n,(...[i,...s])=>o(n,i,s)]))},F=Dr();var at=e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){if(!e.clientId||!e.clientSecret)throw F.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new Z("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new Z("codeVerifier is required for Google");let i=r||["email","profile","openid"];e.scope&&i.push(...e.scope);let s=await E({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:i,state:t,codeVerifier:o,redirectURI:n});return e.accessType&&s.searchParams.set("access_type",e.accessType),e.prompt&&s.searchParams.set("prompt",e.prompt),e.display&&s.searchParams.set("display",e.display),e.hd&&s.searchParams.set("hd",e.hd),s},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>_({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:n}=await b(o);return n?n.aud===e.clientId&&n.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=xr(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}});import{decodeJwt as Cr}from"jose";var dt=e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(n){let i=n.scopes||["openid","profile","email","User.Read"];return e.scope&&i.push(...e.scope),E({id:"microsoft",options:e,authorizationEndpoint:r,state:n.state,codeVerifier:n.codeVerifier,scopes:i,redirectURI:n.redirectURI})},validateAuthorizationCode({code:n,codeVerifier:i,redirectURI:s}){return _({code:n,codeVerifier:i,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:o})},async getUserInfo(n){if(e.getUserInfo)return e.getUserInfo(n);if(!n.idToken)return null;let i=Cr(n.idToken),s=e.profilePhotoSize||48;await b(`https://graph.microsoft.com/v1.0/me/photos/${s}x${s}/$value`,{headers:{Authorization:`Bearer ${n.accessToken}`},async onResponse(a){if(!(e.disableProfilePhoto||!a.response.ok))try{let l=await a.response.clone().arrayBuffer(),p=Buffer.from(l).toString("base64");i.picture=`data:image/jpeg;base64, ${p}`}catch(c){F.error(c&&typeof c=="object"&&"name"in c?c.name:"",c)}}});let d=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,image:i.picture,emailVerified:!0,...d},data:i}}}};var ct=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){let i=r||["user-read-email"];return e.scope&&i.push(...e.scope),E({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:i,state:t,codeVerifier:o,redirectURI:n})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>_({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...n},data:r}}});var le={isAction:!1};import{createRandomStringGenerator as jr}from"@better-auth/utils/random";var J=e=>jr("a-z","A-Z","0-9")(e||32);import{decodeJwt as Mr}from"jose";var lt=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["user:read:email","openid"];return e.scope&&n.push(...e.scope),E({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:n,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:t,redirectURI:r})=>_({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return F.error("No idToken found in token"),null;let o=Mr(r),n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...n},data:o}}});var ut=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),E({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>_({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...n},data:r}}});var pt=e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:r,scopes:o,codeVerifier:n,redirectURI:i})=>{let s=o||["account_info.read"];return e.scope&&s.push(...e.scope),await E({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:s,state:r,redirectURI:i,codeVerifier:n})},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:n})=>await _({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await b("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(n)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...i},data:o}}}};var mt=e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:o,scopes:n,redirectURI:i})=>{let s=n||["profile","email","openid"];return e.scope&&s.push(...e.scope),await E({id:"linkedin",options:e,authorizationEndpoint:t,scopes:s,state:o,redirectURI:i})},validateAuthorizationCode:async({code:o,redirectURI:n})=>await _({code:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:r}),async getUserInfo(o){let{data:n,error:i}=await b("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(i)return null;let s=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,emailVerified:n.email_verified||!1,image:n.picture,...s},data:n}}}};var ze=(e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),Br=e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:ze(`${t}/oauth/authorize`),tokenEndpoint:ze(`${t}/oauth/token`),userinfoEndpoint:ze(`${t}/api/v4/user`)}},ft=e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=Br(e.issuer),n="gitlab";return{id:n,name:"Gitlab",createAuthorizationURL:async({state:s,scopes:d,codeVerifier:a,redirectURI:c})=>{let l=d||["read_user"];return e.scope&&l.push(...e.scope),await E({id:n,options:e,authorizationEndpoint:t,scopes:l,state:s,redirectURI:c,codeVerifier:a})},validateAuthorizationCode:async({code:s,redirectURI:d,codeVerifier:a})=>_({code:s,redirectURI:e.redirectURI||d,options:e,codeVerifier:a,tokenEndpoint:r}),async getUserInfo(s){if(e.getUserInfo)return e.getUserInfo(s);let{data:d,error:a}=await b(o,{headers:{authorization:`Bearer ${s.accessToken}`}});if(a||d.state!=="active"||d.locked)return null;let c=await e.mapProfileToUser?.(d);return{user:{id:d.id.toString(),name:d.name??d.username,email:d.email,image:d.avatar_url,emailVerified:!0,...c},data:d}}}};var gt=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identity"];return e.scope&&n.push(...e.scope),E({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:n,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),n={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:i,error:s}=await b("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:n,body:o.toString()});if(s)throw s;return Ae(i)},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await b("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...n},data:r}}});import{z as Vr}from"zod";var $r={apple:ot,discord:nt,facebook:it,github:st,microsoft:dt,google:at,spotify:ct,twitch:lt,twitter:ut,dropbox:pt,linkedin:mt,gitlab:ft,reddit:gt},De=Object.keys($r),ht=Vr.enum(De,{description:"OAuth2 provider to use"});import{z as q}from"zod";import{APIError as ye}from"better-call";import{APIError as re}from"better-call";import{z as ae}from"zod";function yt(e){try{return JSON.parse(e)}catch{return null}}var g={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action.",FAILED_TO_UNLINK_LAST_ACCOUNT:"You can't unlink your last account",ACCOUNT_NOT_FOUND:"Account not found"};import{createHMAC as Fr}from"@better-auth/utils/hmac";import{base64 as qr}from"@better-auth/utils/base64";import{binary as Hr}from"@better-auth/utils/binary";var wt=()=>m("/get-session",{method:"GET",query:ae.optional(ae.object({disableCookieCache:ae.boolean({description:"Disable cookie cache and fetch session from database"}).or(ae.string().transform(e=>e==="true")).optional(),disableRefresh:ae.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?yt(Hr.decode(qr.decode(r))):null;if(o&&!await Fr("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return Q(e),e.json(null);let n=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let l=o.session;if(o.expiresAt<Date.now()||l.session.expiresAt<new Date){let u=e.context.authCookies.sessionData.name;e.setCookie(u,"",{maxAge:0})}else return e.json(l)}let i=await e.context.internalAdapter.findSession(t);if(e.context.session=i,!i||i.session.expiresAt<new Date)return Q(e),i&&await e.context.internalAdapter.deleteSession(i.session.token),e.json(null);if(n||e.query?.disableRefresh)return e.json(i);let s=e.context.sessionConfig.expiresIn,d=e.context.sessionConfig.updateAge;if(i.session.expiresAt.valueOf()-s*1e3+d*1e3<=Date.now()){let l=await e.context.internalAdapter.updateSession(i.session.token,{expiresAt:W(e.context.sessionConfig.expiresIn,"sec")});if(!l)return Q(e),e.json(null,{status:401});let p=(l.expiresAt.valueOf()-Date.now())/1e3;return await z(e,{session:l,user:i.user},!1,{maxAge:p}),e.json({session:l,user:i.user})}return await Ne(e,i),e.json(i)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new re("INTERNAL_SERVER_ERROR",{message:g.FAILED_TO_GET_SESSION})}}),D=async(e,t)=>{if(e.context.session)return e.context.session;let r=await wt()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},M=ee(async e=>{let t=await D(e);if(!t?.session)throw new re("UNAUTHORIZED");return{session:t}}),bt=ee(async e=>{let t=await D(e);if(!t?.session)throw new re("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new re("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var Gr=m("/revoke-session",{method:"POST",body:ae.object({token:ae.string({description:"The token to revoke"})}),use:[M],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new re("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new re("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new re("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Zr=m("/revoke-sessions",{method:"POST",use:[M],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new re("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Wr=m("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[M],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new re("UNAUTHORIZED");let n=(await e.context.internalAdapter.listSessions(t.user.id)).filter(i=>i.expiresAt>new Date).filter(i=>i.token!==e.context.session.session.token);return await Promise.all(n.map(i=>e.context.internalAdapter.deleteSession(i.token))),e.json({status:!0})});import{jwtVerify as Kr}from"jose";import{APIError as At}from"better-call";function xe(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function Qr(e){let t="";for(let r=0;r<e.length;r++)t+=xe(e[r]);return t}function Ot(e,t=!0){if(Array.isArray(e))return`(?:${e.map(l=>`^${Ot(l,t)}$`).join("|")})`;let r="",o="",n=".";t===!0?(r="/",o="[/\\\\]",n="[^/\\\\]"):t&&(r=t,o=Qr(r),o.length>1?(o=`(?:${o})`,n=`((?!${o}).)`):n=`[^${o}]`);let i=t?`${o}+?`:"",s=t?`${o}*?`:"",d=t?e.split(r):[e],a="";for(let c=0;c<d.length;c++){let l=d[c],p=d[c+1],u="";if(!(!l&&c>0)){if(t&&(c===d.length-1?u=s:p!=="**"?u=i:u=""),t&&l==="**"){u&&(a+=c===0?"":u,a+=`(?:${n}*?${u})*?`);continue}for(let y=0;y<l.length;y++){let O=l[y];O==="\\"?y<l.length-1&&(a+=xe(l[y+1]),y++):O==="?"?a+=n:O==="*"?a+=`${n}*?`:a+=xe(O)}a+=u}}return a}function Yr(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}function Ee(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=Ot(e,t.separator),o=new RegExp(`^${r}$`,t.flags),n=Yr.bind(null,o);return n.options=t,n.pattern=e,n.regexp=o,n}var Jr=ee(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,n=e.headers?.get("origin")||e.headers?.get("referer")||"",i=t?.callbackURL||r?.callbackURL,s=t?.redirectTo,d=r?.currentURL,a=t?.errorCallbackURL,c=t?.newUserCallbackURL,l=o.trustedOrigins,p=e.headers?.has("cookie"),u=(O,L)=>{if(O.startsWith("/"))return!1;if(L.includes("*"))return Ee(L)(Le(O));let ne=Xe(O);return ne==="http:"||ne==="https:"||!ne?L===_e(O):O.startsWith(L)},y=(O,L)=>{if(!O)return;if(!l.some(me=>u(O,me)||O?.startsWith("/")&&L!=="origin"&&!O.includes(":")))throw e.context.logger.error(`Invalid ${L}: ${O}`),e.context.logger.info(`If it's a valid URL, please add ${O} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${l}`),new At("FORBIDDEN",{message:`Invalid ${L}`})};p&&!e.context.options.advanced?.disableCSRFCheck&&y(n,"origin"),i&&y(i,"callbackURL"),s&&y(s,"redirectURL"),d&&y(d,"currentURL"),a&&y(a,"errorCallbackURL"),c&&y(c,"newUserCallbackURL")}),ue=e=>ee(async t=>{let{context:r}=t,o=e(t),n=r.trustedOrigins,i=(d,a)=>d.startsWith("/")?!1:a.includes("*")?Ee(a)(Le(d)):d.startsWith(a);o&&((d,a)=>{if(!d)return;if(!n.some(l=>i(d,l)||d?.startsWith("/")&&a!=="origin"&&!d.includes(":")))throw t.context.logger.error(`Invalid ${a}: ${d}`),t.context.logger.info(`If it's a valid URL, please add ${d} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${n}`),new At("FORBIDDEN",{message:`Invalid ${a}`})})(o,"callbackURL")});import{JWTExpired as Xr}from"jose/errors";async function oe(e,t,r,o=3600){return await et({email:t.toLowerCase(),updateTo:r},e,o)}async function eo(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ye("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await oe(e.context.secret,t.email,void 0,e.context.options.emailVerification?.expiresIn),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}var to=m("/send-verification-email",{method:"POST",query:q.object({currentURL:q.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:q.object({email:q.string({description:"The email to send the verification email to"}).email(),callbackURL:q.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ye("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new ye("BAD_REQUEST",{message:g.USER_NOT_FOUND});return await eo(e,r.user),e.json({status:!0})}),ro=m("/verify-email",{method:"GET",query:q.object({token:q.string({description:"The token to verify the email"}),callbackURL:q.string({description:"The URL to redirect to after email verification"}).optional()}),use:[ue(e=>e.query.callbackURL)],metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(d){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${d}`):e.redirect(`${e.query.callbackURL}?error=${d}`):new ye("UNAUTHORIZED",{message:d})}let{token:r}=e.query,o;try{o=await Kr(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(d){return d instanceof Xr?t("token_expired"):t("invalid_token")}let i=q.object({email:q.string().email(),updateTo:q.string().optional()}).parse(o.payload),s=await e.context.internalAdapter.findUserByEmail(i.email);if(!s)return t("user_not_found");if(i.updateTo){let d=await D(e);if(!d){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(d.user.email!==i.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let a=await e.context.internalAdapter.updateUserByEmail(i.email,{email:i.updateTo,emailVerified:!1}),c=await oe(e.context.secret,i.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:a,url:`${e.context.baseURL}/verify-email?token=${c}`,token:c},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0,user:{id:a.id,email:a.email,name:a.name,image:a.image,emailVerified:a.emailVerified,createdAt:a.createdAt,updatedAt:a.updatedAt}})}if(await e.context.internalAdapter.updateUserByEmail(i.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification){let d=await D(e);if(!d||d.user.email!==i.email){let a=await e.context.internalAdapter.createSession(s.user.id,e.request);if(!a)throw new ye("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await z(e,{session:a,user:s.user})}}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0,user:null})});import{APIError as id,createRouter as sd,getCookie as ad,getSignedCookie as dd,setCookie as cd,setSignedCookie as ld}from"better-call";var oo=m("/ok",{method:"GET",metadata:{...le,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as za}from"zod";import{APIError as Va}from"better-call";import{z as h}from"zod";import{APIError as va}from"better-call";var Ua=h.object({id:h.string(),providerId:h.string(),accountId:h.string(),userId:h.string(),accessToken:h.string().nullish(),refreshToken:h.string().nullish(),idToken:h.string().nullish(),accessTokenExpiresAt:h.date().nullish(),refreshTokenExpiresAt:h.date().nullish(),scope:h.string().nullish(),password:h.string().nullish(),createdAt:h.date().default(()=>new Date),updatedAt:h.date().default(()=>new Date)}),Sa=h.object({id:h.string(),email:h.string().transform(e=>e.toLowerCase()),emailVerified:h.boolean().default(!1),name:h.string(),image:h.string().nullish(),createdAt:h.date().default(()=>new Date),updatedAt:h.date().default(()=>new Date)}),ka=h.object({id:h.string(),userId:h.string(),expiresAt:h.date(),createdAt:h.date().default(()=>new Date),updatedAt:h.date().default(()=>new Date),token:h.string(),ipAddress:h.string().nullish(),userAgent:h.string().nullish()}),Na=h.object({id:h.string(),value:h.string(),createdAt:h.date().default(()=>new Date),updatedAt:h.date().default(()=>new Date),expiresAt:h.date(),identifier:h.string()});var io=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,so=m("/error",{method:"GET",metadata:{...le,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(io(t),{headers:{"Content-Type":"text/html"}})});import{APIError as _t}from"better-call";async function Re(e,{userInfo:t,account:r,callbackURL:o}){let n=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(a=>{throw F.error(`Better auth was unable to query your database.
Error: `,a),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),i=n?.user,s=!i;if(n){let a=n.accounts.find(c=>c.providerId===r.providerId);if(a){let c=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([l,p])=>p!==void 0));Object.keys(c).length>0&&await e.context.internalAdapter.updateAccount(a.id,c)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return ke&&F.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:n.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(p){return F.error("Unable to link account",p),{error:"unable to link account",data:null}}}}else try{if(i=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(a=>a?.user),!t.emailVerified&&i&&e.context.options.emailVerification?.sendOnSignUp){let a=await oe(e.context.secret,i.email,void 0,e.context.options.emailVerification?.expiresIn),c=`${e.context.baseURL}/verify-email?token=${a}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:i,url:c,token:a},e.request)}}catch(a){return a instanceof _t?{error:a.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!i)return{error:"unable to create user",data:null,isRegister:!1};let d=await e.context.internalAdapter.createSession(i.id,e.request);return d?{data:{session:d,user:i},error:null,isRegister:s}:{error:"unable to create session",data:null,isRegister:!1}}var ao=m("/sign-in/social",{method:"POST",query:v.object({currentURL:v.string().optional()}).optional(),body:v.object({callbackURL:v.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:v.string().optional(),errorCallbackURL:v.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:ht,disableRedirect:v.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:v.optional(v.object({token:v.string({description:"ID token from the provider"}),nonce:v.string({description:"Nonce used to generate the token"}).optional(),accessToken:v.string({description:"Access token from the provider"}).optional(),refreshToken:v.string({description:"Refresh token from the provider"}).optional(),expiresAt:v.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(i=>i.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new x("NOT_FOUND",{message:g.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new x("NOT_FOUND",{message:g.ID_TOKEN_NOT_SUPPORTED});let{token:i,nonce:s}=e.body.idToken;if(!await t.verifyIdToken(i,s))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new x("UNAUTHORIZED",{message:g.INVALID_TOKEN});let a=await t.getUserInfo({idToken:i,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!a||!a?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new x("UNAUTHORIZED",{message:g.FAILED_TO_GET_USER_INFO});if(!a.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new x("UNAUTHORIZED",{message:g.USER_EMAIL_NOT_FOUND});let c=await Re(e,{userInfo:{email:a.user.email,id:a.user.id,name:a.user.name||"",image:a.user.image,emailVerified:a.user.emailVerified||!1},account:{providerId:t.id,accountId:a.user.id,accessToken:e.body.idToken.accessToken}});if(c.error)throw new x("UNAUTHORIZED",{message:c.error});return await z(e,c.data),e.json({redirect:!1,token:c.data.session.token,url:void 0,user:{id:c.data.user.id,email:c.data.user.email,name:c.data.user.name,image:c.data.user.image,emailVerified:c.data.user.emailVerified,createdAt:c.data.user.createdAt,updatedAt:c.data.user.updatedAt}})}let{codeVerifier:r,state:o}=await Ie(e),n=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:n.toString(),redirect:!e.body.disableRedirect})}),co=m("/sign-in/email",{method:"POST",body:v.object({email:v.string({description:"Email of the user"}),password:v.string({description:"Password of the user"}),callbackURL:v.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:v.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new x("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!v.string().email().safeParse(t).success)throw new x("BAD_REQUEST",{message:g.INVALID_EMAIL});let n=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!n)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new x("UNAUTHORIZED",{message:g.INVALID_EMAIL_OR_PASSWORD});let i=n.accounts.find(c=>c.providerId==="credential");if(!i)throw e.context.logger.error("Credential account not found",{email:t}),new x("UNAUTHORIZED",{message:g.INVALID_EMAIL_OR_PASSWORD});let s=i?.password;if(!s)throw e.context.logger.error("Password not found",{email:t}),new x("UNAUTHORIZED",{message:g.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:s,password:r}))throw e.context.logger.error("Invalid password"),new x("UNAUTHORIZED",{message:g.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!n.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new x("UNAUTHORIZED",{message:g.EMAIL_NOT_VERIFIED});let c=await oe(e.context.secret,n.user.email,void 0,e.context.options.emailVerification?.expiresIn),l=`${e.context.baseURL}/verify-email?token=${c}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:n.user,url:l,token:c},e.request),new x("FORBIDDEN",{message:g.EMAIL_NOT_VERIFIED})}let a=await e.context.internalAdapter.createSession(n.user.id,e.headers,e.body.rememberMe===!1);if(!a)throw e.context.logger.error("Failed to create session"),new x("UNAUTHORIZED",{message:g.FAILED_TO_CREATE_SESSION});return await z(e,{session:a,user:n.user},e.body.rememberMe===!1),e.json({redirect:!!e.body.callbackURL,token:a.token,url:e.body.callbackURL,user:{id:n.user.id,email:n.user.email,name:n.user.name,image:n.user.image,emailVerified:n.user.emailVerified,createdAt:n.user.createdAt,updatedAt:n.user.updatedAt}})});import{z as we}from"zod";var Te=we.object({code:we.string().optional(),error:we.string().optional(),error_description:we.string().optional(),state:we.string().optional()}),lo=m("/callback/:id",{method:["GET","POST"],body:Te.optional(),query:Te.optional(),metadata:le},async e=>{let t;try{if(e.method==="GET")t=Te.parse(e.query);else if(e.method==="POST")t=Te.parse(e.body);else throw new Error("Unsupported method")}catch(j){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",j),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:n,error_description:i}=t;if(!n)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${i}`);let s=e.context.socialProviders.find(j=>j.id===e.params.id);if(!s)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:d,callbackURL:a,link:c,errorURL:l,newUserURL:p}=await rt(e),u;try{u=await s.validateAuthorizationCode({code:r,codeVerifier:d,redirectURI:`${e.context.baseURL}/callback/${s.id}`})}catch(j){throw e.context.logger.error("",j),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let y=await s.getUserInfo(u).then(j=>j?.user);function O(j){let w=l||a||`${e.context.baseURL}/error`;throw w.includes("?")?w=`${w}&error=${j}`:w=`${w}?error=${j}`,e.redirect(w)}if(!y)return e.context.logger.error("Unable to get user info"),O("unable_to_get_user_info");if(!y.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),O("email_not_found");if(!a)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(c){if(c.email!==y.email.toLowerCase())return O("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:c.userId,providerId:s.id,accountId:y.id}))return O("unable_to_link_account");let w;try{w=a.toString()}catch{w=a}throw e.redirect(w)}let L=await Re(e,{userInfo:{...y,email:y.email,name:y.name||y.email},account:{providerId:s.id,accountId:y.id,...u,scope:u.scopes?.join(",")},callbackURL:a});if(L.error)return e.context.logger.error(L.error.split(" ").join("_")),O(L.error.split(" ").join("_"));let{session:ne,user:me}=L.data;await z(e,{session:ne,user:me});let fe;try{fe=(L.isRegister&&p||a).toString()}catch{fe=L.isRegister&&p||a}throw e.redirect(fe)});import{APIError as _o}from"better-call";var uo=m("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw Q(e),new _o("BAD_REQUEST",{message:g.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),Q(e),e.json({success:!0})});import{z as $}from"zod";import{APIError as be}from"better-call";function Et(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([n,i])=>o.searchParams.set(n,i)),o.href}function Io(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([n,i])=>o.searchParams.set(n,i)),o.href}var po=m("/forget-password",{method:"POST",body:$.object({email:$.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:$.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new be("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let n=60*60*1,i=W(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||n,"sec"),s=J(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${s}`,expiresAt:i});let d=`${e.context.baseURL}/reset-password/${s}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:d,token:s},e.request),e.json({status:!0})}),mo=m("/reset-password/:token",{method:"GET",query:$.object({callbackURL:$.string({description:"The URL to redirect the user to reset their password"})}),use:[ue(e=>e.query.callbackURL)],metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(Et(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(Et(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(Io(e.context,r,{token:t}))}),fo=m("/reset-password",{query:$.optional($.object({token:$.string().optional(),currentURL:$.string().optional()})),method:"POST",body:$.object({newPassword:$.string({description:"The new password to set"}),token:$.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new be("BAD_REQUEST",{message:g.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,n=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new be("BAD_REQUEST",{message:g.PASSWORD_TOO_SHORT});if(r.length>n)throw new be("BAD_REQUEST",{message:g.PASSWORD_TOO_LONG});let i=`reset-password:${t}`,s=await e.context.internalAdapter.findVerificationValue(i);if(!s||s.expiresAt<new Date)throw new be("BAD_REQUEST",{message:g.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(s.id);let d=s.value,a=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(d)).find(p=>p.providerId==="credential")?(await e.context.internalAdapter.updatePassword(d,a),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:d,providerId:"credential",password:a,accountId:d}),e.json({status:!0}))});import{z as k}from"zod";import{APIError as U}from"better-call";var go=m("/change-password",{method:"POST",body:k.object({newPassword:k.string({description:"The new password to set"}),currentPassword:k.string({description:"The current password"}),revokeOtherSessions:k.boolean({description:"Revoke all other sessions"}).optional()}),use:[M],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,n=e.context.session,i=e.context.password.config.minPasswordLength;if(t.length<i)throw e.context.logger.error("Password is too short"),new U("BAD_REQUEST",{message:g.PASSWORD_TOO_SHORT});let s=e.context.password.config.maxPasswordLength;if(t.length>s)throw e.context.logger.error("Password is too long"),new U("BAD_REQUEST",{message:g.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(n.user.id)).find(u=>u.providerId==="credential"&&u.password);if(!a||!a.password)throw new U("BAD_REQUEST",{message:g.CREDENTIAL_ACCOUNT_NOT_FOUND});let c=await e.context.password.hash(t);if(!await e.context.password.verify({hash:a.password,password:r}))throw new U("BAD_REQUEST",{message:g.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(a.id,{password:c});let p=null;if(o){await e.context.internalAdapter.deleteSessions(n.user.id);let u=await e.context.internalAdapter.createSession(n.user.id,e.headers);if(!u)throw new U("INTERNAL_SERVER_ERROR",{message:g.FAILED_TO_GET_SESSION});await z(e,{session:u,user:n.user}),p=u.token}return e.json({token:p,user:{id:n.user.id,email:n.user.email,name:n.user.name,image:n.user.image,emailVerified:n.user.emailVerified,createdAt:n.user.createdAt,updatedAt:n.user.updatedAt}})}),ho=m("/set-password",{method:"POST",body:k.object({newPassword:k.string()}),metadata:{SERVER_ONLY:!0},use:[M]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new U("BAD_REQUEST",{message:g.PASSWORD_TOO_SHORT});let n=e.context.password.config.maxPasswordLength;if(t.length>n)throw e.context.logger.error("Password is too long"),new U("BAD_REQUEST",{message:g.PASSWORD_TOO_LONG});let s=(await e.context.internalAdapter.findAccounts(r.user.id)).find(a=>a.providerId==="credential"&&a.password),d=await e.context.password.hash(t);if(!s)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:d}),e.json({status:!0});throw new U("BAD_REQUEST",{message:"user already has a password"})}),yo=m("/delete-user",{method:"POST",use:[M],body:k.object({callbackURL:k.string().optional(),password:k.string().optional(),token:k.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new U("NOT_FOUND");let t=e.context.session;if(e.body.password){let i=(await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId==="credential"&&d.password);if(!i||!i.password)throw new U("BAD_REQUEST",{message:g.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:i.password,password:e.body.password}))throw new U("BAD_REQUEST",{message:g.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let n=t.session.createdAt.getTime(),i=e.context.options.session.freshAge;if(Date.now()-n>i)throw new U("BAD_REQUEST",{message:g.SESSION_EXPIRED})}if(e.body.token)return await It({...e,query:{token:e.body.token}}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let n=he(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${n}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let i=`${e.context.baseURL}/delete-user/callback?token=${n}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:i,token:n},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),Q(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),It=m("/delete-user/callback",{method:"GET",query:k.object({token:k.string(),callbackURL:k.string().optional()}),use:[ue(e=>e.query.callbackURL)]},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new U("NOT_FOUND");let t=await D(e);if(!t)throw new U("NOT_FOUND",{message:g.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new U("NOT_FOUND",{message:g.INVALID_TOKEN});if(r.value!==t.user.id)throw new U("NOT_FOUND",{message:g.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),Q(e);let n=e.context.options.user.deleteUser?.afterDelete;if(n&&await n(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),wo=m("/change-email",{method:"POST",query:k.object({currentURL:k.string().optional()}).optional(),body:k.object({newEmail:k.string({description:"The new email to set"}).email(),callbackURL:k.string({description:"The URL to redirect to after email verification"}).optional()}),use:[M],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new U("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new U("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new U("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let n=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new U("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await oe(e.context.secret,e.context.session.user.email,e.body.newEmail,e.context.options.emailVerification?.expiresIn),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});import{z as de}from"zod";import{APIError as ve}from"better-call";var bo=m("/list-accounts",{method:"GET",use:[M],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId,createdAt:o.createdAt,updatedAt:o.updatedAt,accountId:o.accountId,scopes:o.scope?.split(",")||[]})))}),Oo=m("/link-social",{method:"POST",requireHeaders:!0,query:de.object({currentURL:de.string().optional()}).optional(),body:de.object({callbackURL:de.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:de.enum(De,{description:"The OAuth2 provider to use"})}),use:[M],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId===e.body.provider))throw new ve("BAD_REQUEST",{message:g.SOCIAL_ACCOUNT_ALREADY_LINKED});let n=e.context.socialProviders.find(d=>d.id===e.body.provider);if(!n)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new ve("NOT_FOUND",{message:g.PROVIDER_NOT_FOUND});let i=await Ie(e,{userId:t.user.id,email:t.user.email}),s=await n.createAuthorizationURL({state:i.state,codeVerifier:i.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${n.id}`});return e.json({url:s.toString(),redirect:!0})}),Ao=m("/unlink-account",{method:"POST",body:de.object({providerId:de.string()}),use:[bt]},async e=>{let t=await e.context.internalAdapter.findAccounts(e.context.session.user.id);if(t.length===1)throw new ve("BAD_REQUEST",{message:g.FAILED_TO_UNLINK_LAST_ACCOUNT});if(!t.find(o=>o.providerId===e.body.providerId))throw new ve("BAD_REQUEST",{message:g.ACCOUNT_NOT_FOUND});return await e.context.internalAdapter.deleteAccount(e.body.providerId,e.context.session.user.id),e.json({status:!0})});var Rt=(e,t)=>{let r={};for(let[o,n]of Object.entries(e))r[o]=i=>n({...i,context:{...t,...i.context}}),r[o].path=n.path,r[o].method=n.method,r[o].options=n.options,r[o].headers=n.headers;return r};function Tt(e){let t=e;return{newRole(r){return Eo(r)}}}function Eo(e){return{statements:e,authorize(t,r){for(let[o,n]of Object.entries(t)){let i=e[o];return i?(r==="OR"?n.some(d=>i.includes(d)):n.every(d=>i.includes(d)))?{success:!0}:{success:!1,error:`Unauthorized to access resource "${o}"`}:{success:!1,error:`You are not allowed to access resource: ${o}`}}return{success:!1,error:"Not authorized"}}}}var Ro={organization:["update","delete"],member:["create","update","delete"],invitation:["create","cancel"]},Ce=Tt(Ro),To=Ce.newRole({organization:["update"],invitation:["create","cancel"],member:["create","update","delete"]}),vo=Ce.newRole({organization:["update","delete"],member:["create","update","delete"],invitation:["create","cancel"]}),Uo=Ce.newRole({organization:[],member:[],invitation:[]}),vt={admin:To,owner:vo,member:Uo};var So={proto:/"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/,constructor:/"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/,protoShort:/"__proto__"\s*:/,constructorShort:/"constructor"\s*:/},ko=/^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/,Ut={true:!0,false:!1,null:null,undefined:void 0,nan:Number.NaN,infinity:Number.POSITIVE_INFINITY,"-infinity":Number.NEGATIVE_INFINITY},No=/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(?:\.(\d{1,7}))?(?:Z|([+-])(\d{2}):(\d{2}))$/;function Lo(e){return e instanceof Date&&!isNaN(e.getTime())}function Po(e){let t=No.exec(e);if(!t)return null;let[,r,o,n,i,s,d,a,c,l,p]=t,u=new Date(Date.UTC(parseInt(r,10),parseInt(o,10)-1,parseInt(n,10),parseInt(i,10),parseInt(s,10),parseInt(d,10),a?parseInt(a.padEnd(3,"0"),10):0));if(c){let y=(parseInt(l,10)*60+parseInt(p,10))*(c==="+"?-1:1);u.setUTCMinutes(u.getUTCMinutes()+y)}return Lo(u)?u:null}function zo(e,t={}){let{strict:r=!1,warnings:o=!1,reviver:n,parseDates:i=!0}=t;if(typeof e!="string")return e;let s=e.trim();if(s[0]==='"'&&s.endsWith('"')&&!s.slice(1,-1).includes('"'))return s.slice(1,-1);let d=s.toLowerCase();if(d.length<=9&&d in Ut)return Ut[d];if(!ko.test(s)){if(r)throw new SyntaxError("[better-json] Invalid JSON");return e}if(Object.entries(So).some(([c,l])=>{let p=l.test(s);return p&&o&&console.warn(`[better-json] Detected potential prototype pollution attempt using ${c} pattern`),p})&&r)throw new Error("[better-json] Potential prototype pollution attempt detected");try{return JSON.parse(s,(l,p)=>{if(l==="__proto__"||l==="constructor"&&p&&typeof p=="object"&&"prototype"in p){o&&console.warn(`[better-json] Dropping "${l}" key to prevent prototype pollution`);return}if(i&&typeof p=="string"){let u=Po(p);if(u)return u}return n?n(l,p):p})}catch(c){if(r)throw c;return e}}function Do(e,t={strict:!0}){return zo(e,t)}var St=Do;var S=(e,t)=>{let r=e.adapter;return{findOrganizationBySlug:async o=>await r.findOne({model:"organization",where:[{field:"slug",value:o}]}),createOrganization:async o=>{let n=await r.create({model:"organization",data:{...o.organization,metadata:o.organization.metadata?JSON.stringify(o.organization.metadata):void 0}}),i=await r.create({model:"member",data:{organizationId:n.id,userId:o.user.id,createdAt:new Date,role:t?.creatorRole||"owner"}});return{...n,metadata:n.metadata?JSON.parse(n.metadata):void 0,members:[{...i,user:{id:o.user.id,name:o.user.name,email:o.user.email,image:o.user.image}}]}},findMemberByEmail:async o=>{let n=await r.findOne({model:"user",where:[{field:"email",value:o.email}]});if(!n)return null;let i=await r.findOne({model:"member",where:[{field:"organizationId",value:o.organizationId},{field:"userId",value:n.id}]});return i?{...i,user:{id:n.id,name:n.name,email:n.email,image:n.image}}:null},findMemberByOrgId:async o=>{let[n,i]=await Promise.all([await r.findOne({model:"member",where:[{field:"userId",value:o.userId},{field:"organizationId",value:o.organizationId}]}),await r.findOne({model:"user",where:[{field:"id",value:o.userId}]})]);return!i||!n?null:{...n,user:{id:i.id,name:i.name,email:i.email,image:i.image}}},findMemberById:async o=>{let n=await r.findOne({model:"member",where:[{field:"id",value:o}]});if(!n)return null;let i=await r.findOne({model:"user",where:[{field:"id",value:n.userId}]});return i?{...n,user:{id:i.id,name:i.name,email:i.email,image:i.image}}:null},createMember:async o=>await r.create({model:"member",data:o}),updateMember:async(o,n)=>await r.update({model:"member",where:[{field:"id",value:o}],update:{role:n}}),deleteMember:async o=>await r.delete({model:"member",where:[{field:"id",value:o}]}),updateOrganization:async(o,n)=>{let i=await r.update({model:"organization",where:[{field:"id",value:o}],update:{...n,metadata:typeof n.metadata=="object"?JSON.stringify(n.metadata):n.metadata}});return i?{...i,metadata:i.metadata?St(i.metadata):void 0}:null},deleteOrganization:async o=>(await r.delete({model:"member",where:[{field:"organizationId",value:o}]}),await r.delete({model:"invitation",where:[{field:"organizationId",value:o}]}),await r.delete({model:"organization",where:[{field:"id",value:o}]}),o),setActiveOrganization:async(o,n)=>await e.internalAdapter.updateSession(o,{activeOrganizationId:n}),findOrganizationById:async o=>await r.findOne({model:"organization",where:[{field:"id",value:o}]}),findFullOrganization:async({organizationId:o,isSlug:n})=>{let i=await r.findOne({model:"organization",where:[{field:n?"slug":"id",value:o}]});if(!i)return null;let[s,d]=await Promise.all([r.findMany({model:"invitation",where:[{field:"organizationId",value:i.id}]}),r.findMany({model:"member",where:[{field:"organizationId",value:i.id}]})]);if(!i)return null;let a=d.map(u=>u.userId),c=await r.findMany({model:"user",where:[{field:"id",value:a,operator:"in"}]}),l=new Map(c.map(u=>[u.id,u])),p=d.map(u=>{let y=l.get(u.userId);if(!y)throw new Z("Unexpected error: User not found for member");return{...u,user:{id:y.id,name:y.name,email:y.email,image:y.image}}});return{...i,invitations:s,members:p}},listOrganizations:async o=>{let n=await r.findMany({model:"member",where:[{field:"userId",value:o}]});if(!n||n.length===0)return[];let i=n.map(d=>d.organizationId);return await r.findMany({model:"organization",where:[{field:"id",value:i,operator:"in"}]})},createInvitation:async({invitation:o,user:n})=>{let s=W(t?.invitationExpiresIn||1728e5);return await r.create({model:"invitation",data:{email:o.email,role:o.role,organizationId:o.organizationId,status:"pending",expiresAt:s,inviterId:n.id}})},findInvitationById:async o=>await r.findOne({model:"invitation",where:[{field:"id",value:o}]}),findPendingInvitation:async o=>(await r.findMany({model:"invitation",where:[{field:"email",value:o.email},{field:"organizationId",value:o.organizationId},{field:"status",value:"pending"}]})).filter(i=>new Date(i.expiresAt)>new Date),updateInvitation:async o=>await r.update({model:"invitation",where:[{field:"id",value:o.invitationId}],update:{status:o.status}})}};import"better-call";var N=ee(async e=>({})),C=ee({use:[M]},async e=>({session:e.context.session}));import{z as B}from"zod";import{z as R}from"zod";var kt=R.string(),xo=R.enum(["pending","accepted","rejected","canceled"]).default("pending"),il=R.object({id:R.string().default(J),name:R.string(),slug:R.string(),logo:R.string().nullish(),metadata:R.record(R.string()).or(R.string().transform(e=>JSON.parse(e))).nullish(),createdAt:R.date()}),sl=R.object({id:R.string().default(J),organizationId:R.string(),userId:R.string(),role:kt,createdAt:R.date()}),al=R.object({id:R.string().default(J),organizationId:R.string(),email:R.string(),role:kt,status:xo,inviterId:R.string(),expiresAt:R.date()});import{APIError as T}from"better-call";var f={YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_ORGANIZATION:"You are not allowed to create a new organization",YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_ORGANIZATIONS:"You have reached the maximum number of organizations",ORGANIZATION_ALREADY_EXISTS:"Organization already exists",ORGANIZATION_NOT_FOUND:"Organization not found",USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION:"User is not a member of the organization",YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_ORGANIZATION:"You are not allowed to update this organization",YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_ORGANIZATION:"You are not allowed to delete this organization",NO_ACTIVE_ORGANIZATION:"No active organization",USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION:"User is already a member of this organization",MEMBER_NOT_FOUND:"Member not found",ROLE_NOT_FOUND:"Role not found",YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER:"You cannot leave the organization as the only owner",YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_MEMBER:"You are not allowed to delete this member",YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION:"You are not allowed to invite users to this organization",USER_IS_ALREADY_INVITED_TO_THIS_ORGANIZATION:"User is already invited to this organization",INVITATION_NOT_FOUND:"Invitation not found",YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION:"You are not the recipient of the invitation",YOU_ARE_NOT_ALLOWED_TO_CANCEL_THIS_INVITATION:"You are not allowed to cancel this invitation",INVITER_IS_NO_LONGER_A_MEMBER_OF_THE_ORGANIZATION:"Inviter is no longer a member of the organization",YOU_ARE_NOT_ALLOWED_TO_INVITE_USER_WITH_THIS_ROLE:"you are not allowed to invite user with this role"};var Nt=e=>m("/organization/invite-member",{method:"POST",use:[N,C],body:B.object({email:B.string({description:"The email address of the user to invite"}),role:B.string({description:"The role to assign to the user"}),organizationId:B.string({description:"The organization ID to invite the user to"}).optional(),resend:B.boolean({description:"Resend the invitation email, if the user is already invited"}).optional()}),metadata:{openapi:{description:"Invite a user to an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string"},email:{type:"string"},role:{type:"string"},organizationId:{type:"string"},inviterId:{type:"string"},status:{type:"string"},expiresAt:{type:"string"}},required:["id","email","role","organizationId","inviterId","status","expiresAt"]}}}}}}}},async t=>{if(!t.context.orgOptions.sendInvitationEmail)throw t.context.logger.warn("Invitation email is not enabled. Pass `sendInvitationEmail` to the plugin options to enable it."),new T("BAD_REQUEST",{message:"Invitation email is not enabled"});let r=t.context.session,o=t.body.organizationId||r.session.activeOrganizationId;if(!o)throw new T("BAD_REQUEST",{message:f.ORGANIZATION_NOT_FOUND});let n=S(t.context,t.context.orgOptions),i=await n.findMemberByOrgId({userId:r.user.id,organizationId:o});if(!i)throw new T("BAD_REQUEST",{message:f.MEMBER_NOT_FOUND});let s=t.context.roles[i.role];if(!s)throw new T("BAD_REQUEST",{message:f.ROLE_NOT_FOUND});if(s.authorize({invitation:["create"]}).error)throw new T("FORBIDDEN",{message:f.YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION});let a=t.context.orgOptions.creatorRole||"owner";if(i.role!==a&&t.body.role===a)throw new T("FORBIDDEN",{message:f.YOU_ARE_NOT_ALLOWED_TO_INVITE_USER_WITH_THIS_ROLE});if(await n.findMemberByEmail({email:t.body.email,organizationId:o}))throw new T("BAD_REQUEST",{message:f.USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION});if((await n.findPendingInvitation({email:t.body.email,organizationId:o})).length&&!t.body.resend)throw new T("BAD_REQUEST",{message:f.USER_IS_ALREADY_INVITED_TO_THIS_ORGANIZATION});let p=await n.createInvitation({invitation:{role:t.body.role,email:t.body.email,organizationId:o},user:r.user}),u=await n.findOrganizationById(o);if(!u)throw new T("BAD_REQUEST",{message:f.ORGANIZATION_NOT_FOUND});return await t.context.orgOptions.sendInvitationEmail?.({id:p.id,role:p.role,email:p.email,organization:u,inviter:{...i,user:r.user}},t.request),t.json(p)}),Lt=m("/organization/accept-invitation",{method:"POST",body:B.object({invitationId:B.string({description:"The ID of the invitation to accept"})}),use:[N,C],metadata:{openapi:{description:"Accept an invitation to an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{invitation:{type:"object"},member:{type:"object"}}}}}}}}}},async e=>{let t=e.context.session,r=S(e.context,e.context.orgOptions),o=await r.findInvitationById(e.body.invitationId);if(!o||o.expiresAt<new Date||o.status!=="pending")throw new T("BAD_REQUEST",{message:f.INVITATION_NOT_FOUND});if(o.email!==t.user.email)throw new T("FORBIDDEN",{message:f.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION});let n=await r.updateInvitation({invitationId:e.body.invitationId,status:"accepted"}),i=await r.createMember({organizationId:o.organizationId,userId:t.user.id,role:o.role,createdAt:new Date});return await r.setActiveOrganization(t.session.token,o.organizationId),n?e.json({invitation:n,member:i}):e.json(null,{status:400,body:{message:f.INVITATION_NOT_FOUND}})}),Pt=m("/organization/reject-invitation",{method:"POST",body:B.object({invitationId:B.string({description:"The ID of the invitation to reject"})}),use:[N,C],metadata:{openapi:{description:"Reject an invitation to an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{invitation:{type:"object"},member:{type:"null"}}}}}}}}}},async e=>{let t=e.context.session,r=S(e.context,e.context.orgOptions),o=await r.findInvitationById(e.body.invitationId);if(!o||o.expiresAt<new Date||o.status!=="pending")throw new T("BAD_REQUEST",{message:"Invitation not found!"});if(o.email!==t.user.email)throw new T("FORBIDDEN",{message:f.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION});let n=await r.updateInvitation({invitationId:e.body.invitationId,status:"rejected"});return e.json({invitation:n,member:null})}),zt=m("/organization/cancel-invitation",{method:"POST",body:B.object({invitationId:B.string({description:"The ID of the invitation to cancel"})}),use:[N,C],openapi:{description:"Cancel an invitation to an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{invitation:{type:"object"}}}}}}}}},async e=>{let t=e.context.session,r=S(e.context,e.context.orgOptions),o=await r.findInvitationById(e.body.invitationId);if(!o)throw new T("BAD_REQUEST",{message:f.INVITATION_NOT_FOUND});let n=await r.findMemberByOrgId({userId:t.user.id,organizationId:o.organizationId});if(!n)throw new T("BAD_REQUEST",{message:f.MEMBER_NOT_FOUND});if(e.context.roles[n.role].authorize({invitation:["cancel"]}).error)throw new T("FORBIDDEN",{message:f.YOU_ARE_NOT_ALLOWED_TO_CANCEL_THIS_INVITATION});let s=await r.updateInvitation({invitationId:e.body.invitationId,status:"canceled"});return e.json(s)}),Dt=m("/organization/get-invitation",{method:"GET",use:[N],requireHeaders:!0,query:B.object({id:B.string({description:"The ID of the invitation to get"})}),metadata:{openapi:{description:"Get an invitation by ID",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string"},email:{type:"string"},role:{type:"string"},organizationId:{type:"string"},inviterId:{type:"string"},status:{type:"string"},expiresAt:{type:"string"},organizationName:{type:"string"},organizationSlug:{type:"string"},inviterEmail:{type:"string"}},required:["id","email","role","organizationId","inviterId","status","expiresAt","organizationName","organizationSlug","inviterEmail"]}}}}}}}},async e=>{let t=await D(e);if(!t)throw new T("UNAUTHORIZED",{message:"Not authenticated"});let r=S(e.context,e.context.orgOptions),o=await r.findInvitationById(e.query.id);if(!o||o.status!=="pending"||o.expiresAt<new Date)throw new T("BAD_REQUEST",{message:"Invitation not found!"});if(o.email!==t.user.email)throw new T("FORBIDDEN",{message:f.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION});let n=await r.findOrganizationById(o.organizationId);if(!n)throw new T("BAD_REQUEST",{message:f.ORGANIZATION_NOT_FOUND});let i=await r.findMemberByOrgId({userId:o.inviterId,organizationId:o.organizationId});if(!i)throw new T("BAD_REQUEST",{message:f.INVITER_IS_NO_LONGER_A_MEMBER_OF_THE_ORGANIZATION});return e.json({...o,organizationName:n.name,organizationSlug:n.slug,inviterEmail:i.user.email})});import{z as H}from"zod";import{APIError as ce}from"better-call";var xt=()=>m("/organization/add-member",{method:"POST",body:H.object({userId:H.string(),role:H.string(),organizationId:H.string().optional()}),use:[N],metadata:{SERVER_ONLY:!0}},async e=>{let t=e.body.userId?await D(e).catch(d=>null):null,r=e.body.organizationId||t?.session.activeOrganizationId;if(!r)return e.json(null,{status:400,body:{message:f.NO_ACTIVE_ORGANIZATION}});let o=S(e.context,e.context.orgOptions),n=await e.context.internalAdapter.findUserById(e.body.userId);if(!n)throw new ce("BAD_REQUEST",{message:g.USER_NOT_FOUND});if(await o.findMemberByEmail({email:n.email,organizationId:r}))throw new ce("BAD_REQUEST",{message:f.USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION});let s=await o.createMember({id:J(),organizationId:r,userId:n.id,role:e.body.role,createdAt:new Date});return e.json(s)}),Ct=m("/organization/remove-member",{method:"POST",body:H.object({memberIdOrEmail:H.string({description:"The ID or email of the member to remove"}),organizationId:H.string({description:"The ID of the organization to remove the member from. If not provided, the active organization will be used"}).optional()}),use:[N,C],metadata:{openapi:{description:"Remove a member from an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{member:{type:"object",properties:{id:{type:"string"},userId:{type:"string"},organizationId:{type:"string"},role:{type:"string"}},required:["id","userId","organizationId","role"]}},required:["member"]}}}}}}}},async e=>{let t=e.context.session,r=e.body.organizationId||t.session.activeOrganizationId;if(!r)return e.json(null,{status:400,body:{message:f.NO_ACTIVE_ORGANIZATION}});let o=S(e.context,e.context.orgOptions),n=await o.findMemberByOrgId({userId:t.user.id,organizationId:r});if(!n)throw new ce("BAD_REQUEST",{message:f.MEMBER_NOT_FOUND});let i=e.context.roles[n.role];if(!i)throw new ce("BAD_REQUEST",{message:f.ROLE_NOT_FOUND});let s=t.user.email===e.body.memberIdOrEmail||n.id===e.body.memberIdOrEmail;if(s&&n.role===(e.context.orgOptions?.creatorRole||"owner"))throw new ce("BAD_REQUEST",{message:f.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER});if(!(s||i.authorize({member:["delete"]}).success))throw new ce("UNAUTHORIZED",{message:f.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_MEMBER});let c=null;if(e.body.memberIdOrEmail.includes("@")?c=await o.findMemberByEmail({email:e.body.memberIdOrEmail,organizationId:r}):c=await o.findMemberById(e.body.memberIdOrEmail),c?.organizationId!==r)throw new ce("BAD_REQUEST",{message:f.MEMBER_NOT_FOUND});return await o.deleteMember(c.id),t.user.id===c.userId&&t.session.activeOrganizationId===c.organizationId&&await o.setActiveOrganization(t.session.token,null),e.json({member:c})}),jt=e=>m("/organization/update-member-role",{method:"POST",body:H.object({role:H.string(),memberId:H.string(),organizationId:H.string().optional()}),use:[N,C],metadata:{openapi:{description:"Update the role of a member in an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{member:{type:"object",properties:{id:{type:"string"},userId:{type:"string"},organizationId:{type:"string"},role:{type:"string"}},required:["id","userId","organizationId","role"]}},required:["member"]}}}}}}}},async t=>{let r=t.context.session,o=t.body.organizationId||r.session.activeOrganizationId;if(!o)return t.json(null,{status:400,body:{message:f.NO_ACTIVE_ORGANIZATION}});let n=S(t.context,t.context.orgOptions),i=await n.findMemberByOrgId({userId:r.user.id,organizationId:o});if(!i)return t.json(null,{status:400,body:{message:f.MEMBER_NOT_FOUND}});let s=t.context.roles[i.role];if(!s)return t.json(null,{status:400,body:{message:f.ROLE_NOT_FOUND}});if(s.authorize({member:["update"]}).error||t.body.role==="owner"&&i.role!=="owner")return t.json(null,{body:{message:"You are not allowed to update this member"},status:403});let a=await n.updateMember(t.body.memberId,t.body.role);return a?t.json(a):t.json(null,{status:400,body:{message:f.MEMBER_NOT_FOUND}})}),Mt=m("/organization/get-active-member",{method:"GET",use:[N,C],metadata:{openapi:{description:"Get the active member in the organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string"},userId:{type:"string"},organizationId:{type:"string"},role:{type:"string"}},required:["id","userId","organizationId","role"]}}}}}}}},async e=>{let t=e.context.session,r=t.session.activeOrganizationId;if(!r)return e.json(null,{status:400,body:{message:f.NO_ACTIVE_ORGANIZATION}});let n=await S(e.context,e.context.orgOptions).findMemberByOrgId({userId:t.user.id,organizationId:r});return n?e.json(n):e.json(null,{status:400,body:{message:f.MEMBER_NOT_FOUND}})});import{z as A}from"zod";import{APIError as G}from"better-call";var Bt=m("/organization/create",{method:"POST",body:A.object({name:A.string({description:"The name of the organization"}),slug:A.string({description:"The slug of the organization"}),userId:A.string({description:"The user id of the organization creator. If not provided, the current user will be used. Should only be used by admins or when called by the server."}).optional(),logo:A.string({description:"The logo of the organization"}).optional(),metadata:A.record(A.string(),A.any(),{description:"The metadata of the organization"}).optional()}),use:[N],metadata:{openapi:{description:"Create an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",description:"The organization that was created",$ref:"#/components/schemas/Organization"}}}}}}}},async e=>{let t=await D(e);if(!t&&(e.request||e.headers))throw new G("UNAUTHORIZED");let r=t?.user||null;if(!r){if(!e.body.userId)throw new G("UNAUTHORIZED");r=await e.context.internalAdapter.findUserById(e.body.userId)}if(!r)return e.json(null,{status:401});let o=e.context.orgOptions;if(!(typeof o?.allowUserToCreateOrganization=="function"?await o.allowUserToCreateOrganization(r):o?.allowUserToCreateOrganization===void 0?!0:o.allowUserToCreateOrganization))throw new G("FORBIDDEN",{message:f.YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_ORGANIZATION});let i=S(e.context,o),s=await i.listOrganizations(r.id);if(typeof o.organizationLimit=="number"?s.length>=o.organizationLimit:typeof o.organizationLimit=="function"?await o.organizationLimit(r):!1)throw new G("FORBIDDEN",{message:f.YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_ORGANIZATIONS});if(await i.findOrganizationBySlug(e.body.slug))throw new G("BAD_REQUEST",{message:f.ORGANIZATION_ALREADY_EXISTS});let c=await i.createOrganization({organization:{id:J(),slug:e.body.slug,name:e.body.name,logo:e.body.logo,createdAt:new Date,metadata:e.body.metadata},user:r});return e.context.session&&await i.setActiveOrganization(e.context.session.session.token,c.id),e.json(c)}),Vt=m("/organization/update",{method:"POST",body:A.object({data:A.object({name:A.string({description:"The name of the organization"}).optional(),slug:A.string({description:"The slug of the organization"}).optional(),logo:A.string({description:"The logo of the organization"}).optional(),metadata:A.record(A.string(),A.any(),{description:"The metadata of the organization"}).optional()}).partial(),organizationId:A.string().optional()}),requireHeaders:!0,use:[N],metadata:{openapi:{description:"Update an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",description:"The updated organization",$ref:"#/components/schemas/Organization"}}}}}}}},async e=>{let t=await e.context.getSession(e);if(!t)throw new G("UNAUTHORIZED",{message:"User not found"});let r=e.body.organizationId||t.session.activeOrganizationId;if(!r)return e.json(null,{status:400,body:{message:f.ORGANIZATION_NOT_FOUND}});let o=S(e.context,e.context.orgOptions),n=await o.findMemberByOrgId({userId:t.user.id,organizationId:r});if(!n)return e.json(null,{status:400,body:{message:f.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION}});let i=e.context.roles[n.role];if(!i)return e.json(null,{status:400,body:{message:"Role not found!"}});if(i.authorize({organization:["update"]}).error)return e.json(null,{body:{message:f.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_ORGANIZATION},status:403});let d=await o.updateOrganization(r,e.body.data);return e.json(d)}),$t=m("/organization/delete",{method:"POST",body:A.object({organizationId:A.string({description:"The organization id to delete"})}),requireHeaders:!0,use:[N],metadata:{openapi:{description:"Delete an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"string",description:"The organization id that was deleted"}}}}}}}},async e=>{let t=await e.context.getSession(e);if(!t)return e.json(null,{status:401});let r=e.body.organizationId;if(!r)return e.json(null,{status:400,body:{message:f.ORGANIZATION_NOT_FOUND}});let o=S(e.context,e.context.orgOptions),n=await o.findMemberByOrgId({userId:t.user.id,organizationId:r});if(!n)return e.json(null,{status:400,body:{message:f.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION}});let i=e.context.roles[n.role];if(!i)return e.json(null,{status:400,body:{message:"Role not found!"}});if(i.authorize({organization:["delete"]}).error)throw new G("FORBIDDEN",{message:f.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_ORGANIZATION});return r===t.session.activeOrganizationId&&await o.setActiveOrganization(t.session.token,null),await o.deleteOrganization(r),e.json(r)}),Ft=m("/organization/get-full-organization",{method:"GET",query:A.optional(A.object({organizationId:A.string({description:"The organization id to get"}).optional(),organizationSlug:A.string({description:"The organization slug to get"}).optional()})),requireHeaders:!0,use:[N,C],metadata:{openapi:{description:"Get the full organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",description:"The organization",$ref:"#/components/schemas/Organization"}}}}}}}},async e=>{let t=e.context.session,r=e.query?.organizationSlug||e.query?.organizationId||t.session.activeOrganizationId;if(!r)return e.json(null,{status:200});let n=await S(e.context,e.context.orgOptions).findFullOrganization({organizationId:r,isSlug:!!e.query?.organizationSlug});if(!n?.members.find(s=>s.userId===t.user.id))throw new G("FORBIDDEN",{message:f.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION});if(!n)throw new G("BAD_REQUEST",{message:f.ORGANIZATION_NOT_FOUND});return e.json(n)}),qt=m("/organization/set-active",{method:"POST",body:A.object({organizationId:A.string({description:"The organization id to set as active. It can be null to unset the active organization"}).nullable().optional(),organizationSlug:A.string({description:"The organization slug to set as active. It can be null to unset the active organization if organizationId is not provided"}).optional()}),use:[C,N],metadata:{openapi:{description:"Set the active organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",description:"The organization",$ref:"#/components/schemas/Organization"}}}}}}}},async e=>{let t=S(e.context,e.context.orgOptions),r=e.context.session,o=e.body.organizationSlug||e.body.organizationId;if(o===null){if(!r.session.activeOrganizationId)return e.json(null);let a=await t.setActiveOrganization(r.session.token,null);return await z(e,{session:a,user:r.user}),e.json(null)}if(!o){let d=r.session.activeOrganizationId;if(!d)return e.json(null);o=d}let n=await t.findFullOrganization({organizationId:o,isSlug:!!e.body.organizationSlug});if(!n?.members.find(d=>d.userId===r.user.id))throw await t.setActiveOrganization(r.session.token,null),new G("FORBIDDEN",{message:f.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION});if(!n)throw new G("BAD_REQUEST",{message:f.ORGANIZATION_NOT_FOUND});let s=await t.setActiveOrganization(r.session.token,n.id);return await z(e,{session:s,user:r.user}),e.json(n)}),Ht=m("/organization/list",{method:"GET",use:[N,C],metadata:{openapi:{description:"List all organizations",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{$ref:"#/components/schemas/Organization"}}}}}}}}},async e=>{let r=await S(e.context,e.context.orgOptions).listOrganizations(e.context.session.user.id);return e.json(r)});var Kl=e=>{let t={createOrganization:Bt,updateOrganization:Vt,deleteOrganization:$t,setActiveOrganization:qt,getFullOrganization:Ft,listOrganizations:Ht,createInvitation:Nt(e),cancelInvitation:zt,acceptInvitation:Lt,getInvitation:Dt,rejectInvitation:Pt,addMember:xt(),removeMember:Ct,updateMemberRole:jt(e),getActiveMember:Mt},r={...vt,...e?.roles};return{id:"organization",endpoints:{...Rt(t,{orgOptions:e||{},roles:r,getSession:async n=>await D(n)}),hasPermission:m("/organization/has-permission",{method:"POST",requireHeaders:!0,body:pe.object({organizationId:pe.string().optional(),permission:pe.record(pe.string(),pe.array(pe.string()))}),use:[C],metadata:{openapi:{description:"Check if the user has permission",requestBody:{content:{"application/json":{schema:{type:"object",properties:{permission:{type:"object",description:"The permission to check"}},required:["permission"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{error:{type:"string"},success:{type:"boolean"}},required:["success"]}}}}}}}},async n=>{if(!n.body.permission||Object.keys(n.body.permission).length>1)throw new je("BAD_REQUEST",{message:"invalid permission check. you can only check one resource permission at a time."});let i=n.body.organizationId||n.context.session.session.activeOrganizationId;if(!i)throw new je("BAD_REQUEST",{message:f.NO_ACTIVE_ORGANIZATION});let d=await S(n.context).findMemberByOrgId({userId:n.context.session.user.id,organizationId:i});if(!d)throw new je("UNAUTHORIZED",{message:f.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION});let c=r[d.role].authorize(n.body.permission);return c.error?n.json({error:c.error,success:!1},{status:403}):n.json({error:null,success:!0})})},schema:{session:{fields:{activeOrganizationId:{type:"string",required:!1,fieldName:e?.schema?.session?.fields?.activeOrganizationId}}},organization:{modelName:e?.schema?.organization?.modelName,fields:{name:{type:"string",required:!0,fieldName:e?.schema?.organization?.fields?.name},slug:{type:"string",unique:!0,fieldName:e?.schema?.organization?.fields?.slug},logo:{type:"string",required:!1,fieldName:e?.schema?.organization?.fields?.logo},createdAt:{type:"date",required:!0,fieldName:e?.schema?.organization?.fields?.createdAt},metadata:{type:"string",required:!1,fieldName:e?.schema?.organization?.fields?.metadata}}},member:{modelName:e?.schema?.member?.modelName,fields:{organizationId:{type:"string",required:!0,references:{model:"organization",field:"id"},fieldName:e?.schema?.member?.fields?.organizationId},userId:{type:"string",required:!0,fieldName:e?.schema?.member?.fields?.userId,references:{model:"user",field:"id"}},role:{type:"string",required:!0,defaultValue:"member",fieldName:e?.schema?.member?.fields?.role},createdAt:{type:"date",required:!0,fieldName:e?.schema?.member?.fields?.createdAt}}},invitation:{modelName:e?.schema?.invitation?.modelName,fields:{organizationId:{type:"string",required:!0,references:{model:"organization",field:"id"},fieldName:e?.schema?.invitation?.fields?.organizationId},email:{type:"string",required:!0,fieldName:e?.schema?.invitation?.fields?.email},role:{type:"string",required:!1,fieldName:e?.schema?.invitation?.fields?.role},status:{type:"string",required:!0,defaultValue:"pending",fieldName:e?.schema?.invitation?.fields?.status},expiresAt:{type:"date",required:!0,fieldName:e?.schema?.invitation?.fields?.expiresAt},inviterId:{type:"string",references:{model:"user",field:"id"},fieldName:e?.schema?.invitation?.fields?.inviterId,required:!0}}}},$Infer:{Organization:{},Invitation:{},Member:{},ActiveOrganization:{}},$ERROR_CODES:f}};export{Kl as organization};
