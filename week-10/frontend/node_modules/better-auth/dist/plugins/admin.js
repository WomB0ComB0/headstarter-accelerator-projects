import{z as f}from"zod";import{APIError as Pd,createRouter as xd,getCookie as Dd,getSignedCookie as Cd,setCookie as jd,setSignedCookie as Nd}from"better-call";import{APIError as De}from"better-call";import{createEndpointCreator as yt,createMiddleware as ve,createMiddlewareCreator as wt}from"better-call";var Ie=ve(async()=>({})),z=wt({use:[Ie,ve(async()=>({}))]}),l=yt({use:[Ie]});function we(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function bt(e){let t="";for(let r=0;r<e.length;r++)t+=we(e[r]);return t}function Le(e,t=!0){if(Array.isArray(e))return`(?:${e.map(u=>`^${Le(u,t)}$`).join("|")})`;let r="",n="",o=".";t===!0?(r="/",n="[/\\\\]",o="[^/\\\\]"):t&&(r=t,n=bt(r),n.length>1?(n=`(?:${n})`,o=`((?!${n}).)`):o=`[^${n}]`);let s=t?`${n}+?`:"",i=t?`${n}*?`:"",d=t?e.split(r):[e],a="";for(let c=0;c<d.length;c++){let u=d[c],h=d[c+1],m="";if(!(!u&&c>0)){if(t&&(c===d.length-1?m=i:h!=="**"?m=s:m=""),t&&u==="**"){m&&(a+=c===0?"":m,a+=`(?:${o}*?${m})*?`);continue}for(let A=0;A<u.length;A++){let b=u[A];b==="\\"?A<u.length-1&&(a+=we(u[A+1]),A++):b==="?"?a+=o:b==="*"?a+=`${o}*?`:a+=we(b)}a+=m}}return a}function At(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}function ce(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=Le(e,t.separator),n=new RegExp(`^${r}$`,t.flags),o=At.bind(null,n);return o.options=t,o.pattern=e,o.regexp=n,o}var ue=Object.create(null),ne=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ue:globalThis),Pe=new Proxy(ue,{get(e,t){return ne()[t]??ue[t]},has(e,t){let r=ne();return t in r||t in ue},set(e,t,r){let n=ne(!0);return n[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=ne(!0);return delete r[t],!0},ownKeys(){let e=ne(!0);return Object.keys(e)}});function Rt(e){return e?e!=="false":!1}var be=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var Ae=be==="dev"||be==="development",Et=be==="test"||Rt(Pe.TEST);var Z=class extends Error{constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function le(e){try{return new URL(e).origin}catch{return null}}function xe(e){try{return new URL(e).protocol}catch{return null}}function Re(e){return e.includes("://")?new URL(e).host:e}var Ut=z(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:n}=e,o=e.headers?.get("origin")||e.headers?.get("referer")||"",s=t?.callbackURL||r?.callbackURL,i=t?.redirectTo,d=r?.currentURL,a=t?.errorCallbackURL,c=t?.newUserCallbackURL,u=n.trustedOrigins,h=e.headers?.has("cookie"),m=(b,S)=>{if(b.startsWith("/"))return!1;if(S.includes("*"))return ce(S)(Re(b));let Q=xe(b);return Q==="http:"||Q==="https:"||!Q?S===le(b):b.startsWith(S)},A=(b,S)=>{if(!b)return;if(!u.some(re=>m(b,re)||b?.startsWith("/")&&S!=="origin"&&!b.includes(":")))throw e.context.logger.error(`Invalid ${S}: ${b}`),e.context.logger.info(`If it's a valid URL, please add ${b} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${u}`),new De("FORBIDDEN",{message:`Invalid ${S}`})};h&&!e.context.options.advanced?.disableCSRFCheck&&A(o,"origin"),s&&A(s,"callbackURL"),i&&A(i,"redirectURL"),d&&A(d,"currentURL"),a&&A(a,"errorCallbackURL"),c&&A(c,"newUserCallbackURL")}),ee=e=>z(async t=>{let{context:r}=t,n=e(t),o=r.trustedOrigins,s=(d,a)=>d.startsWith("/")?!1:a.includes("*")?ce(a)(Re(d)):d.startsWith(a);n&&((d,a)=>{if(!d)return;if(!o.some(u=>s(d,u)||d?.startsWith("/")&&a!=="origin"&&!d.includes(":")))throw t.context.logger.error(`Invalid ${a}: ${d}`),t.context.logger.info(`If it's a valid URL, please add ${d} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${o}`),new De("FORBIDDEN",{message:`Invalid ${a}`})})(n,"callbackURL")});import{APIError as L}from"better-call";import{z as k}from"zod";var x=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));import{base64Url as kt}from"@better-auth/utils/base64";import{createHMAC as Tt}from"@better-auth/utils/hmac";async function Ee(e,t){if(e.context.options.session?.cookieCache?.enabled){let n=kt.encode(JSON.stringify({session:t,expiresAt:x(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await Tt("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(n.length>4093)throw new Z("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,n,e.context.authCookies.sessionData.options)}}async function v(e,t,r,n){let o=e.context.authCookies.sessionToken.options,s=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...o,maxAge:s,...n}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await Ee(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}function C(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}var _t=Object.defineProperty,St=Object.defineProperties,Ot=Object.getOwnPropertyDescriptors,Ce=Object.getOwnPropertySymbols,vt=Object.prototype.hasOwnProperty,It=Object.prototype.propertyIsEnumerable,je=(e,t,r)=>t in e?_t(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,J=(e,t)=>{for(var r in t||(t={}))vt.call(t,r)&&je(e,r,t[r]);if(Ce)for(var r of Ce(t))It.call(t,r)&&je(e,r,t[r]);return e},K=(e,t)=>St(e,Ot(t)),Lt=class extends Error{constructor(e,t,r){super(t||e.toString(),{cause:r}),this.status=e,this.statusText=t,this.error=r}},Pt=async(e,t)=>{var r,n,o,s,i,d;let a=t||{},c={onRequest:[t?.onRequest],onResponse:[t?.onResponse],onSuccess:[t?.onSuccess],onError:[t?.onError],onRetry:[t?.onRetry]};if(!t||!t?.plugins)return{url:e,options:a,hooks:c};for(let u of t?.plugins||[]){if(u.init){let h=await((r=u.init)==null?void 0:r.call(u,e.toString(),t));a=h.options||a,e=h.url}c.onRequest.push((n=u.hooks)==null?void 0:n.onRequest),c.onResponse.push((o=u.hooks)==null?void 0:o.onResponse),c.onSuccess.push((s=u.hooks)==null?void 0:s.onSuccess),c.onError.push((i=u.hooks)==null?void 0:i.onError),c.onRetry.push((d=u.hooks)==null?void 0:d.onRetry)}return{url:e,options:a,hooks:c}},Ne=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(){return this.options.delay}},xt=class{constructor(e){this.options=e}shouldAttemptRetry(e,t){return this.options.shouldRetry?Promise.resolve(e<this.options.attempts&&this.options.shouldRetry(t)):Promise.resolve(e<this.options.attempts)}getDelay(e){return Math.min(this.options.maxDelay,this.options.baseDelay*2**e)}};function Dt(e){if(typeof e=="number")return new Ne({type:"linear",attempts:e,delay:1e3});switch(e.type){case"linear":return new Ne(e);case"exponential":return new xt(e);default:throw new Error("Invalid retry strategy")}}var Ct=e=>{let t={},r=n=>typeof n=="function"?n():n;if(e?.auth){if(e.auth.type==="Bearer"){let n=r(e.auth.token);if(!n)return t;t.authorization=`Bearer ${n}`}else if(e.auth.type==="Basic"){let n=r(e.auth.username),o=r(e.auth.password);if(!n||!o)return t;t.authorization=`Basic ${btoa(`${n}:${o}`)}`}else if(e.auth.type==="Custom"){let n=r(e.auth.value);if(!n)return t;t.authorization=`${r(e.auth.prefix)} ${n}`}}return t},Ve=["get","post","put","patch","delete"];var jt=/^application\/(?:[\w!#$%&*.^`~-]*\+)?json(;.+)?$/i;function Nt(e){let t=e.headers.get("content-type"),r=new Set(["image/svg","application/xml","application/xhtml","application/html"]);if(!t)return"json";let n=t.split(";").shift()||"";return jt.test(n)?"json":r.has(n)||n.startsWith("text/")?"text":"blob"}function Bt(e){try{return JSON.parse(e),!0}catch{return!1}}function qe(e){if(e===void 0)return!1;let t=typeof e;return t==="string"||t==="number"||t==="boolean"||t===null?!0:t!=="object"?!1:Array.isArray(e)?!0:e.buffer?!1:e.constructor&&e.constructor.name==="Object"||typeof e.toJSON=="function"}function Be(e){try{return JSON.parse(e)}catch{return e}}function $e(e){return typeof e=="function"}function $t(e){if(e?.customFetchImpl)return e.customFetchImpl;if(typeof globalThis<"u"&&$e(globalThis.fetch))return globalThis.fetch;if(typeof window<"u"&&$e(window.fetch))return window.fetch;throw new Error("No fetch implementation found")}function Vt(e){let t=new Headers(e?.headers),r=Ct(e);for(let[n,o]of Object.entries(r||{}))t.set(n,o);if(!t.has("content-type")){let n=qt(e?.body);n&&t.set("content-type",n)}return t}function qt(e){return qe(e)?"application/json":null}function Mt(e){if(!e?.body)return null;let t=new Headers(e?.headers);return qe(e.body)&&!t.has("content-type")?JSON.stringify(e.body):e.body}function Ft(e,t){var r;if(t?.method)return t.method.toUpperCase();if(e.startsWith("@")){let n=(r=e.split("@")[1])==null?void 0:r.split("/")[0];return Ve.includes(n)?n.toUpperCase():t?.body?"POST":"GET"}return t?.body?"POST":"GET"}function zt(e,t){let r;return!e?.signal&&e?.timeout&&(r=setTimeout(()=>t?.abort(),e?.timeout)),{abortTimeout:r,clearTimeout:()=>{r&&clearTimeout(r)}}}function Ht(e,t){let{baseURL:r,params:n,query:o}=t||{query:{},params:{},baseURL:""},s=e.startsWith("http")?e.split("/").slice(0,3).join("/"):r;if(!s)throw new TypeError(`Invalid URL ${e}. Are you passing in a relative URL but not setting the baseURL?`);if(e.startsWith("@")){let h=e.toString().split("@")[1].split("/")[0];Ve.includes(h)&&(e=e.replace(`@${h}/`,"/"))}s.endsWith("/")||(s+="/");let[i,d]=e.replace(s,"").split("?"),a=new URLSearchParams(d);for(let[h,m]of Object.entries(o||{}))a.set(h,String(m));if(n)if(Array.isArray(n)){let h=i.split("/").filter(m=>m.startsWith(":"));for(let[m,A]of h.entries()){let b=n[m];i=i.replace(A,b)}}else for(let[h,m]of Object.entries(n))i=i.replace(`:${h}`,String(m));i=i.split("/").map(encodeURIComponent).join("/"),i.startsWith("/")&&(i=i.slice(1));let c=a.size>0?`?${a}`.replace(/\+/g,"%20"):"";return new URL(`${i}${c}`,s)}var w=async(e,t)=>{var r,n,o,s,i,d,a,c;let{hooks:u,url:h,options:m}=await Pt(e,t),A=$t(m),b=new AbortController,S=(r=m.signal)!=null?r:b.signal,Q=Ht(h,m),re=Mt(m),oe=Vt(m),P=Ft(h,m),y=K(J({},m),{url:Q,headers:oe,body:re,method:P,signal:S});for(let D of u.onRequest)if(D){let O=await D(y);O instanceof Object&&(y=O)}("pipeTo"in y&&typeof y.pipeTo=="function"||typeof((n=t?.body)==null?void 0:n.pipe)=="function")&&("duplex"in y||(y.duplex="half"));let{clearTimeout:_e}=zt(m,b),E=await A(y.url,y);_e();let Se={response:E,request:y};for(let D of u.onResponse)if(D){let O=await D(K(J({},Se),{response:(o=t?.hookOptions)!=null&&o.cloneResponse?E.clone():E}));O instanceof Response?E=O:O instanceof Object&&(E=O.response)}if(E.ok){if(!(y.method!=="HEAD"))return{data:"",error:null};let O=Nt(E),M={data:"",response:E,request:y};if(O==="json"||O==="text"){let F=await E.text(),gt=await((s=y.jsonParser)!=null?s:Be)(F);M.data=gt}else M.data=await E[O]();y?.output&&y.output&&!y.disableValidation&&(M.data=y.output.parse(M.data));for(let F of u.onSuccess)F&&await F(K(J({},M),{response:(i=t?.hookOptions)!=null&&i.cloneResponse?E.clone():E}));return t?.throw?M.data:{data:M.data,error:null}}let ft=(d=t?.jsonParser)!=null?d:Be,Oe=await E.text(),ye=Bt(Oe)?await ft(Oe):{},ht={response:E,request:y,error:K(J({},ye),{status:E.status,statusText:E.statusText})};for(let D of u.onError)D&&await D(K(J({},ht),{response:(a=t?.hookOptions)!=null&&a.cloneResponse?E.clone():E}));if(t?.retry){let D=Dt(t.retry),O=(c=t.retryAttempt)!=null?c:0;if(await D.shouldAttemptRetry(O,E)){for(let F of u.onRetry)F&&await F(Se);let M=D.getDelay(O);return await new Promise(F=>setTimeout(F,M)),await w(e,K(J({},t),{retryAttempt:O+1}))}}if(t?.throw)throw new Lt(E.status,E.statusText,ye);return{data:null,error:K(J({},ye),{status:E.status,statusText:E.statusText})}};import{APIError as Kt}from"better-call";import{decodeJwt as Yt,decodeProtectedHeader as Xt,importJWK as er,jwtVerify as tr}from"jose";import{createHash as Wt}from"@better-auth/utils/hash";import{base64Url as Gt}from"@better-auth/utils/base64";async function Me(e){let t=await Wt("SHA-256").digest(e);return Gt.encode(new Uint8Array(t),{padding:!1})}function pe(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?x(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function U({id:e,options:t,authorizationEndpoint:r,state:n,codeVerifier:o,scopes:s,claims:i,redirectURI:d,duration:a}){let c=new URL(r);if(c.searchParams.set("response_type","code"),c.searchParams.set("client_id",t.clientId),c.searchParams.set("state",n),c.searchParams.set("scope",s.join(" ")),c.searchParams.set("redirect_uri",t.redirectURI||d),o){let u=await Me(o);c.searchParams.set("code_challenge_method","S256"),c.searchParams.set("code_challenge",u)}if(i){let u=i.reduce((h,m)=>(h[m]=null,h),{});c.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...u}}))}return a&&c.searchParams.set("duration",a),c}import{jwtVerify as Co}from"jose";async function R({code:e,codeVerifier:t,redirectURI:r,options:n,tokenEndpoint:o,authentication:s}){let i=new URLSearchParams,d={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(i.set("grant_type","authorization_code"),i.set("code",e),t&&i.set("code_verifier",t),i.set("redirect_uri",r),s==="basic"){let h=btoa(`${n.clientId}:${n.clientSecret}`);d.authorization=`Basic ${h}`}else i.set("client_id",n.clientId),i.set("client_secret",n.clientSecret);let{data:a,error:c}=await w(o,{method:"POST",body:i,headers:d});if(c)throw c;return pe(a)}import{z as H}from"zod";import{APIError as ze}from"better-call";import{createHash as tn}from"@better-auth/utils/hash";import{xchacha20poly1305 as on}from"@noble/ciphers/chacha";import{bytesToHex as sn,hexToBytes as an,utf8ToBytes as dn}from"@noble/ciphers/utils";import{managedNonce as un}from"@noble/ciphers/webcrypto";import{createHash as Vo}from"@better-auth/utils/hash";import{SignJWT as Zt}from"jose";async function Fe(e,t,r=3600){return await new Zt(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}import{scryptAsync as Wo}from"@noble/hashes/scrypt";import{getRandomValues as Qo}from"uncrypto";import{hex as Jo}from"@better-auth/utils/hex";import{createRandomStringGenerator as Jt}from"@better-auth/utils/random";var se=Jt("a-z","0-9","A-Z","-_");async function me(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?le(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new ze("BAD_REQUEST",{message:"callbackURL is required"});let n=se(128),o=se(32),s=JSON.stringify({callbackURL:r,codeVerifier:n,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),i=new Date;i.setMinutes(i.getMinutes()+10);let d=await e.context.internalAdapter.createVerificationValue({value:s,identifier:o,expiresAt:i});if(!d)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new ze("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:d.identifier,codeVerifier:n}}async function He(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let n=H.object({callbackURL:H.string(),codeVerifier:H.string(),errorURL:H.string().optional(),newUserURL:H.string().optional(),expiresAt:H.number(),link:H.object({email:H.string(),userId:H.string()}).optional()}).parse(JSON.parse(r.value));if(n.errorURL||(n.errorURL=`${e.context.baseURL}/error`),n.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),n}var We=e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:n,redirectURI:o}){let s=n||["email","name"];return e.scope&&s.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||o}&scope=${s.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:async({code:r,codeVerifier:n,redirectURI:o})=>R({code:r,codeVerifier:n,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async verifyIdToken(r,n){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,n);let o=Xt(r),{kid:s,alg:i}=o;if(!s||!i)return!1;let d=await rr(s),{payload:a}=await tr(r,d,{algorithms:[i],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(c=>{a[c]!==void 0&&(a[c]=!!a[c])}),n&&a.nonce!==n?!1:!!a},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let n=Yt(r.idToken);if(!n)return null;let o=n.user?`${n.user.name.firstName} ${n.user.name.lastName}`:n.email,s=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:o,emailVerified:!1,email:n.email,...s},data:n}}}},rr=async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:n}=await w(`${t}${r}`);if(!n?.keys)throw new Kt("BAD_REQUEST",{message:"Keys not found"});let o=n.keys.find(s=>s.kid===e);if(!o)throw new Error(`JWK with kid ${e} not found`);return await er(o,o.alg)};var Ge=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:n}){let o=r||["identify","email"];return e.scope&&o.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${o.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||n)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>R({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:n}=await w("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(n)return null;if(r.avatar===null){let s=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${s}.png`}else{let s=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${s}`}let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...o},data:r}}});var Qe=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:n}){let o=r||["email","public_profile"];return e.scope&&o.push(...e.scope),await U({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:o,state:t,redirectURI:n})},validateAuthorizationCode:async({code:t,redirectURI:r})=>R({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=["id","name","email","picture",...e?.fields||[]],{data:n,error:o}=await w("https://graph.facebook.com/me?fields="+r.join(","),{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let s=await e.mapProfileToUser?.(n);return{user:{id:n.id,name:n.name,email:n.email,image:n.picture.data.url,emailVerified:n.email_verified,...s},data:n}}});var Ze=e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:n,codeVerifier:o,redirectURI:s}){let i=n||["user:email"];return e.scope&&i.push(...e.scope),U({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:i,state:r,redirectURI:s})},validateAuthorizationCode:async({code:r,redirectURI:n})=>R({code:r,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:n,error:o}=await w("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(o)return null;let s=!1,{data:i}=await w("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});i&&(n.email=(i.find(a=>a.primary)??i[0])?.email,s=i.find(a=>a.email===n.email)?.verified??!1);let d=await e.mapProfileToUser?.(n);return{user:{id:n.id.toString(),name:n.name||n.login,email:n.email,image:n.avatar_url,emailVerified:s,...d},data:n}}}};import{decodeJwt as ar}from"jose";var Ue=["info","success","warn","error","debug"];function or(e,t){return Ue.indexOf(t)<=Ue.indexOf(e)}var V={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},nr={info:V.fg.blue,success:V.fg.green,warn:V.fg.yellow,error:V.fg.red,debug:V.fg.magenta},sr=(e,t)=>{let r=new Date().toISOString();return`${V.dim}${r}${V.reset} ${nr[e]}${e.toUpperCase()}${V.reset} ${V.bright}[Better Auth]:${V.reset} ${t}`},ir=e=>{let t=e?.disabled!==!0,r=e?.level??"error",n=(o,s,i=[])=>{if(!t||!or(r,o))return;let d=sr(o,s);if(!e||typeof e.log!="function"){o==="error"?console.error(d,...i):o==="warn"?console.warn(d,...i):console.log(d,...i);return}e.log(o==="success"?"info":o,s,...i)};return Object.fromEntries(Ue.map(o=>[o,(...[s,...i])=>n(o,s,i)]))},N=ir();var Je=e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:n,redirectURI:o}){if(!e.clientId||!e.clientSecret)throw N.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new Z("CLIENT_ID_AND_SECRET_REQUIRED");if(!n)throw new Z("codeVerifier is required for Google");let s=r||["email","profile","openid"];e.scope&&s.push(...e.scope);let i=await U({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:s,state:t,codeVerifier:n,redirectURI:o});return e.accessType&&i.searchParams.set("access_type",e.accessType),e.prompt&&i.searchParams.set("prompt",e.prompt),e.display&&i.searchParams.set("display",e.display),e.hd&&i.searchParams.set("hd",e.hd),i},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:n})=>R({code:t,codeVerifier:r,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let n=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:o}=await w(n);return o?o.aud===e.clientId&&o.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=ar(t.idToken),n=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...n},data:r}}});import{decodeJwt as dr}from"jose";var Ke=e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,n=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(o){let s=o.scopes||["openid","profile","email","User.Read"];return e.scope&&s.push(...e.scope),U({id:"microsoft",options:e,authorizationEndpoint:r,state:o.state,codeVerifier:o.codeVerifier,scopes:s,redirectURI:o.redirectURI})},validateAuthorizationCode({code:o,codeVerifier:s,redirectURI:i}){return R({code:o,codeVerifier:s,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:n})},async getUserInfo(o){if(e.getUserInfo)return e.getUserInfo(o);if(!o.idToken)return null;let s=dr(o.idToken),i=e.profilePhotoSize||48;await w(`https://graph.microsoft.com/v1.0/me/photos/${i}x${i}/$value`,{headers:{Authorization:`Bearer ${o.accessToken}`},async onResponse(a){if(!(e.disableProfilePhoto||!a.response.ok))try{let u=await a.response.clone().arrayBuffer(),h=Buffer.from(u).toString("base64");s.picture=`data:image/jpeg;base64, ${h}`}catch(c){N.error(c&&typeof c=="object"&&"name"in c?c.name:"",c)}}});let d=await e.mapProfileToUser?.(s);return{user:{id:s.sub,name:s.name,email:s.email,image:s.picture,emailVerified:!0,...d},data:s}}}};var Ye=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:n,redirectURI:o}){let s=r||["user-read-email"];return e.scope&&s.push(...e.scope),U({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:s,state:t,codeVerifier:n,redirectURI:o})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:n})=>R({code:t,codeVerifier:r,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:n}=await w("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(n)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...o},data:r}}});var te={isAction:!1};import{createRandomStringGenerator as cr}from"@better-auth/utils/random";var Xe=e=>cr("a-z","A-Z","0-9")(e||32);import{decodeJwt as ur}from"jose";var et=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:n}){let o=r||["user:read:email","openid"];return e.scope&&o.push(...e.scope),U({id:"twitch",redirectURI:n,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:o,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:t,redirectURI:r})=>R({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return N.error("No idToken found in token"),null;let n=ur(r),o=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.preferred_username,email:n.email,image:n.picture,emailVerified:!1,...o},data:n}}});var tt=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),U({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:n})=>R({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||n,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:n}=await w("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(n)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...o},data:r}}});var rt=e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:r,scopes:n,codeVerifier:o,redirectURI:s})=>{let i=n||["account_info.read"];return e.scope&&i.push(...e.scope),await U({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:i,state:r,redirectURI:s,codeVerifier:o})},validateAuthorizationCode:async({code:r,codeVerifier:n,redirectURI:o})=>await R({code:r,codeVerifier:n,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:n,error:o}=await w("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(o)return null;let s=await e.mapProfileToUser?.(n);return{user:{id:n.account_id,name:n.name?.display_name,email:n.email,emailVerified:n.email_verified||!1,image:n.profile_photo_url,...s},data:n}}}};var ot=e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:n,scopes:o,redirectURI:s})=>{let i=o||["profile","email","openid"];return e.scope&&i.push(...e.scope),await U({id:"linkedin",options:e,authorizationEndpoint:t,scopes:i,state:n,redirectURI:s})},validateAuthorizationCode:async({code:n,redirectURI:o})=>await R({code:n,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:r}),async getUserInfo(n){let{data:o,error:s}=await w("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${n.accessToken}`}});if(s)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.name,email:o.email,emailVerified:o.email_verified||!1,image:o.picture,...i},data:o}}}};var ke=(e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),lr=e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:ke(`${t}/oauth/authorize`),tokenEndpoint:ke(`${t}/oauth/token`),userinfoEndpoint:ke(`${t}/api/v4/user`)}},nt=e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:n}=lr(e.issuer),o="gitlab";return{id:o,name:"Gitlab",createAuthorizationURL:async({state:i,scopes:d,codeVerifier:a,redirectURI:c})=>{let u=d||["read_user"];return e.scope&&u.push(...e.scope),await U({id:o,options:e,authorizationEndpoint:t,scopes:u,state:i,redirectURI:c,codeVerifier:a})},validateAuthorizationCode:async({code:i,redirectURI:d,codeVerifier:a})=>R({code:i,redirectURI:e.redirectURI||d,options:e,codeVerifier:a,tokenEndpoint:r}),async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);let{data:d,error:a}=await w(n,{headers:{authorization:`Bearer ${i.accessToken}`}});if(a||d.state!=="active"||d.locked)return null;let c=await e.mapProfileToUser?.(d);return{user:{id:d.id.toString(),name:d.name??d.username,email:d.email,image:d.avatar_url,emailVerified:!0,...c},data:d}}}};var st=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:n}){let o=r||["identity"];return e.scope&&o.push(...e.scope),U({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:o,state:t,redirectURI:n,duration:e.duration})},validateAuthorizationCode:async({code:t,redirectURI:r})=>{let n=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),o={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:s,error:i}=await w("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:o,body:n.toString()});if(i)throw i;return pe(s)},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:n}=await w("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(n)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...o},data:r}}});import{z as pr}from"zod";var mr={apple:We,discord:Ge,facebook:Qe,github:Ze,microsoft:Ke,google:Je,spotify:Ye,twitch:et,twitter:tt,dropbox:rt,linkedin:ot,gitlab:nt,reddit:st},Te=Object.keys(mr),it=pr.enum(Te,{description:"OAuth2 provider to use"});import{z as $}from"zod";import{APIError as ie}from"better-call";import{APIError as W}from"better-call";import{z as Y}from"zod";function at(e){try{return JSON.parse(e)}catch{return null}}var p={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action.",FAILED_TO_UNLINK_LAST_ACCOUNT:"You can't unlink your last account",ACCOUNT_NOT_FOUND:"Account not found"};import{createHMAC as fr}from"@better-auth/utils/hmac";import{base64 as hr}from"@better-auth/utils/base64";import{binary as gr}from"@better-auth/utils/binary";var dt=()=>l("/get-session",{method:"GET",query:Y.optional(Y.object({disableCookieCache:Y.boolean({description:"Disable cookie cache and fetch session from database"}).or(Y.string().transform(e=>e==="true")).optional(),disableRefresh:Y.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),n=r?at(gr.decode(hr.decode(r))):null;if(n&&!await fr("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(n.session),n.signature))return C(e),e.json(null);let o=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(n?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let u=n.session;if(n.expiresAt<Date.now()||u.session.expiresAt<new Date){let m=e.context.authCookies.sessionData.name;e.setCookie(m,"",{maxAge:0})}else return e.json(u)}let s=await e.context.internalAdapter.findSession(t);if(e.context.session=s,!s||s.session.expiresAt<new Date)return C(e),s&&await e.context.internalAdapter.deleteSession(s.session.token),e.json(null);if(o||e.query?.disableRefresh)return e.json(s);let i=e.context.sessionConfig.expiresIn,d=e.context.sessionConfig.updateAge;if(s.session.expiresAt.valueOf()-i*1e3+d*1e3<=Date.now()){let u=await e.context.internalAdapter.updateSession(s.session.token,{expiresAt:x(e.context.sessionConfig.expiresIn,"sec")});if(!u)return C(e),e.json(null,{status:401});let h=(u.expiresAt.valueOf()-Date.now())/1e3;return await v(e,{session:u,user:s.user},!1,{maxAge:h}),e.json({session:u,user:s.user})}return await Ee(e,s),e.json(s)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new W("INTERNAL_SERVER_ERROR",{message:p.FAILED_TO_GET_SESSION})}}),q=async(e,t)=>{if(e.context.session)return e.context.session;let r=await dt()({...e,_flag:"json",headers:e.headers,query:t}).catch(n=>null);return e.context.session=r,r},B=z(async e=>{let t=await q(e);if(!t?.session)throw new W("UNAUTHORIZED");return{session:t}}),ct=z(async e=>{let t=await q(e);if(!t?.session)throw new W("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,n=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-n<r*1e3))throw new W("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var yr=l("/revoke-session",{method:"POST",body:Y.object({token:Y.string({description:"The token to revoke"})}),use:[B],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new W("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new W("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(n){throw e.context.logger.error(n&&typeof n=="object"&&"name"in n?n.name:"",n),new W("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),wr=l("/revoke-sessions",{method:"POST",use:[B],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new W("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),br=l("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[B],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new W("UNAUTHORIZED");let o=(await e.context.internalAdapter.listSessions(t.user.id)).filter(s=>s.expiresAt>new Date).filter(s=>s.token!==e.context.session.session.token);return await Promise.all(o.map(s=>e.context.internalAdapter.deleteSession(s.token))),e.json({status:!0})});import{jwtVerify as Ar}from"jose";import{JWTExpired as Rr}from"jose/errors";async function G(e,t,r,n=3600){return await Fe({email:t.toLowerCase(),updateTo:r},e,n)}async function Er(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ie("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await G(e.context.secret,t.email,void 0,e.context.options.emailVerification?.expiresIn),n=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:n,token:r},e.request)}var Ur=l("/send-verification-email",{method:"POST",query:$.object({currentURL:$.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:$.object({email:$.string({description:"The email to send the verification email to"}).email(),callbackURL:$.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ie("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new ie("BAD_REQUEST",{message:p.USER_NOT_FOUND});return await Er(e,r.user),e.json({status:!0})}),kr=l("/verify-email",{method:"GET",query:$.object({token:$.string({description:"The token to verify the email"}),callbackURL:$.string({description:"The URL to redirect to after email verification"}).optional()}),use:[ee(e=>e.query.callbackURL)],metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(d){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${d}`):e.redirect(`${e.query.callbackURL}?error=${d}`):new ie("UNAUTHORIZED",{message:d})}let{token:r}=e.query,n;try{n=await Ar(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(d){return d instanceof Rr?t("token_expired"):t("invalid_token")}let s=$.object({email:$.string().email(),updateTo:$.string().optional()}).parse(n.payload),i=await e.context.internalAdapter.findUserByEmail(s.email);if(!i)return t("user_not_found");if(s.updateTo){let d=await q(e);if(!d){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(d.user.email!==s.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let a=await e.context.internalAdapter.updateUserByEmail(s.email,{email:s.updateTo,emailVerified:!1}),c=await G(e.context.secret,s.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:a,url:`${e.context.baseURL}/verify-email?token=${c}`,token:c},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0,user:{id:a.id,email:a.email,name:a.name,image:a.image,emailVerified:a.emailVerified,createdAt:a.createdAt,updatedAt:a.updatedAt}})}if(await e.context.internalAdapter.updateUserByEmail(s.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification){let d=await q(e);if(!d||d.user.email!==s.email){let a=await e.context.internalAdapter.createSession(i.user.id,e.request);if(!a)throw new ie("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await v(e,{session:a,user:i.user})}}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0,user:null})});async function fe(e,{userInfo:t,account:r,callbackURL:n}){let o=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(a=>{throw N.error(`Better auth was unable to query your database.
Error: `,a),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),s=o?.user,i=!s;if(o){let a=o.accounts.find(c=>c.providerId===r.providerId);if(a){let c=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([u,h])=>h!==void 0));Object.keys(c).length>0&&await e.context.internalAdapter.updateAccount(a.id,c)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return Ae&&N.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:o.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(h){return N.error("Unable to link account",h),{error:"unable to link account",data:null}}}}else try{if(s=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(a=>a?.user),!t.emailVerified&&s&&e.context.options.emailVerification?.sendOnSignUp){let a=await G(e.context.secret,s.email,void 0,e.context.options.emailVerification?.expiresIn),c=`${e.context.baseURL}/verify-email?token=${a}&callbackURL=${n}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:s,url:c,token:a},e.request)}}catch(a){return a instanceof I?{error:a.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!s)return{error:"unable to create user",data:null,isRegister:!1};let d=await e.context.internalAdapter.createSession(s.id,e.request);return d?{data:{session:d,user:s},error:null,isRegister:i}:{error:"unable to create session",data:null,isRegister:!1}}var Tr=l("/sign-in/social",{method:"POST",query:k.object({currentURL:k.string().optional()}).optional(),body:k.object({callbackURL:k.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:k.string().optional(),errorCallbackURL:k.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:it,disableRedirect:k.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:k.optional(k.object({token:k.string({description:"ID token from the provider"}),nonce:k.string({description:"Nonce used to generate the token"}).optional(),accessToken:k.string({description:"Access token from the provider"}).optional(),refreshToken:k.string({description:"Refresh token from the provider"}).optional(),expiresAt:k.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(s=>s.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new L("NOT_FOUND",{message:p.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new L("NOT_FOUND",{message:p.ID_TOKEN_NOT_SUPPORTED});let{token:s,nonce:i}=e.body.idToken;if(!await t.verifyIdToken(s,i))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new L("UNAUTHORIZED",{message:p.INVALID_TOKEN});let a=await t.getUserInfo({idToken:s,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!a||!a?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new L("UNAUTHORIZED",{message:p.FAILED_TO_GET_USER_INFO});if(!a.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new L("UNAUTHORIZED",{message:p.USER_EMAIL_NOT_FOUND});let c=await fe(e,{userInfo:{email:a.user.email,id:a.user.id,name:a.user.name||"",image:a.user.image,emailVerified:a.user.emailVerified||!1},account:{providerId:t.id,accountId:a.user.id,accessToken:e.body.idToken.accessToken}});if(c.error)throw new L("UNAUTHORIZED",{message:c.error});return await v(e,c.data),e.json({redirect:!1,token:c.data.session.token,url:void 0,user:{id:c.data.user.id,email:c.data.user.email,name:c.data.user.name,image:c.data.user.image,emailVerified:c.data.user.emailVerified,createdAt:c.data.user.createdAt,updatedAt:c.data.user.updatedAt}})}let{codeVerifier:r,state:n}=await me(e),o=await t.createAuthorizationURL({state:n,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:o.toString(),redirect:!e.body.disableRedirect})}),_r=l("/sign-in/email",{method:"POST",body:k.object({email:k.string({description:"Email of the user"}),password:k.string({description:"Password of the user"}),callbackURL:k.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:k.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new L("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!k.string().email().safeParse(t).success)throw new L("BAD_REQUEST",{message:p.INVALID_EMAIL});let o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new L("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});let s=o.accounts.find(c=>c.providerId==="credential");if(!s)throw e.context.logger.error("Credential account not found",{email:t}),new L("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});let i=s?.password;if(!i)throw e.context.logger.error("Password not found",{email:t}),new L("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:i,password:r}))throw e.context.logger.error("Invalid password"),new L("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!o.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new L("UNAUTHORIZED",{message:p.EMAIL_NOT_VERIFIED});let c=await G(e.context.secret,o.user.email,void 0,e.context.options.emailVerification?.expiresIn),u=`${e.context.baseURL}/verify-email?token=${c}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:o.user,url:u,token:c},e.request),new L("FORBIDDEN",{message:p.EMAIL_NOT_VERIFIED})}let a=await e.context.internalAdapter.createSession(o.user.id,e.headers,e.body.rememberMe===!1);if(!a)throw e.context.logger.error("Failed to create session"),new L("UNAUTHORIZED",{message:p.FAILED_TO_CREATE_SESSION});return await v(e,{session:a,user:o.user},e.body.rememberMe===!1),e.json({redirect:!!e.body.callbackURL,token:a.token,url:e.body.callbackURL,user:{id:o.user.id,email:o.user.email,name:o.user.name,image:o.user.image,emailVerified:o.user.emailVerified,createdAt:o.user.createdAt,updatedAt:o.user.updatedAt}})});import{z as ae}from"zod";var he=ae.object({code:ae.string().optional(),error:ae.string().optional(),error_description:ae.string().optional(),state:ae.string().optional()}),Sr=l("/callback/:id",{method:["GET","POST"],body:he.optional(),query:he.optional(),metadata:te},async e=>{let t;try{if(e.method==="GET")t=he.parse(e.query);else if(e.method==="POST")t=he.parse(e.body);else throw new Error("Unsupported method")}catch(P){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",P),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:n,state:o,error_description:s}=t;if(!o)throw e.context.logger.error("State not found",n),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${n||"no_code"}&error_description=${s}`);let i=e.context.socialProviders.find(P=>P.id===e.params.id);if(!i)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:d,callbackURL:a,link:c,errorURL:u,newUserURL:h}=await He(e),m;try{m=await i.validateAuthorizationCode({code:r,codeVerifier:d,redirectURI:`${e.context.baseURL}/callback/${i.id}`})}catch(P){throw e.context.logger.error("",P),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let A=await i.getUserInfo(m).then(P=>P?.user);function b(P){let y=u||a||`${e.context.baseURL}/error`;throw y.includes("?")?y=`${y}&error=${P}`:y=`${y}?error=${P}`,e.redirect(y)}if(!A)return e.context.logger.error("Unable to get user info"),b("unable_to_get_user_info");if(!A.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),b("email_not_found");if(!a)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(c){if(c.email!==A.email.toLowerCase())return b("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:c.userId,providerId:i.id,accountId:A.id}))return b("unable_to_link_account");let y;try{y=a.toString()}catch{y=a}throw e.redirect(y)}let S=await fe(e,{userInfo:{...A,email:A.email,name:A.name||A.email},account:{providerId:i.id,accountId:A.id,...m,scope:m.scopes?.join(",")},callbackURL:a});if(S.error)return e.context.logger.error(S.error.split(" ").join("_")),b(S.error.split(" ").join("_"));let{session:Q,user:re}=S.data;await v(e,{session:Q,user:re});let oe;try{oe=(S.isRegister&&h||a).toString()}catch{oe=S.isRegister&&h||a}throw e.redirect(oe)});import{APIError as Or}from"better-call";var vr=l("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw C(e),new Or("BAD_REQUEST",{message:p.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),C(e),e.json({success:!0})});import{z as j}from"zod";import{APIError as de}from"better-call";function ut(e,t,r){let n=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([o,s])=>n.searchParams.set(o,s)),n.href}function Ir(e,t,r){let n=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([o,s])=>n.searchParams.set(o,s)),n.href}var Lr=l("/forget-password",{method:"POST",body:j.object({email:j.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:j.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new de("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,n=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!n)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let o=60*60*1,s=x(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||o,"sec"),i=Xe(24);await e.context.internalAdapter.createVerificationValue({value:n.user.id.toString(),identifier:`reset-password:${i}`,expiresAt:s});let d=`${e.context.baseURL}/reset-password/${i}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:n.user,url:d,token:i},e.request),e.json({status:!0})}),Pr=l("/reset-password/:token",{method:"GET",query:j.object({callbackURL:j.string({description:"The URL to redirect the user to reset their password"})}),use:[ee(e=>e.query.callbackURL)],metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(ut(e.context,r,{error:"INVALID_TOKEN"}));let n=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!n||n.expiresAt<new Date?e.redirect(ut(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(Ir(e.context,r,{token:t}))}),xr=l("/reset-password",{query:j.optional(j.object({token:j.string().optional(),currentURL:j.string().optional()})),method:"POST",body:j.object({newPassword:j.string({description:"The new password to set"}),token:j.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new de("BAD_REQUEST",{message:p.INVALID_TOKEN});let{newPassword:r}=e.body,n=e.context.password?.config.minPasswordLength,o=e.context.password?.config.maxPasswordLength;if(r.length<n)throw new de("BAD_REQUEST",{message:p.PASSWORD_TOO_SHORT});if(r.length>o)throw new de("BAD_REQUEST",{message:p.PASSWORD_TOO_LONG});let s=`reset-password:${t}`,i=await e.context.internalAdapter.findVerificationValue(s);if(!i||i.expiresAt<new Date)throw new de("BAD_REQUEST",{message:p.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(i.id);let d=i.value,a=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(d)).find(h=>h.providerId==="credential")?(await e.context.internalAdapter.updatePassword(d,a),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:d,providerId:"credential",password:a,accountId:d}),e.json({status:!0}))});import{z as _}from"zod";import{APIError as T}from"better-call";import{z as g}from"zod";import{APIError as ha}from"better-call";var ga=g.object({id:g.string(),providerId:g.string(),accountId:g.string(),userId:g.string(),accessToken:g.string().nullish(),refreshToken:g.string().nullish(),idToken:g.string().nullish(),accessTokenExpiresAt:g.date().nullish(),refreshTokenExpiresAt:g.date().nullish(),scope:g.string().nullish(),password:g.string().nullish(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date)}),ya=g.object({id:g.string(),email:g.string().transform(e=>e.toLowerCase()),emailVerified:g.boolean().default(!1),name:g.string(),image:g.string().nullish(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date)}),wa=g.object({id:g.string(),userId:g.string(),expiresAt:g.date(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date),token:g.string(),ipAddress:g.string().nullish(),userAgent:g.string().nullish()}),ba=g.object({id:g.string(),value:g.string(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date),expiresAt:g.date(),identifier:g.string()});function lt(e,t){if(!t)return e;for(let r in t){let n=t[r]?.modelName;n&&(e[r].modelName=n);for(let o in e[r].fields){let s=t[r]?.fields?.[o];s&&(e[r].fields[o].fieldName=s)}}return e}var Cr=l("/change-password",{method:"POST",body:_.object({newPassword:_.string({description:"The new password to set"}),currentPassword:_.string({description:"The current password"}),revokeOtherSessions:_.boolean({description:"Revoke all other sessions"}).optional()}),use:[B],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:n}=e.body,o=e.context.session,s=e.context.password.config.minPasswordLength;if(t.length<s)throw e.context.logger.error("Password is too short"),new T("BAD_REQUEST",{message:p.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(t.length>i)throw e.context.logger.error("Password is too long"),new T("BAD_REQUEST",{message:p.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(o.user.id)).find(m=>m.providerId==="credential"&&m.password);if(!a||!a.password)throw new T("BAD_REQUEST",{message:p.CREDENTIAL_ACCOUNT_NOT_FOUND});let c=await e.context.password.hash(t);if(!await e.context.password.verify({hash:a.password,password:r}))throw new T("BAD_REQUEST",{message:p.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(a.id,{password:c});let h=null;if(n){await e.context.internalAdapter.deleteSessions(o.user.id);let m=await e.context.internalAdapter.createSession(o.user.id,e.headers);if(!m)throw new T("INTERNAL_SERVER_ERROR",{message:p.FAILED_TO_GET_SESSION});await v(e,{session:m,user:o.user}),h=m.token}return e.json({token:h,user:{id:o.user.id,email:o.user.email,name:o.user.name,image:o.user.image,emailVerified:o.user.emailVerified,createdAt:o.user.createdAt,updatedAt:o.user.updatedAt}})}),jr=l("/set-password",{method:"POST",body:_.object({newPassword:_.string()}),metadata:{SERVER_ONLY:!0},use:[B]},async e=>{let{newPassword:t}=e.body,r=e.context.session,n=e.context.password.config.minPasswordLength;if(t.length<n)throw e.context.logger.error("Password is too short"),new T("BAD_REQUEST",{message:p.PASSWORD_TOO_SHORT});let o=e.context.password.config.maxPasswordLength;if(t.length>o)throw e.context.logger.error("Password is too long"),new T("BAD_REQUEST",{message:p.PASSWORD_TOO_LONG});let i=(await e.context.internalAdapter.findAccounts(r.user.id)).find(a=>a.providerId==="credential"&&a.password),d=await e.context.password.hash(t);if(!i)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:d}),e.json({status:!0});throw new T("BAD_REQUEST",{message:"user already has a password"})}),Nr=l("/delete-user",{method:"POST",use:[B],body:_.object({callbackURL:_.string().optional(),password:_.string().optional(),token:_.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new T("NOT_FOUND");let t=e.context.session;if(e.body.password){let s=(await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId==="credential"&&d.password);if(!s||!s.password)throw new T("BAD_REQUEST",{message:p.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:s.password,password:e.body.password}))throw new T("BAD_REQUEST",{message:p.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let o=t.session.createdAt.getTime(),s=e.context.options.session.freshAge;if(Date.now()-o>s)throw new T("BAD_REQUEST",{message:p.SESSION_EXPIRED})}if(e.body.token)return await pt({...e,query:{token:e.body.token}}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let o=se(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${o}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let s=`${e.context.baseURL}/delete-user/callback?token=${o}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:s,token:o},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),C(e);let n=e.context.options.user.deleteUser?.afterDelete;return n&&await n(t.user,e.request),e.json({success:!0,message:"User deleted"})}),pt=l("/delete-user/callback",{method:"GET",query:_.object({token:_.string(),callbackURL:_.string().optional()}),use:[ee(e=>e.query.callbackURL)]},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new T("NOT_FOUND");let t=await q(e);if(!t)throw new T("NOT_FOUND",{message:p.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new T("NOT_FOUND",{message:p.INVALID_TOKEN});if(r.value!==t.user.id)throw new T("NOT_FOUND",{message:p.INVALID_TOKEN});let n=e.context.options.user.deleteUser?.beforeDelete;n&&await n(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),C(e);let o=e.context.options.user.deleteUser?.afterDelete;if(o&&await o(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),Br=l("/change-email",{method:"POST",query:_.object({currentURL:_.string().optional()}).optional(),body:_.object({newEmail:_.string({description:"The new email to set"}).email(),callbackURL:_.string({description:"The URL to redirect to after email verification"}).optional()}),use:[B],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new T("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new T("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new T("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let o=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new T("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await G(e.context.secret,e.context.session.user.email,e.body.newEmail,e.context.options.emailVerification?.expiresIn),n=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:n,token:r},e.request),e.json({status:!0})});var $r=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,Vr=l("/error",{method:"GET",metadata:{...te,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response($r(t),{headers:{"Content-Type":"text/html"}})});var qr=l("/ok",{method:"GET",metadata:{...te,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as Fa}from"zod";import{APIError as Ja}from"better-call";import{z as X}from"zod";import{APIError as ge}from"better-call";var Mr=l("/list-accounts",{method:"GET",use:[B],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(n=>({id:n.id,provider:n.providerId,createdAt:n.createdAt,updatedAt:n.updatedAt,accountId:n.accountId,scopes:n.scope?.split(",")||[]})))}),Fr=l("/link-social",{method:"POST",requireHeaders:!0,query:X.object({currentURL:X.string().optional()}).optional(),body:X.object({callbackURL:X.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:X.enum(Te,{description:"The OAuth2 provider to use"})}),use:[B],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId===e.body.provider))throw new ge("BAD_REQUEST",{message:p.SOCIAL_ACCOUNT_ALREADY_LINKED});let o=e.context.socialProviders.find(d=>d.id===e.body.provider);if(!o)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new ge("NOT_FOUND",{message:p.PROVIDER_NOT_FOUND});let s=await me(e,{userId:t.user.id,email:t.user.email}),i=await o.createAuthorizationURL({state:s.state,codeVerifier:s.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${o.id}`});return e.json({url:i.toString(),redirect:!0})}),zr=l("/unlink-account",{method:"POST",body:X.object({providerId:X.string()}),use:[ct]},async e=>{let t=await e.context.internalAdapter.findAccounts(e.context.session.user.id);if(t.length===1)throw new ge("BAD_REQUEST",{message:p.FAILED_TO_UNLINK_LAST_ACCOUNT});if(!t.find(n=>n.providerId===e.body.providerId))throw new ge("BAD_REQUEST",{message:p.ACCOUNT_NOT_FOUND});return await e.context.internalAdapter.deleteAccount(e.body.providerId,e.context.session.user.id),e.json({status:!0})});import{APIError as I}from"better-call";import{APIError as Hr}from"better-call";var mt=async e=>{let t=e.context.returned;return t?t instanceof Response?t.status!==200?null:await t.clone().json():t instanceof Hr?null:t:null};var ac=e=>{let t={defaultRole:"user",adminRole:"admin",...e},r={FAILED_TO_CREATE_USER:"Failed to create user",USER_ALREADY_EXISTS:"User already exists",USER_NOT_FOUND:"User not found",YOU_CANNOT_BAN_YOURSELF:"You cannot ban yourself",ONLY_ADMINS_CAN_ACCESS_THIS_ENDPOINT:"Only admins can access this endpoint"},n=z(async o=>{let s=await q(o);if(!s?.session)throw new I("UNAUTHORIZED");let i=s.user;if(!i.role||(Array.isArray(t.adminRole)?!t.adminRole.includes(i.role):i.role!==t.adminRole))throw new I("FORBIDDEN",{message:"Only admins can access this endpoint"});return{session:{user:i,session:s.session}}});return{id:"admin",init(o){return{options:{databaseHooks:{user:{create:{async before(s){if(e?.defaultRole!==!1)return{data:{role:e?.defaultRole??"user",...s}}}}},session:{create:{async before(s){let i=await o.internalAdapter.findUserById(s.userId);if(i.banned){if(i.banExpires&&i.banExpires.getTime()<Date.now()){await o.internalAdapter.updateUser(s.userId,{banned:!1,banReason:null,banExpires:null});return}return!1}}}}}}}},hooks:{after:[{matcher(o){return o.path==="/list-sessions"},handler:z(async o=>{let s=await mt(o);if(!s)return;let i=s.filter(d=>!d.impersonatedBy);return o.json(i)})}]},endpoints:{setRole:l("/admin/set-role",{method:"POST",body:f.object({userId:f.string({description:"The user id"}),role:f.string({description:"The role to set. `admin` or `user` by default"})}),use:[n],metadata:{openapi:{operationId:"setRole",summary:"Set the role of a user",description:"Set the role of a user",responses:{200:{description:"User role updated",content:{"application/json":{schema:{type:"object",properties:{user:{$ref:"#/components/schemas/User"}}}}}}}}}},async o=>{let s=await o.context.internalAdapter.updateUser(o.body.userId,{role:o.body.role});return o.json({user:s})}),createUser:l("/admin/create-user",{method:"POST",body:f.object({email:f.string({description:"The email of the user"}),password:f.string({description:"The password of the user"}),name:f.string({description:"The name of the user"}),role:f.string({description:"The role of the user"}),data:f.optional(f.record(f.any(),{description:"Extra fields for the user. Including custom additional fields."}))}),use:[n],metadata:{openapi:{operationId:"createUser",summary:"Create a new user",description:"Create a new user",responses:{200:{description:"User created",content:{"application/json":{schema:{type:"object",properties:{user:{$ref:"#/components/schemas/User"}}}}}}}}}},async o=>{if(await o.context.internalAdapter.findUserByEmail(o.body.email))throw new I("BAD_REQUEST",{message:r.USER_ALREADY_EXISTS});let i=await o.context.internalAdapter.createUser({email:o.body.email,name:o.body.name,role:o.body.role,...o.body.data});if(!i)throw new I("INTERNAL_SERVER_ERROR",{message:r.FAILED_TO_CREATE_USER});let d=await o.context.password.hash(o.body.password);return await o.context.internalAdapter.linkAccount({accountId:i.id,providerId:"credential",password:d,userId:i.id}),o.json({user:i})}),listUsers:l("/admin/list-users",{method:"GET",use:[n],query:f.object({searchValue:f.string({description:"The value to search for"}).optional(),searchField:f.enum(["email","name"],{description:"The field to search in, defaults to email. Can be `email` or `name`"}).optional(),searchOperator:f.enum(["contains","starts_with","ends_with"],{description:"The operator to use for the search. Can be `contains`, `starts_with` or `ends_with`"}).optional(),limit:f.string({description:"The number of users to return"}).or(f.number()).optional(),offset:f.string({description:"The offset to start from"}).or(f.number()).optional(),sortBy:f.string({description:"The field to sort by"}).optional(),sortDirection:f.enum(["asc","desc"],{description:"The direction to sort by"}).optional(),filterField:f.string({description:"The field to filter by"}).optional(),filterValue:f.string({description:"The value to filter by"}).or(f.number()).or(f.boolean()).optional(),filterOperator:f.enum(["eq","ne","lt","lte","gt","gte"],{description:"The operator to use for the filter"}).optional()}),metadata:{openapi:{operationId:"listUsers",summary:"List users",description:"List users",responses:{200:{description:"List of users",content:{"application/json":{schema:{type:"object",properties:{users:{type:"array",items:{$ref:"#/components/schemas/User"}}}}}}}}}}},async o=>{let s=[];o.query?.searchValue&&s.push({field:o.query.searchField||"email",operator:o.query.searchOperator||"contains",value:o.query.searchValue}),o.query?.filterValue&&s.push({field:o.query.filterField||"email",operator:o.query.filterOperator||"eq",value:o.query.filterValue});try{let i=await o.context.internalAdapter.listUsers(Number(o.query?.limit)||void 0,Number(o.query?.offset)||void 0,o.query?.sortBy?{field:o.query.sortBy,direction:o.query.sortDirection||"asc"}:void 0,s.length?s:void 0);return o.json({users:i})}catch(i){return console.log(i),o.json({users:[]})}}),listUserSessions:l("/admin/list-user-sessions",{method:"POST",use:[n],body:f.object({userId:f.string({description:"The user id"})}),metadata:{openapi:{operationId:"listUserSessions",summary:"List user sessions",description:"List user sessions",responses:{200:{description:"List of user sessions",content:{"application/json":{schema:{type:"object",properties:{sessions:{type:"array",items:{$ref:"#/components/schemas/Session"}}}}}}}}}}},async o=>({sessions:await o.context.internalAdapter.listSessions(o.body.userId)})),unbanUser:l("/admin/unban-user",{method:"POST",body:f.object({userId:f.string({description:"The user id"})}),use:[n],metadata:{openapi:{operationId:"unbanUser",summary:"Unban a user",description:"Unban a user",responses:{200:{description:"User unbanned",content:{"application/json":{schema:{type:"object",properties:{user:{$ref:"#/components/schemas/User"}}}}}}}}}},async o=>{let s=await o.context.internalAdapter.updateUser(o.body.userId,{banned:!1});return o.json({user:s})}),banUser:l("/admin/ban-user",{method:"POST",body:f.object({userId:f.string({description:"The user id"}),banReason:f.string({description:"The reason for the ban"}).optional(),banExpiresIn:f.number({description:"The number of seconds until the ban expires"}).optional()}),use:[n],metadata:{openapi:{operationId:"banUser",summary:"Ban a user",description:"Ban a user",responses:{200:{description:"User banned",content:{"application/json":{schema:{type:"object",properties:{user:{$ref:"#/components/schemas/User"}}}}}}}}}},async o=>{if(o.body.userId===o.context.session.user.id)throw new I("BAD_REQUEST",{message:r.YOU_CANNOT_BAN_YOURSELF});let s=await o.context.internalAdapter.updateUser(o.body.userId,{banned:!0,banReason:o.body.banReason||e?.defaultBanReason||"No reason",banExpires:o.body.banExpiresIn?x(o.body.banExpiresIn,"sec"):e?.defaultBanExpiresIn?x(e.defaultBanExpiresIn,"sec"):void 0});return await o.context.internalAdapter.deleteSessions(o.body.userId),o.json({user:s})}),impersonateUser:l("/admin/impersonate-user",{method:"POST",body:f.object({userId:f.string({description:"The user id"})}),use:[n],metadata:{openapi:{operationId:"impersonateUser",summary:"Impersonate a user",description:"Impersonate a user",responses:{200:{description:"Impersonation session created",content:{"application/json":{schema:{type:"object",properties:{session:{$ref:"#/components/schemas/Session"},user:{$ref:"#/components/schemas/User"}}}}}}}}}},async o=>{let s=await o.context.internalAdapter.findUserById(o.body.userId);if(!s)throw new I("NOT_FOUND",{message:"User not found"});let i=await o.context.internalAdapter.createSession(s.id,void 0,!0,{impersonatedBy:o.context.session.user.id,expiresAt:e?.impersonationSessionDuration?x(e.impersonationSessionDuration,"sec"):x(60*60,"sec")});if(!i)throw new I("INTERNAL_SERVER_ERROR",{message:r.FAILED_TO_CREATE_USER});let d=o.context.authCookies;return C(o),await o.setSignedCookie("admin_session",o.context.session.session.token,o.context.secret,d.sessionToken.options),await v(o,{session:i,user:s},!0),o.json({session:i,user:s})}),stopImpersonating:l("/admin/stop-impersonating",{method:"POST"},async o=>{let s=await q(o);if(!s)throw new I("UNAUTHORIZED");if(!s.session.impersonatedBy)throw new I("BAD_REQUEST",{message:"You are not impersonating anyone"});let i=await o.context.internalAdapter.findUserById(s.session.impersonatedBy);if(!i)throw new I("INTERNAL_SERVER_ERROR",{message:"Failed to find user"});let d=await o.getSignedCookie("admin_session",o.context.secret);if(!d)throw new I("INTERNAL_SERVER_ERROR",{message:"Failed to find admin session"});let a=await o.context.internalAdapter.findSession(d);if(!a||a.session.userId!==i.id)throw new I("INTERNAL_SERVER_ERROR",{message:"Failed to find admin session"});return await v(o,a),o.json(a)}),revokeUserSession:l("/admin/revoke-user-session",{method:"POST",body:f.object({sessionToken:f.string({description:"The session token"})}),use:[n],metadata:{openapi:{operationId:"revokeUserSession",summary:"Revoke a user session",description:"Revoke a user session",responses:{200:{description:"Session revoked",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async o=>(await o.context.internalAdapter.deleteSession(o.body.sessionToken),o.json({success:!0}))),revokeUserSessions:l("/admin/revoke-user-sessions",{method:"POST",body:f.object({userId:f.string({description:"The user id"})}),use:[n],metadata:{openapi:{operationId:"revokeUserSessions",summary:"Revoke all user sessions",description:"Revoke all user sessions",responses:{200:{description:"Sessions revoked",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async o=>(await o.context.internalAdapter.deleteSessions(o.body.userId),o.json({success:!0}))),removeUser:l("/admin/remove-user",{method:"POST",body:f.object({userId:f.string({description:"The user id"})}),use:[n],metadata:{openapi:{operationId:"removeUser",summary:"Remove a user",description:"Delete a user and all their sessions and accounts. Cannot be undone.",responses:{200:{description:"User removed",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async o=>(await o.context.internalAdapter.deleteUser(o.body.userId),o.json({success:!0})))},$ERROR_CODES:r,schema:lt(Wr,t.schema)}},Wr={user:{fields:{role:{type:"string",required:!1,input:!1},banned:{type:"boolean",defaultValue:!1,required:!1,input:!1},banReason:{type:"string",required:!1,input:!1},banExpires:{type:"date",required:!1,input:!1}}},session:{fields:{impersonatedBy:{type:"string",required:!1}}}};export{ac as admin};
