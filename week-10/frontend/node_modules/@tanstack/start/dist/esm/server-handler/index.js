import { defaultTransformer, isPlainObject, isRedirect, isNotFound } from "@tanstack/react-router";
import invariant from "tiny-invariant";
import { eventHandler, toWebRequest, getResponseStatus, getEvent } from "vinxi/http";
import { getManifest } from "vinxi/manifest";
const index = eventHandler(handleServerAction);
async function handleServerAction(event) {
  return handleServerRequest(toWebRequest(event));
}
async function handleServerRequest(request, _event) {
  var _a, _b;
  const method = request.method;
  const url = new URL(request.url, "http://localhost:3000");
  const search = Object.fromEntries(url.searchParams.entries());
  const serverFnId = search._serverFnId;
  const serverFnName = search._serverFnName;
  if (!serverFnId || !serverFnName) {
    throw new Error("Invalid request");
  }
  invariant(typeof serverFnId === "string", "Invalid server action");
  if (process.env.NODE_ENV === "development")
    console.info(`ServerFn Request: ${serverFnId} - ${serverFnName}`);
  if (process.env.NODE_ENV === "development") console.info();
  const action = (_b = await ((_a = getManifest("server").chunks[serverFnId]) == null ? void 0 : _a.import())) == null ? void 0 : _b[serverFnName];
  const response = await (async () => {
    try {
      const arg = await (async () => {
        var _a2;
        if ((_a2 = request.headers.get("Content-Type")) == null ? void 0 : _a2.includes("multipart/form-data")) {
          invariant(
            method.toLowerCase() !== "get",
            "GET requests with FormData payloads are not supported"
          );
          return await request.formData();
        }
        if (method.toLowerCase() === "get") {
          if (!search.payload) {
            return void 0;
          }
          return defaultTransformer.parse(search.payload);
        }
        const jsonPayloadAsString = await request.text();
        return defaultTransformer.parse(jsonPayloadAsString);
      })();
      const result = await action(arg);
      if (result instanceof Response) {
        return result;
      } else if (isPlainObject(result) && "result" in result && result.result instanceof Response) {
        return result.result;
      }
      if (isRedirect(result) || isNotFound(result)) {
        return redirectOrNotFoundResponse(result);
      }
      return new Response(
        result !== void 0 ? defaultTransformer.stringify(result) : void 0,
        {
          status: getResponseStatus(getEvent()),
          headers: {
            "Content-Type": "application/json"
          }
        }
      );
    } catch (error) {
      if (error instanceof Response) {
        return error;
      } else if (isPlainObject(error) && "result" in error && error.result instanceof Response) {
        return error.result;
      }
      if (isRedirect(error) || isNotFound(error)) {
        return redirectOrNotFoundResponse(error);
      }
      console.error("Server Fn Error!");
      console.error(error);
      console.info();
      return new Response(defaultTransformer.stringify(error), {
        status: 500,
        headers: {
          "Content-Type": "application/json"
        }
      });
    }
  })();
  if (process.env.NODE_ENV === "development")
    console.info(`ServerFn Response: ${response.status}`);
  if (response.headers.get("Content-Type") === "application/json") {
    const cloned = response.clone();
    const text = await cloned.text();
    const payload = text ? JSON.stringify(JSON.parse(text)) : "undefined";
    if (process.env.NODE_ENV === "development")
      console.info(
        ` - Payload: ${payload.length > 100 ? payload.substring(0, 100) + "..." : payload}`
      );
  }
  if (process.env.NODE_ENV === "development") console.info();
  return response;
}
function redirectOrNotFoundResponse(error) {
  const { headers, ...rest } = error;
  return new Response(JSON.stringify(rest), {
    status: 200,
    headers: {
      "Content-Type": "application/json",
      ...headers || {}
    }
  });
}
export {
  index as default,
  handleServerRequest
};
//# sourceMappingURL=index.js.map
