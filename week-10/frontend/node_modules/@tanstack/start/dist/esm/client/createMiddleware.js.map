{"version":3,"file":"createMiddleware.js","sources":["../../../src/client/createMiddleware.ts"],"sourcesContent":["import type { ConstrainValidator, Method } from './createServerFn'\nimport type {\n  Assign,\n  Constrain,\n  DefaultTransformerStringify,\n  Expand,\n  ResolveValidatorInput,\n  ResolveValidatorOutput,\n} from '@tanstack/react-router'\n\nexport type MergeAllMiddleware<\n  TMiddlewares,\n  TType extends keyof AnyMiddleware['_types'],\n  TAcc = undefined,\n> = TMiddlewares extends readonly [\n  infer TMiddleware extends AnyMiddleware,\n  ...infer TRest,\n]\n  ? MergeAllMiddleware<TRest, TType, Assign<TAcc, TMiddleware['_types'][TType]>>\n  : TAcc\n\nexport type MergeAllClientAfterContext<\n  TMiddlewares,\n  TClientContext = undefined,\n  TClientAfterContext = undefined,\n> = unknown extends TClientContext\n  ? TClientContext\n  : Assign<\n      MergeAllMiddleware<TMiddlewares, 'allClientAfterContext'>,\n      Assign<TClientContext, TClientAfterContext>\n    >\n\n/**\n * Recursively resolve the client context type produced by a sequence of middleware\n */\nexport type MergeAllClientContext<\n  TMiddlewares,\n  TContext = undefined,\n> = unknown extends TContext\n  ? TContext\n  : Assign<MergeAllMiddleware<TMiddlewares, 'allClientContext'>, TContext>\n\n/**\n * Recursively resolve the server context type produced by a sequence of middleware\n */\nexport type MergeAllServerContext<\n  TMiddlewares,\n  TContext = undefined,\n> = unknown extends TContext\n  ? TContext\n  : Assign<MergeAllMiddleware<TMiddlewares, 'allServerContext'>, TContext>\n\n/**\n * Recursively resolve the input type produced by a sequence of middleware\n */\nexport type MergeAllValidatorInputs<TMiddlewares, TValidator> =\n  unknown extends TValidator\n    ? TValidator\n    : Assign<\n        MergeAllMiddleware<TMiddlewares, 'allInput'>,\n        TValidator extends undefined\n          ? undefined\n          : ResolveValidatorInput<TValidator>\n      >\n/**\n * Recursively merge the output type produced by a sequence of middleware\n */\nexport type MergeAllValidatorOutputs<TMiddlewares, TValidator> =\n  unknown extends TValidator\n    ? TValidator\n    : Assign<\n        MergeAllMiddleware<TMiddlewares, 'allOutput'>,\n        TValidator extends undefined\n          ? undefined\n          : ResolveValidatorOutput<TValidator>\n      >\n\nexport interface MiddlewareOptions<\n  in out TMiddlewares,\n  in out TValidator,\n  in out TServerContext,\n  in out TClientContext,\n> {\n  validateClient?: boolean\n  middleware?: TMiddlewares\n  validator?: ConstrainValidator<TValidator>\n  client?: MiddlewareClientFn<\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext\n  >\n  server?: MiddlewareServerFn<\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    unknown,\n    unknown\n  >\n  clientAfter?: MiddlewareClientAfterFn<\n    TMiddlewares,\n    TValidator,\n    TClientContext,\n    unknown,\n    unknown\n  >\n}\n\nexport type MiddlewareServerNextFn = <\n  TNewServerContext = undefined,\n  TNewClientAfterContext = undefined,\n>(ctx?: {\n  context?: TNewServerContext\n  sendContext?: DefaultTransformerStringify<TNewClientAfterContext>\n}) => Promise<\n  ServerResultWithContext<TNewServerContext, TNewClientAfterContext>\n>\n\nexport interface MiddlewareServerFnOptions<\n  in out TMiddlewares,\n  in out TValidator,\n  in out TServerContext,\n> {\n  data: Expand<MergeAllValidatorOutputs<TMiddlewares, TValidator>>\n  context: Expand<MergeAllServerContext<TMiddlewares, TServerContext>>\n  next: MiddlewareServerNextFn\n  method: Method\n  filename: string\n  functionId: string\n}\n\nexport type MiddlewareServerFn<\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TNewServerContext,\n  TNewClientAfterContext,\n> = (\n  options: MiddlewareServerFnOptions<TMiddlewares, TValidator, TServerContext>,\n) => MiddlewareServerFnResult<TNewServerContext, TNewClientAfterContext>\n\nexport type MiddlewareServerFnResult<TServerContext, TClientAfterContext> =\n  | Promise<ServerResultWithContext<TServerContext, TClientAfterContext>>\n  | ServerResultWithContext<TServerContext, TClientAfterContext>\n\nexport type MiddlewareClientNextFn = <\n  TNewServerContext = undefined,\n  TNewClientContext = undefined,\n>(ctx?: {\n  context?: TNewClientContext\n  sendContext?: DefaultTransformerStringify<TNewServerContext>\n  headers?: HeadersInit\n}) => Promise<ClientResultWithContext<TNewServerContext, TNewClientContext>>\n\nexport interface MiddlewareClientFnOptions<\n  in out TMiddlewares,\n  in out TValidator,\n> {\n  data: Expand<MergeAllValidatorInputs<TMiddlewares, TValidator>>\n  context: Expand<MergeAllClientContext<TMiddlewares>>\n  sendContext?: unknown // cc Chris Horobin\n  method: Method\n  next: MiddlewareClientNextFn\n  filename: string\n  functionId: string\n}\n\nexport type MiddlewareClientFn<\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n> = (\n  options: MiddlewareClientFnOptions<TMiddlewares, TValidator>,\n) => MiddlewareClientFnResult<TServerContext, TClientContext>\n\nexport type MiddlewareClientFnResult<TServerContext, TClientContext> =\n  | Promise<ClientResultWithContext<TServerContext, TClientContext>>\n  | ClientResultWithContext<TServerContext, TClientContext>\n\nexport type MiddlewareClientAfterNextFn = <\n  TNewClientAfterContext = undefined,\n>(ctx?: {\n  context?: TNewClientAfterContext\n  sendContext?: never\n  headers?: HeadersInit\n}) => Promise<ClientAfterResultWithContext<TNewClientAfterContext>>\n\nexport interface MiddlewareClientAfterFnOptions<\n  in out TMiddlewares,\n  in out TValidator,\n  in out TClientContext,\n  in out TClientAfterContext,\n> {\n  data: Expand<MergeAllValidatorInputs<TMiddlewares, TValidator>>\n  context: Expand<\n    MergeAllClientAfterContext<\n      TMiddlewares,\n      TClientContext,\n      TClientAfterContext\n    >\n  >\n  method: Method\n  next: MiddlewareClientAfterNextFn\n}\n\nexport type MiddlewareClientAfterFn<\n  TMiddlewares,\n  TValidator,\n  TClientContext,\n  TClientAfterContext,\n  TNewClientAfterContext,\n> = (\n  options: MiddlewareClientAfterFnOptions<\n    TMiddlewares,\n    TValidator,\n    TClientContext,\n    TClientAfterContext\n  >,\n) => MiddlewareClientAfterFnResult<TNewClientAfterContext>\n\nexport type MiddlewareClientAfterFnResult<TNewClientAfterContext> =\n  | Promise<ClientAfterResultWithContext<TNewClientAfterContext>>\n  | ClientAfterResultWithContext<TNewClientAfterContext>\n\nexport type ServerResultWithContext<TContext, TClientAfterContext> = {\n  'use functions must return the result of next()': true\n  context: TContext\n  clientAfterContext: TClientAfterContext\n}\n\nexport type ClientAfterResultWithContext<TClientContext> = {\n  'use functions must return the result of next()': true\n  context: TClientContext\n  headers: HeadersInit\n}\n\nexport type ClientResultWithContext<TServerContext, TClientContext> = {\n  'use functions must return the result of next()': true\n  context: TClientContext\n  serverContext: TServerContext\n  headers: HeadersInit\n}\n\nexport type AnyMiddleware = MiddlewareTypes<any, any, any, any, any, any>\n\nexport interface MiddlewareTypes<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> {\n  _types: {\n    id: TId\n    middlewares: TMiddlewares\n    input: ResolveValidatorInput<TValidator>\n    allInput: MergeAllValidatorInputs<TMiddlewares, TValidator>\n    output: ResolveValidatorOutput<TValidator>\n    allOutput: MergeAllValidatorOutputs<TMiddlewares, TValidator>\n    clientContext: TClientContext\n    allClientContext: MergeAllClientContext<TMiddlewares, TClientContext>\n    serverContext: TServerContext\n    allServerContext: MergeAllServerContext<TMiddlewares, TServerContext>\n    clientAfterContext: TClientAfterContext\n    allClientAfterContext: MergeAllClientAfterContext<\n      TMiddlewares,\n      TClientContext,\n      TClientAfterContext\n    >\n    validator: TValidator\n  }\n  options: MiddlewareOptions<\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext\n  >\n}\n\nexport interface MiddlewareValidator<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> {\n  validator: <TNewValidator>(\n    input: ConstrainValidator<TNewValidator>,\n  ) => MiddlewareAfterMiddleware<\n    TId,\n    TMiddlewares,\n    NonNullable<TValidator> | TNewValidator,\n    TServerContext,\n    TClientContext,\n    TClientAfterContext\n  >\n}\n\nexport interface MiddlewareClientAfter<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> {\n  clientAfter: <TNewClientAfterContext = undefined>(\n    clientAfter: MiddlewareClientAfterFn<\n      TMiddlewares,\n      TValidator,\n      TClientContext,\n      TClientAfterContext,\n      TNewClientAfterContext\n    >,\n  ) => MiddlewareAfterServer<\n    TId,\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext,\n    Assign<TClientAfterContext, TNewClientAfterContext>\n  >\n}\n\nexport interface MiddlewareAfterServer<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> extends MiddlewareTypes<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    >,\n    MiddlewareClientAfter<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    > {}\n\nexport interface MiddlewareServer<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> {\n  server: <TNewServerContext = undefined, TNewClientAfterContext = undefined>(\n    server: MiddlewareServerFn<\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TNewServerContext,\n      TNewClientAfterContext\n    >,\n  ) => MiddlewareAfterServer<\n    TId,\n    TMiddlewares,\n    TValidator,\n    Assign<TServerContext, TNewServerContext>,\n    TClientContext,\n    Assign<TClientAfterContext, TNewClientAfterContext>\n  >\n}\n\nexport interface MiddlewareAfterClient<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> extends MiddlewareTypes<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    >,\n    MiddlewareServer<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    > {}\n\nexport interface MiddlewareClient<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> {\n  client: <TNewServerContext = undefined, TNewClientContext = undefined>(\n    client: MiddlewareClientFn<\n      TMiddlewares,\n      TValidator,\n      TNewServerContext,\n      TNewClientContext\n    >,\n  ) => MiddlewareAfterClient<\n    TId,\n    TMiddlewares,\n    TValidator,\n    Assign<TServerContext, TNewServerContext>,\n    Assign<TClientContext, TNewClientContext>,\n    TClientAfterContext\n  >\n}\n\nexport interface MiddlewareAfterMiddleware<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> extends MiddlewareTypes<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    >,\n    MiddlewareServer<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    >,\n    MiddlewareClient<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    >,\n    MiddlewareValidator<\n      TId,\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext,\n      TClientAfterContext\n    > {}\n\nexport interface Middleware<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext,\n> extends MiddlewareAfterMiddleware<\n    TId,\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext,\n    TClientAfterContext\n  > {\n  middleware: <const TNewMiddlewares = undefined>(\n    middlewares: Constrain<TNewMiddlewares, ReadonlyArray<AnyMiddleware>>,\n  ) => MiddlewareAfterMiddleware<\n    TId,\n    TNewMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext,\n    TClientAfterContext\n  >\n}\n\nexport function createMiddleware<\n  const TId,\n  const TMiddlewares,\n  TValidator = undefined,\n  TServerContext = undefined,\n  TClientContext = undefined,\n  TClientAfterContext = undefined,\n>(\n  options?: {\n    validateClient?: boolean\n  },\n  __opts?: MiddlewareOptions<\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext\n  >,\n): Middleware<\n  TId,\n  TMiddlewares,\n  TValidator,\n  TServerContext,\n  TClientContext,\n  TClientAfterContext\n> {\n  // const resolvedOptions = (__opts || options) as MiddlewareOptions<\n  const resolvedOptions =\n    __opts ||\n    ((options || {}) as MiddlewareOptions<\n      TMiddlewares,\n      TValidator,\n      TServerContext,\n      TClientContext\n    >)\n\n  return {\n    options: resolvedOptions as any,\n    middleware: (middleware: any) => {\n      return createMiddleware<\n        TId,\n        TMiddlewares,\n        TValidator,\n        TServerContext,\n        TClientContext\n      >(undefined, Object.assign(resolvedOptions, { middleware })) as any\n    },\n    validator: (validator: any) => {\n      return createMiddleware<\n        TId,\n        TMiddlewares,\n        TValidator,\n        TServerContext,\n        TClientContext\n      >(undefined, Object.assign(resolvedOptions, { validator })) as any\n    },\n    client: (client: any) => {\n      return createMiddleware<\n        TId,\n        TMiddlewares,\n        TValidator,\n        TServerContext,\n        TClientContext\n      >(undefined, Object.assign(resolvedOptions, { client })) as any\n    },\n    server: (server: any) => {\n      return createMiddleware<\n        TId,\n        TMiddlewares,\n        TValidator,\n        TServerContext,\n        TClientContext\n      >(undefined, Object.assign(resolvedOptions, { server })) as any\n    },\n    clientAfter: (clientAfter: any) => {\n      return createMiddleware<\n        TId,\n        TMiddlewares,\n        TValidator,\n        TServerContext,\n        TClientContext\n      >(undefined, Object.assign(resolvedOptions, { clientAfter })) as any\n    },\n  } as unknown as Middleware<\n    TId,\n    TMiddlewares,\n    TValidator,\n    TServerContext,\n    TClientContext,\n    TClientAfterContext\n  >\n}\n"],"names":[],"mappings":"AA6egB,SAAA,iBAQd,SAGA,QAaA;AAEM,QAAA,kBACJ,WACE,WAAW;AAOR,SAAA;AAAA,IACL,SAAS;AAAA,IACT,YAAY,CAAC,eAAoB;AACxB,aAAA,iBAML,QAAW,OAAO,OAAO,iBAAiB,EAAE,WAAA,CAAY,CAAC;AAAA,IAC7D;AAAA,IACA,WAAW,CAAC,cAAmB;AACtB,aAAA,iBAML,QAAW,OAAO,OAAO,iBAAiB,EAAE,UAAA,CAAW,CAAC;AAAA,IAC5D;AAAA,IACA,QAAQ,CAAC,WAAgB;AAChB,aAAA,iBAML,QAAW,OAAO,OAAO,iBAAiB,EAAE,OAAA,CAAQ,CAAC;AAAA,IACzD;AAAA,IACA,QAAQ,CAAC,WAAgB;AAChB,aAAA,iBAML,QAAW,OAAO,OAAO,iBAAiB,EAAE,OAAA,CAAQ,CAAC;AAAA,IACzD;AAAA,IACA,aAAa,CAAC,gBAAqB;AAC1B,aAAA,iBAML,QAAW,OAAO,OAAO,iBAAiB,EAAE,YAAA,CAAa,CAAC;AAAA,IAAA;AAAA,EAEhE;AAQF;"}