{"version":3,"file":"Meta.js","sources":["../../../src/client/Meta.tsx"],"sourcesContent":["import { ScriptOnce, useRouter, useRouterState } from '@tanstack/react-router'\nimport * as React from 'react'\nimport jsesc from 'jsesc'\nimport { Context } from '@tanstack/react-cross-context'\nimport { Asset } from './Asset'\nimport type { RouterManagedTag } from '@tanstack/react-router'\n\nexport const useMeta = () => {\n  const router = useRouter()\n\n  const routeMeta = useRouterState({\n    select: (state) => {\n      return state.matches.map((match) => match.meta!).filter(Boolean)\n    },\n  })\n\n  const meta: Array<RouterManagedTag> = React.useMemo(() => {\n    const resultMeta: Array<RouterManagedTag> = []\n    const metaByAttribute: Record<string, true> = {}\n    let title: RouterManagedTag | undefined\n    ;[...routeMeta].reverse().forEach((metas) => {\n      ;[...metas].reverse().forEach((m) => {\n        if (!m) return\n\n        if (m.title) {\n          if (!title) {\n            title = {\n              tag: 'title',\n              children: m.title,\n            }\n          }\n        } else {\n          const attribute = m.name ?? m.property\n          if (attribute) {\n            if (metaByAttribute[attribute]) {\n              return\n            } else {\n              metaByAttribute[attribute] = true\n            }\n          }\n\n          resultMeta.push({\n            tag: 'meta',\n            attrs: {\n              ...m,\n            },\n          })\n        }\n      })\n    })\n\n    if (title) {\n      resultMeta.push(title)\n    }\n\n    resultMeta.reverse()\n\n    return resultMeta\n  }, [routeMeta])\n\n  const links = useRouterState({\n    select: (state) =>\n      state.matches\n        .map((match) => match.links!)\n        .filter(Boolean)\n        .flat(1)\n        .map((link) => ({\n          tag: 'link',\n          attrs: {\n            ...link,\n          },\n        })) as Array<RouterManagedTag>,\n    structuralSharing: true as any,\n  })\n\n  const preloadMeta = useRouterState({\n    select: (state) => {\n      const preloadMeta: Array<RouterManagedTag> = []\n\n      state.matches\n        .map((match) => router.looseRoutesById[match.routeId]!)\n        .forEach((route) =>\n          router.manifest?.routes[route.id]?.preloads\n            ?.filter(Boolean)\n            .forEach((preload) => {\n              preloadMeta.push({\n                tag: 'link',\n                attrs: {\n                  rel: 'modulepreload',\n                  href: preload,\n                },\n              })\n            }),\n        )\n\n      return preloadMeta\n    },\n    structuralSharing: true as any,\n  })\n\n  return uniqBy(\n    [...meta, ...preloadMeta, ...links] as Array<RouterManagedTag>,\n    (d) => {\n      return JSON.stringify(d)\n    },\n  )\n}\n\nexport const useMetaElements = () => {\n  const router = useRouter()\n  const meta = useMeta()\n\n  const dehydratedCtx = React.useContext(\n    Context.get('TanStackRouterHydrationContext', {}),\n  )\n\n  return (\n    <>\n      {meta.map((asset, i) => (\n        <Asset {...asset} key={`tsr-meta-${JSON.stringify(asset)}`} />\n      ))}\n      <>\n        <ScriptOnce\n          log={false}\n          // This is the raw version of the minified script below\n          // children={`\n          // __TSR__ = {\n          //   matches: [],\n          //   streamedValues: {},\n          //   queue: [],\n          //   runQueue: () => {\n          //     let changed = false\n          //     __TSR__.queue = __TSR__.queue.filter((fn) => {\n          //       if (fn()) {\n          //         changed = true\n          //         return false\n          //       }\n          //       return true\n          //     })\n          //     if (changed) {\n          //       __TSR__.runQueue()\n          //     }\n          //   },\n          //   initMatch: (match) => {\n          //     __TSR__.queue.push(() => {\n          //       if (!__TSR__.matches[match.index]) {\n          //         __TSR__.matches[match.index] = match\n          //         Object.entries(match.extracted).forEach(([id, ex]) => {\n          //           if (ex.type === 'stream') {\n          //             let controller\n          //             ex.value = new ReadableStream({\n          //               start(c) {\n          //                 controller = c\n          //               },\n          //             })\n          //             ex.value.controller = controller\n          //           } else if (ex.type === 'promise') {\n          //             let r, j\n          //             ex.value = new Promise((r_, j_) => {\n          //               ;(r = r_), (j = j_)\n          //             })\n          //             ex.resolve = r\n          //             ex.reject = j\n          //           }\n          //         })\n          //       }\n\n          //       return true\n          //     })\n\n          //     __TSR__.runQueue()\n          //   },\n          //   resolvePromise: (entry) => {\n          //     __TSR__.queue.push(() => {\n          //       const match = __TSR__.matches[entry.matchIndex]\n          //       if (match) {\n          //         const ex = match.extracted[entry.id]\n          //         if (ex) {\n          //           ex.resolve(entry.value.data)\n          //           return true\n          //         }\n          //       }\n          //       return false\n          //     })\n\n          //     __TSR__.runQueue()\n          //   },\n          //   cleanScripts: () => {\n          //     document.querySelectorAll('.tsr-once').forEach((el) => {\n          //       el.remove()\n          //     })\n          //   },\n          // }\n          //   `}\n          // This is the minified version of the script above, using https://try.terser.org/\n          // Is this archaic? Probably. But we're not going to edit this much, so it's fine.\n          // In a future world, like bun, we could use a more modern approach, like a compile-time macro minifier.\n          children={`__TSR__={matches:[],streamedValues:{},queue:[],runQueue:()=>{let e=!1;__TSR__.queue=__TSR__.queue.filter((_=>!_()||(e=!0,!1))),e&&__TSR__.runQueue()},initMatch:e=>{__TSR__.queue.push((()=>(__TSR__.matches[e.index]||(__TSR__.matches[e.index]=e,Object.entries(e.extracted).forEach((([e,_])=>{if(\"stream\"===_.type){let e;_.value=new ReadableStream({start(_){e=_}}),_.value.controller=e}else if(\"promise\"===_.type){let e,t;_.value=new Promise(((_,u)=>{e=_,t=u})),_.resolve=e,_.reject=t}}))),!0))),__TSR__.runQueue()},resolvePromise:e=>{__TSR__.queue.push((()=>{const _=__TSR__.matches[e.matchIndex];if(_){const t=_.extracted[e.id];if(t)return t.resolve(e.value.data),!0}return!1})),__TSR__.runQueue()},cleanScripts:()=>{document.querySelectorAll(\".tsr-once\").forEach((e=>{e.remove()}))}};`}\n        />\n        <ScriptOnce\n          children={`__TSR__.dehydrated = ${jsesc(\n            router.options.transformer.stringify(dehydratedCtx),\n            {\n              isScriptContext: true,\n              wrap: true,\n              json: true,\n            },\n          )}`}\n        />\n      </>\n    </>\n  )\n}\n\n/**\n * @description The `Meta` component is used to render meta tags and links for the current route.\n * It should be rendered in the `<head>` of your document.\n */\nexport const Meta = () => {\n  return <>{useMetaElements()}</>\n}\n\nfunction uniqBy<T>(arr: Array<T>, fn: (item: T) => string) {\n  const seen = new Set<string>()\n  return arr.filter((item) => {\n    const key = fn(item)\n    if (seen.has(key)) {\n      return false\n    }\n    seen.add(key)\n    return true\n  })\n}\n"],"names":["preloadMeta"],"mappings":"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"}