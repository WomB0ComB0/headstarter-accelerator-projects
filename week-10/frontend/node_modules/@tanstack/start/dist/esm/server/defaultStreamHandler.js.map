{"version":3,"file":"defaultStreamHandler.js","sources":["../../../src/server/defaultStreamHandler.tsx"],"sourcesContent":["import { PassThrough } from 'node:stream'\nimport { isbot } from 'isbot'\nimport ReactDOMServer from 'react-dom/server'\nimport { StartServer } from './StartServer'\nimport {\n  transformReadableStreamWithRouter,\n  transformStreamWithRouter,\n} from './transformStreamWithRouter'\nimport type { AnyRouter } from '@tanstack/react-router'\n\nexport type HandlerCallback<TRouter extends AnyRouter> = (ctx: {\n  request: Request\n  router: TRouter\n  responseHeaders: Headers\n}) => Response | Promise<Response>\n\nexport const defaultStreamHandler: HandlerCallback<AnyRouter> = async ({\n  request,\n  router,\n  responseHeaders,\n}) => {\n  if (typeof ReactDOMServer.renderToReadableStream === 'function') {\n    const stream = await ReactDOMServer.renderToReadableStream(\n      <StartServer router={router} />,\n      {\n        signal: request.signal,\n      },\n    )\n\n    if (isbot(request.headers.get('User-Agent'))) {\n      await stream.allReady\n    }\n\n    const transforms = [transformReadableStreamWithRouter(router)]\n\n    const transformedStream = transforms.reduce(\n      (stream, transform) => stream.pipeThrough(transform),\n      stream as ReadableStream,\n    )\n\n    return new Response(transformedStream, {\n      status: router.state.statusCode,\n      headers: responseHeaders,\n    })\n  }\n\n  if (typeof ReactDOMServer.renderToPipeableStream === 'function') {\n    const passthrough = new PassThrough()\n\n    try {\n      const pipeable = ReactDOMServer.renderToPipeableStream(\n        <StartServer router={router} />,\n        {\n          ...(isbot(request.headers.get('User-Agent'))\n            ? {\n                onAllReady() {\n                  pipeable.pipe(passthrough)\n                },\n              }\n            : {\n                onShellReady() {\n                  pipeable.pipe(passthrough)\n                },\n              }),\n          onError: (error, info) => {\n            console.log('Error in renderToPipeableStream:', error, info)\n          },\n        },\n      )\n    } catch (e) {\n      console.log('Error in renderToPipeableStream:', e)\n    }\n\n    const transforms = [transformStreamWithRouter(router)]\n\n    const transformedStream = transforms.reduce(\n      (stream, transform) => (stream as any).pipe(transform),\n      passthrough,\n    )\n\n    return new Response(transformedStream as any, {\n      status: router.state.statusCode,\n      headers: responseHeaders,\n    })\n  }\n\n  throw new Error(\n    'No renderToReadableStream or renderToPipeableStream found in react-dom/server. Ensure you are using a version of react-dom that supports streaming.',\n  )\n}\n"],"names":["stream"],"mappings":";;;;;;AAgBO,MAAM,uBAAmD,OAAO;AAAA,EACrE;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACA,MAAA,OAAO,eAAe,2BAA2B,YAAY;AACzD,UAAA,SAAS,MAAM,eAAe;AAAA,MAClC,oBAAC,eAAY,QAAgB;AAAA,MAC7B;AAAA,QACE,QAAQ,QAAQ;AAAA,MAAA;AAAA,IAEpB;AAEA,QAAI,MAAM,QAAQ,QAAQ,IAAI,YAAY,CAAC,GAAG;AAC5C,YAAM,OAAO;AAAA,IAAA;AAGf,UAAM,aAAa,CAAC,kCAAkC,MAAM,CAAC;AAE7D,UAAM,oBAAoB,WAAW;AAAA,MACnC,CAACA,SAAQ,cAAcA,QAAO,YAAY,SAAS;AAAA,MACnD;AAAA,IACF;AAEO,WAAA,IAAI,SAAS,mBAAmB;AAAA,MACrC,QAAQ,OAAO,MAAM;AAAA,MACrB,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGC,MAAA,OAAO,eAAe,2BAA2B,YAAY;AACzD,UAAA,cAAc,IAAI,YAAY;AAEhC,QAAA;AACF,YAAM,WAAW,eAAe;AAAA,QAC9B,oBAAC,eAAY,QAAgB;AAAA,QAC7B;AAAA,UACE,GAAI,MAAM,QAAQ,QAAQ,IAAI,YAAY,CAAC,IACvC;AAAA,YACE,aAAa;AACX,uBAAS,KAAK,WAAW;AAAA,YAAA;AAAA,UAC3B,IAEF;AAAA,YACE,eAAe;AACb,uBAAS,KAAK,WAAW;AAAA,YAAA;AAAA,UAE7B;AAAA,UACJ,SAAS,CAAC,OAAO,SAAS;AAChB,oBAAA,IAAI,oCAAoC,OAAO,IAAI;AAAA,UAAA;AAAA,QAC7D;AAAA,MAEJ;AAAA,aACO,GAAG;AACF,cAAA,IAAI,oCAAoC,CAAC;AAAA,IAAA;AAGnD,UAAM,aAAa,CAAC,0BAA0B,MAAM,CAAC;AAErD,UAAM,oBAAoB,WAAW;AAAA,MACnC,CAAC,QAAQ,cAAe,OAAe,KAAK,SAAS;AAAA,MACrD;AAAA,IACF;AAEO,WAAA,IAAI,SAAS,mBAA0B;AAAA,MAC5C,QAAQ,OAAO,MAAM;AAAA,MACrB,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAGH,QAAM,IAAI;AAAA,IACR;AAAA,EACF;AACF;"}