{"version":3,"file":"index.cjs","sources":["../../../src/server-handler/index.tsx"],"sourcesContent":["/// <reference types=\"vinxi/types/server\" />\nimport {\n  defaultTransformer,\n  isNotFound,\n  isPlainObject,\n  isRedirect,\n} from '@tanstack/react-router'\nimport invariant from 'tiny-invariant'\nimport {\n  eventHandler,\n  getEvent,\n  getResponseStatus,\n  toWebRequest,\n} from 'vinxi/http'\nimport { getManifest } from 'vinxi/manifest'\nimport type { H3Event } from 'vinxi/server'\n\nexport default eventHandler(handleServerAction)\n\nasync function handleServerAction(event: H3Event) {\n  return handleServerRequest(toWebRequest(event), event)\n}\n\nexport async function handleServerRequest(request: Request, _event?: H3Event) {\n  const method = request.method\n  const url = new URL(request.url, 'http://localhost:3000')\n  const search = Object.fromEntries(url.searchParams.entries()) as {\n    _serverFnId?: string\n    _serverFnName?: string\n    payload?: any\n  }\n\n  const serverFnId = search._serverFnId\n  const serverFnName = search._serverFnName\n\n  if (!serverFnId || !serverFnName) {\n    throw new Error('Invalid request')\n  }\n\n  invariant(typeof serverFnId === 'string', 'Invalid server action')\n\n  if (process.env.NODE_ENV === 'development')\n    console.info(`ServerFn Request: ${serverFnId} - ${serverFnName}`)\n  if (process.env.NODE_ENV === 'development') console.info()\n\n  const action = (await getManifest('server').chunks[serverFnId]?.import())?.[\n    serverFnName\n  ] as Function\n\n  const response = await (async () => {\n    try {\n      const arg = await (async () => {\n        // FormData\n        if (\n          request.headers.get('Content-Type')?.includes('multipart/form-data')\n        ) {\n          // We don't support GET requests with FormData payloads... that seems impossible\n          invariant(\n            method.toLowerCase() !== 'get',\n            'GET requests with FormData payloads are not supported',\n          )\n\n          return await request.formData()\n        }\n\n        // Get requests use the query string\n        if (method.toLowerCase() === 'get') {\n          // First we need to get the ?payload query string\n          if (!search.payload) {\n            return undefined\n          }\n\n          // If there's a payload, we need to parse it\n          return defaultTransformer.parse(search.payload)\n        }\n\n        // For non-form, non-get\n        const jsonPayloadAsString = await request.text()\n        return defaultTransformer.parse(jsonPayloadAsString)\n      })()\n\n      const result = await action(arg)\n\n      if (result instanceof Response) {\n        return result\n      } else if (\n        isPlainObject(result) &&\n        'result' in result &&\n        result.result instanceof Response\n      ) {\n        return result.result\n      }\n\n      // TODO: RSCs\n      // if (isValidElement(result)) {\n      //   const { renderToPipeableStream } = await import(\n      //     // @ts-expect-error\n      //     '@vinxi/react-server-dom/server'\n      //   )\n\n      //   const pipeableStream = renderToPipeableStream(result)\n\n      //   setHeaders(event, {\n      //     'Content-Type': 'text/x-component',\n      //   } as any)\n\n      //   sendStream(event, response)\n      //   event._handled = true\n\n      //   return new Response(null, { status: 200 })\n      // }\n\n      if (isRedirect(result) || isNotFound(result)) {\n        return redirectOrNotFoundResponse(result)\n      }\n\n      return new Response(\n        result !== undefined ? defaultTransformer.stringify(result) : undefined,\n        {\n          status: getResponseStatus(getEvent()),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n    } catch (error: any) {\n      if (error instanceof Response) {\n        return error\n      } else if (\n        isPlainObject(error) &&\n        'result' in error &&\n        error.result instanceof Response\n      ) {\n        return error.result\n      }\n\n      // Currently this server-side context has no idea how to\n      // build final URLs, so we need to defer that to the client.\n      // The client will check for __redirect and __notFound keys,\n      // and if they exist, it will handle them appropriately.\n\n      if (isRedirect(error) || isNotFound(error)) {\n        return redirectOrNotFoundResponse(error)\n      }\n\n      console.error('Server Fn Error!')\n      console.error(error)\n      console.info()\n\n      return new Response(defaultTransformer.stringify(error), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n    }\n  })()\n\n  if (process.env.NODE_ENV === 'development')\n    console.info(`ServerFn Response: ${response.status}`)\n\n  if (response.headers.get('Content-Type') === 'application/json') {\n    const cloned = response.clone()\n    const text = await cloned.text()\n    const payload = text ? JSON.stringify(JSON.parse(text)) : 'undefined'\n\n    if (process.env.NODE_ENV === 'development')\n      console.info(\n        ` - Payload: ${payload.length > 100 ? payload.substring(0, 100) + '...' : payload}`,\n      )\n  }\n  if (process.env.NODE_ENV === 'development') console.info()\n\n  return response\n}\n\nfunction redirectOrNotFoundResponse(error: any) {\n  const { headers, ...rest } = error\n\n  return new Response(JSON.stringify(rest), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json',\n      ...(headers || {}),\n    },\n  })\n}\n"],"names":["eventHandler","toWebRequest","getManifest","_a","defaultTransformer","isPlainObject","isRedirect","isNotFound","getResponseStatus","getEvent"],"mappings":"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"}