"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const reactRouter = require("@tanstack/react-router");
async function fetcher(base, args, handler) {
  var _a;
  const _first = args[0];
  if (reactRouter.isPlainObject(_first) && _first.method) {
    const first = _first;
    const type = first.data instanceof FormData ? "formData" : "payload";
    const headers = new Headers({
      ...type === "payload" ? {
        "content-type": "application/json",
        accept: "application/json"
      } : {},
      ...first.headers instanceof Headers ? Object.fromEntries(first.headers.entries()) : first.headers || {}
    });
    if (first.method === "GET") {
      const encodedPayload = reactRouter.encode({
        payload: reactRouter.defaultTransformer.stringify({
          data: first.data,
          context: first.context
        })
      });
      if (encodedPayload) base += `&${encodedPayload}`;
    }
    const request2 = new Request(base, {
      method: first.method,
      headers,
      ...getFetcherRequestOptions(first)
    });
    const handlerResponse = await handler(request2);
    const response2 = await handleResponseErrors(handlerResponse);
    if ((_a = response2.headers.get("content-type")) == null ? void 0 : _a.includes("application/json")) {
      const json = reactRouter.defaultTransformer.decode(await response2.json());
      if (reactRouter.isRedirect(json) || reactRouter.isNotFound(json) || json instanceof Error) {
        throw json;
      }
      return json;
    }
    return response2;
  }
  const request = new Request(base, {
    method: "POST",
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json"
    },
    body: JSON.stringify(args)
  });
  const response = await handleResponseErrors(await handler(request));
  const contentType = response.headers.get("content-type");
  if (contentType && contentType.includes("application/json")) {
    return reactRouter.defaultTransformer.decode(await response.json());
  } else {
    return response.text();
  }
}
function getFetcherRequestOptions(opts) {
  if (opts.method === "POST") {
    if (opts.data instanceof FormData) {
      opts.data.set("__TSR_CONTEXT", reactRouter.defaultTransformer.stringify(opts.context));
      return {
        body: opts.data
      };
    }
    return {
      body: reactRouter.defaultTransformer.stringify({
        data: opts.data ?? null,
        context: opts.context
      })
    };
  }
  return {};
}
async function handleResponseErrors(response) {
  if (!response.ok) {
    const contentType = response.headers.get("content-type");
    const isJson = contentType && contentType.includes("application/json");
    if (isJson) {
      throw reactRouter.defaultTransformer.decode(await response.json());
    }
    throw new Error(await response.text());
  }
  return response;
}
exports.fetcher = fetcher;
//# sourceMappingURL=fetcher.cjs.map
