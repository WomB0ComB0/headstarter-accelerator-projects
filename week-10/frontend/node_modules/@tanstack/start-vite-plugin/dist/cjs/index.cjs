"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const node_url = require("node:url");
const compilers = require("./compilers.cjs");
const debug = Boolean(process.env.TSR_VITE_DEBUG);
const transformFuncs = [
  "createServerFn",
  "createMiddleware",
  "serverOnly",
  "clientOnly",
  "createIsomorphicFn"
];
const tokenRegex = new RegExp(transformFuncs.join("|"));
const eitherFuncRegex = new RegExp(
  `(function ${transformFuncs.join("|function ")})`
);
function TanStackStartViteServerFn(opts) {
  let ROOT = process.cwd();
  return {
    name: "vite-plugin-tanstack-start-create-server-fn",
    enforce: "pre",
    configResolved: (config) => {
      ROOT = config.root;
    },
    transform(code, id) {
      const url = node_url.pathToFileURL(id);
      url.searchParams.delete("v");
      id = node_url.fileURLToPath(url).replace(/\\/g, "/");
      const includesToken = tokenRegex.test(code);
      const includesEitherFunc = eitherFuncRegex.test(code);
      if (!includesToken || includesEitherFunc) {
        return null;
      }
      if (code.includes("@react-refresh")) {
        throw new Error(
          `We detected that the '@vitejs/plugin-react' was passed before '@tanstack/start-vite-plugin'. Please make sure that '@tanstack/router-vite-plugin' is passed before '@vitejs/plugin-react' and try again: 
e.g.

plugins: [
  TanStackStartVite(), // Place this before viteReact()
  viteReact(),
]
`
        );
      }
      const compiled = compilers.compileStartOutput({
        code,
        root: ROOT,
        filename: id,
        env: opts.env
      });
      if (debug) console.info("");
      if (debug) console.info("Compiled createServerFn Output");
      if (debug) console.info("");
      if (debug) console.info(compiled.code);
      if (debug) console.info("");
      if (debug) console.info("");
      if (debug) console.info("");
      return compiled;
    }
  };
}
function TanStackStartViteDeadCodeElimination(opts) {
  let ROOT = process.cwd();
  return {
    name: "vite-plugin-tanstack-start-dead-code-elimination",
    enforce: "post",
    configResolved: (config) => {
      ROOT = config.root;
    },
    transform(code, id) {
      const url = node_url.pathToFileURL(id);
      url.searchParams.delete("v");
      id = node_url.fileURLToPath(url).replace(/\\/g, "/");
      if (transformFuncs.some((fn) => code.includes(fn))) {
        if (debug) console.info("Handling dead code elimination: ", id);
        if (debug) console.info("");
        if (debug) console.info("Dead Code Elimination Input:");
        if (debug) console.info("");
        if (debug) console.info(code);
        if (debug) console.info("");
        if (debug) console.info("");
        if (debug) console.info("");
        const compiled = compilers.compileEliminateDeadCode({
          code,
          root: ROOT,
          filename: id,
          env: opts.env
        });
        if (debug) console.info("");
        if (debug) console.info("Dead Code Elimination Output:");
        if (debug) console.info("");
        if (debug) console.info(compiled.code);
        if (debug) console.info("");
        if (debug) console.info("");
        if (debug) console.info("");
        return compiled;
      }
      return null;
    }
  };
}
exports.TanStackStartViteDeadCodeElimination = TanStackStartViteDeadCodeElimination;
exports.TanStackStartViteServerFn = TanStackStartViteServerFn;
//# sourceMappingURL=index.cjs.map
